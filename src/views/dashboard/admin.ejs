<%- include('../partials/head.ejs', { title: 'Tableau de bord - Administration' , description: '' ,
    robots: 'noindex,nofollow' }) %>
<%- include('../partials/header-dash.ejs') %>

<main class="max-w-7xl mx-auto p-4 space-y-5">
    <!-- Stats header -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 animate-slide-up">
        <div class="rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
            <p class="text-xs text-slate-400">Utilisateurs</p>
            <p class="text-xl font-semibold"><%= totals?.totalUsers ?? users.length %></p>
        </div>
        <div class="rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
            <p class="text-xs text-slate-400">Publics</p>
            <p class="text-xl font-semibold"><%= totals?.totalPublic ?? 0 %></p>
        </div>
        <div class="rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
            <p class="text-xs text-slate-400">PrivÃ©s</p>
            <p class="text-xl font-semibold"><%= totals?.totalPrivate ?? 0 %></p>
        </div>
        <div class="rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
            <p class="text-xs text-slate-400">ModÃ©ration</p>
            <p class="text-xl font-semibold"><%= totals?.moderators ?? 0 %></p>
        </div>
    </div>

    <div class="flex flex-col md:flex-row md:items-end md:justify-between gap-3 animate-slide-up">
        <div class="space-y-1">
            <h1 class="text-2xl font-bold tracking-tight">Administration Â· Utilisateurs</h1>
            <p class="text-xs text-slate-400">Rechercher, trier, changer de rÃ´le, gÃ©rer confidentialitÃ© et suppression.</p>
        </div>

        <% if (users.length> 0) { %>
        <div class="w-full md:w-auto flex flex-col sm:flex-row gap-2">
            <label class="relative block flex-1">
                <input id="searchInput" type="text" placeholder="Rechercher (nom, @id, email)"
                             class="w-full rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 pr-10 text-sm outline-none focus:ring-2 focus:ring-indigo-600 placeholder:text-slate-500" />
                <span class="absolute right-2 top-1/2 -translate-y-1/2 text-slate-500 text-xs">âŒ˜K</span>
            </label>
            <div class="flex gap-2">
                <select id="roleFilter" class="rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-indigo-600">
                    <option value="all">Tous rÃ´les</option>
                    <option value="USER">USER</option>
                    <option value="MODERATOR">MODERATOR</option>
                    <option value="DEVELOPER">DEVELOPER</option>
                    <option value="ADMIN">ADMIN</option>
                </select>
                <select id="visibilityFilter" class="rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-indigo-600">
                    <option value="all">Toutes VisibilitÃ©s</option>
                    <option value="public">Public</option>
                    <option value="private">PrivÃ©</option>
                </select>
                <select id="sortSelect" class="rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-indigo-600">
                    <option value="date-desc">Plus rÃ©cents</option>
                    <option value="date-asc">Plus anciens</option>
                    <option value="name-asc">Nom (Aâ†’Z)</option>
                    <option value="name-desc">Nom (Zâ†’A)</option>
                    <option value="id-asc">@Id (Aâ†’Z)</option>
                    <option value="id-desc">@Id (Zâ†’A)</option>
                </select>
                <button id="resetBtn" class="rounded-md bg-slate-800/60 border border-slate-700 px-3 py-2 text-sm hover:bg-slate-800">RÃ©initialiser</button>
            </div>
        </div>
        <% } %>
    </div>

    <div class="flex items-center justify-between animate-slide-up">
        <p class="text-xs text-slate-400">Total: <span id="totalCount"><%= users.length %></span></p>
        <p class="text-xs text-slate-400 hidden sm:block"><span id="visibleCount"><%= users.length %></span> affichÃ©(s)</p>
    </div>

    <% if (users.length===0) { %>
        <div
            class="rounded-lg border border-dashed border-slate-700 bg-slate-900/50 p-10 text-center space-y-2 animate-slide-up">
            <div class="text-2xl">ðŸ«¥</div>
            <p class="text-sm text-slate-300 font-medium">Aucun utilisateur pour le moment</p>
            <p class="text-xs text-slate-500">Les comptes publics sâ€™afficheront ici.</p>
        </div>
        <% } else { %>
            <ul id="usersGrid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                <% users.forEach(u=> {
                    const initials = (u.userName || u.id || '?').trim().charAt(0).toUpperCase();
                    const role = u.role || 'USER';
                    const cosmetics = (u.cosmetics || {});
                    const selected = (cosmetics.selected || {});
                    const flair = selected.flair ? String(selected.flair) : null;
                    const frame = selected.frame ? String(selected.frame) : 'none';
                    const bannerUrl = selected.bannerUrl ? String(selected.bannerUrl) : '';
                    const theme = selected.theme ? String(selected.theme) : 'system';
                    %>
                    <% const isEmailPublic=u.cosmetics && u.cosmetics.settings &&
                        u.cosmetics.settings.isEmailPublic; %>
                        <% const publicEmail=u.publicEmail || u.email; %>
                            <li class="relative group rounded-xl border border-slate-800/80 bg-slate-900/70 hover:bg-slate-900 transition-colors shadow-sm hover:shadow-md animate-slide-up overflow-visible"
                                data-name="<%- (u.userName||'').toLowerCase() %>"
                                data-id="<%- (u.id||'').toLowerCase() %>"
                                data-role="<%- (u.role||'USER') %>"
                                data-visible="<%- u.isPublic ? 'public' : 'private' %>"
                                data-created="<%- +new Date(u.createdAt) %>"
                                data-search="<%- (u.userName+' '+u.id + (isEmailPublic && publicEmail ? (' '+publicEmail) : '')).toLowerCase() %>">
                                <% if (bannerUrl) { %>
                                    <div class="h-12 w-full border-b border-slate-800"
                                        style="background: center/cover no-repeat url('<%= bannerUrl %>')">
                                    </div>
                                    <% } %>
                                        <div class="p-4 flex items-start gap-3">
                                            <div class="relative ">
                                                <div
                                                    class="relative shrink-0 h-11 w-11 rounded-full border border-indigo-600/50 overflow-hidden grid place-items-center bg-indigo-700/70 text-sm font-semibold text-white">
                                                    <%- include('../partials/avatar.ejs', { u }) %>
                                                </div>
                                                <!-- Mettre ici une puce perso si voulu -->
                                            </div>
                                            <div class="min-w-0 flex-1">
                                                <div class="flex items-center gap-2 min-w-0">
                                                    <div class="font-semibold truncate">
                                                        <%= u.userName %>
                                                    </div>
                                                    <span
                                                        class="text-[11px] px-2 py-0.5 rounded-full bg-slate-800/80 border border-slate-700 text-slate-300 truncate">@
                                                        <%= u.id %>
                                                    </span>
                                                    <% if (role && role !=='USER' ) { %>
                                                        <span
                                                            class="text-[10px] px-2 py-0.5 rounded-full border truncate <%= role === 'ADMIN' ? 'bg-red-600/20 border-red-500/40 text-red-300' : role === 'PARTNER' ? 'bg-indigo-600/20 border-indigo-500/40 text-indigo-300' : role === 'DEVELOPER' ? 'bg-emerald-600/20 border-emerald-500/40 text-emerald-300' : 'bg-slate-700/30 border-slate-600/50 text-slate-300' %>">
                                                            <%= role %>
                                                        </span>
                                                        <% } %>
                                                            <% if (flair) { %>
                                                                <span
                                                                    class="text-[10px] px-2 py-0.5 rounded-full bg-amber-500/20 border border-amber-400/40 text-amber-300 truncate"
                                                                    title="Flair">
                                                                    <%= flair %>
                                                                </span>
                                                                <% } %>
                                                </div>
                                                <% const canReveal = (user && (user.role === 'ADMIN' || user.role === 'DEVELOPER' || user.role === 'MODERATOR')); %>
                                                <% if (isEmailPublic) { %>
                                                    <span class="text-xs text-slate-400 truncate">
                                                        <%= publicEmail %>
                                                    </span>
                                                <% } else { %>
                                                    <span class="emailContainer inline-flex items-center gap-2 text-xs">
                                                      <span class="text-xs text-slate-500 italic privateEmailLabel">Email privÃ©</span>
                                                      <% if (canReveal) { %>
                                                        <span class="privateEmailWrap ml-3 inline-flex items-center gap-2 text-xs">
                                                            <button type="button" class="revealEmailBtn inline-flex items-center gap-2 px-2 py-0.5 rounded-md bg-indigo-600/85 hover:bg-indigo-500 text-white text-xs focus:outline-none focus:ring-2 focus:ring-indigo-400" aria-label="Afficher l'email">
                                                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" class="h-3 w-3 text-white"><path stroke-linecap="round" stroke-linejoin="round" d="M3 8.5v7A2.5 2.5 0 0 0 5.5 18h13A2.5 2.5 0 0 0 21 15.5v-7A2.5 2.5 0 0 0 18.5 6h-13A2.5 2.5 0 0 0 3 8.5z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M21 8.5l-9 5-9-5"/></svg>
                                                                <span>Afficher</span>
                                                            </button>
                                                            <span class="emailValue hidden"> <%= u.email %> </span>
                                                        </span>
                                                      <% } %>
                                                    </span>
                                                <% } %>
                                                            <div class="actionsWrap absolute top-3 right-3 z-20">
                                                                <button type="button" class="actionsBtn inline-flex items-center justify-center h-8 w-8 rounded-md border border-slate-700 bg-slate-800/70 text-slate-200 hover:bg-slate-800 hover:text-white transition-colors" aria-haspopup="menu" aria-expanded="false" title="Actions">
                                                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-4 w-4">
                                                                        <path d="M12 6.75a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Zm0 6a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Zm0 6a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Z" />
                                                                    </svg>
                                                                </button>
                                                                <div class="actionsMenu hidden absolute right-0 z-50 mt-2 min-w-[12rem] rounded-md border border-slate-700 bg-slate-900/95 p-1 shadow-xl">
                                                                    <a href="/<%= u.id %>" class="menuItem flex items-center gap-2 w-full text-left px-3 py-1.5 rounded hover:bg-slate-800 text-xs text-slate-200">
                                                                        <span>Voir le profil</span>
                                                                    </a>
                                                                    <button type="button" class="menuItem copyBtn flex items-center gap-2 w-full text-left px-3 py-1.5 rounded hover:bg-slate-800 text-xs text-slate-200" data-id="<%= u.id %>">
                                                                        <span>Copier le lien</span>
                                                                    </button>
                                                                    <div class="menuItem hasSubmenu relative group flex items-center gap-2 w-full text-left px-3 py-1.5 rounded hover:bg-slate-800 text-xs text-slate-200 cursor-default select-none">
                                                                        <span>RÃ´les</span>
                                                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="ml-auto h-3.5 w-3.5 opacity-80">
                                                                            <path d="M9 5l7 7-7 7" />
                                                                        </svg>
                                                                        <div class="submenu hidden absolute top-0 left-full ml-1 z-50 w-40 rounded-md border border-slate-700 bg-slate-900/95 p-1" data-side="right">
                                                                            <button class="roleSet block w-full text-left px-3 py-1.5 rounded hover:bg-slate-800 text-xs" data-role="USER">USER</button>
                                                                            <button class="roleSet block w-full text-left px-3 py-1.5 rounded hover:bg-slate-800 text-xs" data-role="MODERATOR">MODERATOR</button>
                                                                            <button class="roleSet block w-full text-left px-3 py-1.5 rounded hover:bg-slate-800 text-xs" data-role="DEVELOPER">DEVELOPER</button>
                                                                            <button class="roleSet block w-full text-left px-3 py-1.5 rounded hover:bg-slate-800 text-xs" data-role="ADMIN">ADMIN</button>
                                                                        </div>
                                                                    </div>
                                                                    <div class="my-1 border-t border-slate-700/70"></div>
                                                                    <button type="button" class="menuItem deleteBtn flex items-center gap-2 w-full text-left px-3 py-1.5 rounded hover:bg-red-900/30 text-xs text-red-300" data-id="<%= u.id %>" data-name="<%= u.userName %>">
                                                                        <span>Supprimer</span>
                                                                    </button>
                                                                </div>
                                                            </div>
                                            </div>
                                        </div>
                            </li>
                            <% }) %>
            </ul>
            <% } %>
</main>

<script src="/public/js/pagination.js"></script>
<script>
    (function () {
        const $ = (s, r = document) => r.querySelector(s);
        const $$ = (s, r = document) => Array.from(r.querySelectorAll(s));
        const search = $('#searchInput');
        const sort = $('#sortSelect');
        const roleFilter = $('#roleFilter');
        const visFilter = $('#visibilityFilter');
        const grid = $('#usersGrid');
        const totalCount = $('#totalCount');
        const visibleCount = $('#visibleCount');
        const resetBtn = $('#resetBtn');

        if (!grid || !window.__PlinkkPaginator) return;

        const paginator = window.__PlinkkPaginator.createPaginator(grid, {
            pageSize: 21, selectors: { items: 'li' }, onRender: (pageItems, meta) => {
                // mettre Ã  jour visibleCount (nombre total match)
                if (visibleCount) visibleCount.textContent = String(meta.totalItems);
            }
        });

        // initial total count
        if (totalCount) totalCount.textContent = String(paginator.getAll().length);

        function applyFilter() {
            const q = (search?.value || '').trim().toLowerCase();
            const rf = (roleFilter?.value || 'all');
            const vf = (visFilter?.value || 'all');
            const all = paginator.getAll();
            const filtered = all.filter(li => {
                const hay = (li.dataset.search || '').toString();
                const role = (li.dataset.role || 'USER');
                const vis = (li.dataset.visible || 'private');
                const okQ = !q || hay.includes(q);
                const okR = rf === 'all' || role === rf;
                const okV = vf === 'all' || vis === vf;
                return okQ && okR && okV;
            });
            paginator.setFiltered(filtered);
        }

        function applySort() {
            const val = sort?.value;
            const collator = new Intl.Collator('fr', { sensitivity: 'base' });
            const getKey = (li, key) => (li.dataset[key] || '').toString();
            paginator.sort((a, b) => {
                switch (val) {
                    case 'date-desc': return (Number(getKey(b, 'created')) - Number(getKey(a, 'created')));
                    case 'date-asc': return (Number(getKey(a, 'created')) - Number(getKey(b, 'created')));
                    case 'name-asc': return collator.compare(getKey(a, 'name'), getKey(b, 'name'));
                    case 'name-desc': return collator.compare(getKey(b, 'name'), getKey(a, 'name'));
                    case 'id-asc': return collator.compare(getKey(a, 'id'), getKey(b, 'id'));
                    case 'id-desc': return collator.compare(getKey(b, 'id'), getKey(a, 'id'));
                    default: return 0;
                }
            });
        }

        search?.addEventListener('input', () => applyFilter());
        sort?.addEventListener('change', () => applySort());
        roleFilter?.addEventListener('change', () => applyFilter());
        visFilter?.addEventListener('change', () => applyFilter());
        resetBtn?.addEventListener('click', () => {
            if (search) search.value = '';
            if (sort) sort.value = 'date-desc';
            if (roleFilter) roleFilter.value = 'all';
            if (visFilter) visFilter.value = 'all';
            applySort();
            applyFilter();
        });

        // Styles additionnels pour menus
        const styleMenu = document.createElement('style');
        styleMenu.textContent = `
.actionsWrap { display: inline-block; }
.actionsMenu { backdrop-filter: blur(4px); }
.actionsMenu .menuItem { line-height: 1; }
.actionsMenu .hasSubmenu:hover > .submenu { display: block; }
.submenu { min-width: 9rem; }
`;
        document.head.appendChild(styleMenu);

        // Copier le lien
        grid.addEventListener('click', (e) => {
            const btn = e.target.closest('.copyBtn');
            if (btn) {
                const url = (window.location && window.location.origin ? window.location.origin : '') + '/' + btn.dataset.id;
                navigator.clipboard?.writeText(url).catch(() => { });
                // Fermer menu si bouton dans le menu
                const menu = btn.closest('.actionsMenu');
                if (menu) {
                    menu.classList.add('hidden');
                }
            }
        });

        // Animation des boutons copier
        const style = document.createElement('style');
        style.textContent = `
.copy-anim { position: relative; }
.copy-anim::after {
    content: 'CopiÃ© !';
    position: absolute; left: 50%; top: -10px; transform: translate(-50%, -100%);
    background: rgba(16,185,129,.95); color: #fff; font-size: 10px; border-radius: 6px; padding: 4px 6px;
    opacity: 0; pointer-events: none; transition: opacity .25s ease, transform .25s ease;
    box-shadow: 0 8px 24px rgba(16,185,129,.35);
}
.copy-anim.copied::after { opacity: 1; transform: translate(-50%, -120%); }
.copy-anim.copied { box-shadow: 0 0 0 1px rgba(16,185,129,.35) inset; }
`;
        document.head.appendChild(style);

        grid.addEventListener('click', (e) => {
            const btn = e.target.closest('.copyBtn');
            if (btn) {
                btn.classList.add('copy-anim');
                setTimeout(() => btn.classList.add('copied'), 10);
                setTimeout(() => btn.classList.remove('copied'), 1000);
            }
        });

        // Menus d'actions et sous-menu RÃ´les
        function closeAllMenus(except) {
            $$('.actionsMenu').forEach(m => { if (!except || m !== except) m.classList.add('hidden'); });
        }
        grid.addEventListener('click', (e) => {
            const btn = e.target.closest('.actionsBtn');
            if (btn) {
                const wrap = btn.closest('.actionsWrap');
                const menu = wrap.querySelector('.actionsMenu');
                const isHidden = menu.classList.contains('hidden');
                closeAllMenus(menu);
                menu.classList.toggle('hidden', !isHidden);
                btn.setAttribute('aria-expanded', String(!isHidden));
                // Ajuster la position du sous-menu (droite/gauche) quand on ouvre
                requestAnimationFrame(() => {
                    wrap.querySelectorAll('.submenu').forEach((sub) => {
                        const rect = sub.getBoundingClientRect();
                        const overflowRight = rect.right > window.innerWidth - 8; // marge
                        if (overflowRight) {
                            sub.style.left = 'auto';
                            sub.style.right = '100%';
                            sub.style.marginLeft = '0';
                            sub.style.marginRight = '0.25rem';
                            sub.dataset.side = 'left';
                        } else {
                            sub.style.left = '100%';
                            sub.style.right = 'auto';
                            sub.style.marginLeft = '0.25rem';
                            sub.style.marginRight = '0';
                            sub.dataset.side = 'right';
                        }
                    });
                });
            }
        });
        document.addEventListener('click', (ev) => {
            if (!ev.target.closest('.actionsWrap')) closeAllMenus();
        });
        document.addEventListener('keydown', (ev) => {
            if (ev.key === 'Escape') closeAllMenus();
        });

        // Changer rÃ´le via Ã©lÃ©ments du sous-menu
        grid.addEventListener('click', async (e) => {
            const setBtn = e.target.closest('.roleSet');
            if (!setBtn) return;
            const li = e.target.closest('li');
            const id = li?.dataset.id;
            const newRole = setBtn.dataset.role;
            try {
                const res = await fetch('/api/users/' + encodeURIComponent(id) + '/role', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ role: newRole })
                });
                if (!res.ok) throw new Error('HTTP ' + res.status);
                li.dataset.role = newRole;
            } catch (err) {
                console.error(err);
                alert('Impossible de changer le rÃ´le.');
            }
            closeAllMenus();
            applyFilter();
        });

        // Repositionner le sous-menu au survol pour Ã©viter le dÃ©passement
        grid.addEventListener('mouseover', (e) => {
            const host = e.target.closest('.hasSubmenu');
            if (!host) return;
            const sub = host.querySelector('.submenu');
            if (!sub) return;
            requestAnimationFrame(() => {
                const rect = sub.getBoundingClientRect();
                const overflowRight = rect.right > window.innerWidth - 8;
                if (overflowRight) {
                    sub.style.left = 'auto';
                    sub.style.right = '100%';
                    sub.style.marginLeft = '0';
                    sub.style.marginRight = '0.25rem';
                    sub.dataset.side = 'left';
                } else {
                    sub.style.left = '100%';
                    sub.style.right = 'auto';
                    sub.style.marginLeft = '0.25rem';
                    sub.style.marginRight = '0';
                    sub.dataset.side = 'right';
                }
            });
        });

        // Supprimer un utilisateur (admin)
        grid.addEventListener('click', async (e) => {
            const btn = e.target.closest('.deleteBtn');
            if (!btn) return;
            const id = btn.dataset.id;
            const name = btn.dataset.name || id;
            const confirmWithInput = (displayName, userId) => new Promise(resolve => {
                const overlay = document.createElement('div');
                overlay.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black/50';
                overlay.innerHTML = `
                                    <div class="w-full max-w-md mx-4 bg-slate-900 border border-slate-700 rounded-md p-4 text-sm">
                                        <div class="mb-3">Pour confirmer la suppression du compte "<strong>${displayName}</strong>" (@${userId}), tapez <strong>${userId}</strong> ciâ€‘dessous :</div>
                                        <input type="text" class="w-full mb-3 px-3 py-2 rounded bg-slate-800 border border-slate-700 text-sm" aria-label="Confirmation input" />
                                        <div class="flex justify-end gap-2">
                                        <button class="cancel px-3 py-1.5 rounded-md bg-slate-700 text-sm">Annuler</button>
                                        <button class="ok px-3 py-1.5 rounded-md bg-red-600 text-white text-sm">Supprimer</button>
                                        </div>
                                    </div>`;
                const input = overlay.querySelector('input');
                const btnOk = overlay.querySelector('.ok');
                const btnCancel = overlay.querySelector('.cancel');

                document.body.appendChild(overlay);
                input.focus();

                const cleanup = (res) => {
                    overlay.remove();
                    resolve(res);
                };

                btnCancel.addEventListener('click', () => cleanup(false));
                overlay.addEventListener('click', (ev) => { if (ev.target === overlay) cleanup(false); });
                btnOk.addEventListener('click', () => cleanup((input.value || '').trim() === String(userId)));
                input.addEventListener('keydown', (ev) => {
                    if (ev.key === 'Enter') { ev.preventDefault(); btnOk.click(); }
                    if (ev.key === 'Escape') { btnCancel.click(); }
                });
            });

            const ok = await confirmWithInput(name, id);
            if (!ok) return;
            btn.disabled = true; btn.textContent = 'Suppression...';
            try {
                const res = await fetch(`/api/users/${encodeURIComponent(id)}`, { method: 'DELETE' });
                if (!res.ok) throw new Error('HTTP ' + res.status);
                const li = btn.closest('li');
                if (li) li.remove();
                // refresh paginator source & counts
                paginator.setFiltered(paginator.getAll());
                if (totalCount) totalCount.textContent = String(paginator.getAll().length);
            } catch (err) {
                console.error(err);
                alert('Impossible de supprimer cet utilisateur.');
            } finally {
                btn.disabled = false; btn.textContent = 'Supprimer';
            }
        });

        // Reveal / hide private email for admins (toggle)
        grid.addEventListener('click', (e) => {
            const btn = e.target.closest('.revealEmailBtn');
            if (!btn) return;
            const container = btn.closest('.emailContainer');
            if (!container) return;
            const wrap = container.querySelector('.privateEmailWrap');
            if (!wrap) return;
            const emailEl = wrap.querySelector('.emailValue');
            if (!emailEl) return;
            const email = emailEl.textContent || '';
            // if email currently hidden, show it with Copy and Hide buttons
            if (!container.classList.contains('revealed')) {
                container.classList.add('revealed');
                // replace only the inner content of the container to avoid layout shift
                container.innerHTML = `<span class="text-xs text-slate-400 truncate emailShown">${email}</span>
                                       <div class="inline-flex items-center gap-2 ml-2">
                                         <button class="copySmall px-2 py-0.5 text-xs rounded-md bg-emerald-600 text-white hover:bg-emerald-500">Copier</button>
                                         <button class="hideEmailBtn px-2 py-0.5 text-xs rounded-md bg-slate-700 text-white hover:bg-slate-600">Cacher</button>
                                       </div>`;
                const copyBtn = container.querySelector('.copySmall');
                copyBtn?.addEventListener('click', () => {
                    navigator.clipboard?.writeText(email).then(() => {
                        copyBtn.textContent = 'CopiÃ© !';
                        setTimeout(() => copyBtn.textContent = 'Copier', 1000);
                    }).catch(()=>{});
                });
                const hideBtn = container.querySelector('.hideEmailBtn');
                hideBtn?.addEventListener('click', () => {
                    // restore to initial state (Email privÃ© + reveal button) with new markup
                    container.classList.remove('revealed');
                    container.innerHTML = `<span class="text-xs text-slate-500 italic privateEmailLabel">Email privÃ©</span>` +
                                           `<span class="privateEmailWrap ml-3 inline-flex items-center gap-2 text-xs">` +
                                             `<button type="button" class="revealEmailBtn inline-flex items-center gap-2 px-2 py-0.5 rounded-md bg-indigo-600/85 hover:bg-indigo-500 text-white text-xs focus:outline-none focus:ring-2 focus:ring-indigo-400" aria-label="Afficher l'email">` +
                                               `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" class="h-3 w-3 text-white"><path stroke-linecap="round" stroke-linejoin="round" d="M3 8.5v7A2.5 2.5 0 0 0 5.5 18h13A2.5 2.5 0 0 0 21 15.5v-7A2.5 2.5 0 0 0 18.5 6h-13A2.5 2.5 0 0 0 3 8.5z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M21 8.5l-9 5-9-5"/></svg>` +
                                               `<span>Afficher</span></button>` +
                                             `<span class="emailValue hidden">${email}</span>` +
                                           `</span>`;
                });
            }
        });

    // Init
    if (sort) sort.value = 'date-desc';
    applySort();
    applyFilter();

        // shortcut
        document.addEventListener('keydown', (ev) => {
            const isMac = /Mac|iPod|iPhone|iPad/.test(navigator.platform);
            const meta = isMac ? ev.metaKey : ev.ctrlKey;
            if (meta && ev.key.toLowerCase() === 'k') { ev.preventDefault(); search?.focus(); }
        });
    })();
</script>
</body>

</html>