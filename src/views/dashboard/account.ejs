<%- include('../partials/head.ejs', { title: 'Tableau de bord - Mon compte', description: 'Gère ton email, mot de passe et confidentialité du profil.', robots: 'noindex,nofollow' }) %>
<%- include('../partials/header-dash.ejs') %>


  <main class="max-w-7xl mx-auto grid grid-cols-12 gap-4 px-4 py-4">

  <%- include('../partials/asside_dash.ejs', { active: 'account' }) %>

    <section class="col-span-12 lg:col-span-9 space-y-4">
      <div class="rounded-xl border border-slate-800/60 bg-slate-900/60 p-5 shadow animate-slide-up">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-lg font-semibold mb-1">Mon compte</h1>
            <p class="text-xs text-slate-400">Gère ton email, ton mot de passe et la confidentialité.</p>
          </div>
          <a href="/dashboard/cosmetics" class="px-3 py-2 text-sm rounded-md bg-slate-800/80 hover:bg-slate-800 border border-slate-700 text-slate-200">Cosmétiques ➜</a>
        </div>
      </div>

      <!-- Avatar -->
      <div class="rounded-xl border border-slate-800/60 bg-slate-900/60 p-4 shadow animate-slide-up grid grid-cols-1 md:grid-cols-[auto,1fr] gap-4 items-start">
        <div>
          <div class="h-20 w-20 rounded-full overflow-hidden border border-slate-700 bg-slate-800 grid place-items-center text-xl font-semibold text-slate-200" id="avatarPreview" data-avatar>
            <%- include('../partials/avatar.ejs', { user: user }) %>
          </div>
        </div>
        <div>
          <h2 class="font-medium mb-2">Photo de profil</h2>
          <p class="text-xs text-slate-400 mb-3">PNG, JPG ou WebP (max 2 Mo). L’image sera affichée partout où ton avatar apparaît.</p>
          <div class="flex flex-col sm:flex-row gap-2 items-start">
            <input id="avatarInput" type="file" accept="image/*" class="block text-xs text-slate-200 file:mr-3 file:py-2 file:px-3 file:rounded-md file:border-0 file:text-xs file:font-medium file:bg-slate-800 file:text-slate-200 hover:file:bg-slate-700" />
          </div>
          <p id="avatarMsg" class="mt-2 text-xs"></p>
        </div>
      </div>

      <div class="grid grid-cols-1 xl:grid-cols-2 gap-4">
        <!-- Email -->
        <form id="formEmail" class="rounded-xl border border-slate-800/60 bg-slate-900/60 p-4 shadow animate-slide-up">
          <h2 class="font-medium mb-3">Email</h2>
          <label class="block text-xs text-slate-300 mb-1">Adresse email</label>
          <input name="email" type="email" value="<%= user.email %>" class="w-full rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm mb-3" />
          <button class="px-3 py-2 text-sm rounded-md bg-indigo-600 hover:bg-indigo-500 text-white" type="submit">Mettre à jour l'email</button>
        </form>

        <!-- Mot de passe -->
        <form id="formPassword" class="rounded-xl border border-slate-800/60 bg-slate-900/60 p-4 shadow animate-slide-up">
          <h2 class="font-medium mb-3">Mot de passe</h2>
          <label class="block text-xs text-slate-300 mb-1">Mot de passe actuel</label>
          <input name="currentPassword" type="password" class="w-full rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm mb-2" />
          <label class="block text-xs text-slate-300 mb-1">Nouveau mot de passe</label>
          <input name="newPassword" type="password" class="w-full rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm mb-2" />
          <label class="block text-xs text-slate-300 mb-1">Confirmer le mot de passe</label>
          <input name="confirmPassword" type="password" class="w-full rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm mb-3" />
          <button class="px-3 py-2 text-sm rounded-md bg-indigo-600 hover:bg-indigo-500 text-white" type="submit">Changer le mot de passe</button>
        </form>

        <!-- Confidentialité -->
        <div class="rounded-xl border border-slate-800/60 bg-slate-900/60 p-4 shadow animate-slide-up">
          <h2 class="font-medium mb-3">Confidentialité</h2>
          <div class="flex items-center justify-between py-2">
            <div>
              <p class="text-sm font-medium">Profil public</p>
              <p class="text-xs text-slate-400">Autoriser l'apparition dans la page Utilisateurs.</p>
            </div>
            <label class="inline-flex items-center cursor-pointer relative">
              <input id="togglePublic" type="checkbox" class="sr-only peer" <%= user.isPublic ? 'checked' : '' %> />
              <span class="w-10 h-6 bg-slate-700/80 rounded-full p-1 peer-checked:bg-emerald-600 transition"></span>
              <!-- knob: must be a sibling of the input for Tailwind's peer-checked selector to work -->
              <span class="absolute top-1 left-1 size-4 rounded-full bg-white transition peer-checked:translate-x-4"></span>
            </label>
          </div>
          <div class="flex items-center justify-between py-2">
            <div>
              <p class="text-sm font-medium">Afficher mon email</p>
              <p class="text-xs text-slate-400">Rendre l'email visible sur la page Utilisateurs.</p>
            </div>
            <label class="inline-flex items-center cursor-pointer relative">
              <input id="toggleEmailPublic" type="checkbox" class="sr-only peer" <%= isEmailPublic ? 'checked' : '' %> />
              <span class="w-10 h-6 bg-slate-700/80 rounded-full p-1 peer-checked:bg-emerald-600 transition"></span>
              <span class="absolute top-1 left-1 size-4 rounded-full bg-white transition peer-checked:translate-x-4"></span>
            </label>
          </div>
        </div>

        <!-- Danger zone: supprimer mon compte -->
        <div id="deleteZone" class="rounded-xl border border-red-900/50 bg-red-950/40 p-4 shadow animate-slide-up">
          <h2 class="font-medium mb-2 text-red-200">Supprimer mon compte</h2>
          <p class="text-xs text-red-300 mb-3">Cette action est définitive. Toutes vos données (liens, labels, icônes sociales, couleurs, etc.) seront supprimées.</p>

          <!-- Bouton initial unique qui ouvre un modal popup -->
          <div id="deleteAction" class="">
            <button id="btnShowDelete" class="px-3 py-2 text-sm rounded-md bg-red-700 hover:bg-red-600 text-white border border-red-500/60" type="button">Supprimer le compte</button>
          </div>
        </div>

        <!-- fin colonne -->
      </div>
    </section>
  </main>

  <!-- Modal popup (initialement caché) -->
  <div id="deleteModal" class="fixed inset-0 hidden z-50 grid place-items-center">
    <!-- Overlay -->
    <div class="absolute inset-0 bg-black/60 modal-overlay"></div>

    <!-- Contenu du modal -->
    <div class="relative w-full max-w-lg mx-4">
      <div class="rounded-lg bg-slate-900/95 border border-slate-800/60 p-6 shadow-lg">
        <h3 class="text-lg font-semibold mb-2 text-red-200">Confirmer la suppression du compte</h3>
        <p class="text-xs text-red-300 mb-4">Cette action est définitive et irréversible. Entrez votre mot de passe pour confirmer.</p>

        <div id="deleteError" class="hidden mb-3 text-sm text-amber-300"></div>

        <form id="formDeleteAccount" autocomplete="off">
          <label class="block text-xs text-red-100 mb-1">Mot de passe</label>
          <input id="deletePassword" name="password" type="password" required class="w-full rounded-md bg-slate-950/40 border border-red-800 px-3 py-2 text-sm mb-3 text-red-50 placeholder:text-red-300/60" placeholder="Votre mot de passe" />

          <% if (user && user.twoFactorEnabled) { %>
            <label class="block text-xs text-red-100 mb-1">Code 2FA</label>
            <input id="deleteOtp" name="otp" type="text" inputmode="numeric" pattern="[0-9]*" maxlength="6" required class="w-full rounded-md bg-slate-950/40 border border-red-800 px-3 py-2 text-sm mb-3 text-red-50 placeholder:text-red-300/60" placeholder="123456" />
          <% } %>

          <div class="flex items-center justify-end gap-2 mt-4">
            <button id="btnCancelDelete" class="px-3 py-2 text-sm rounded-md bg-slate-800 hover:bg-slate-700 text-white border border-slate-700" type="button">Annuler</button>
            <button id="btnConfirmDelete" class="px-3 py-2 text-sm rounded-md bg-red-700 hover:bg-red-600 text-white border border-red-500/60" type="submit">Supprimer définitivement</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
  (function(){
    const $ = (s, r=document) => r.querySelector(s);
    const input = $('#avatarInput');
    const preview = $('#avatarPreview');
    const msg = $('#avatarMsg');

    function setMsg(text, ok){
      if (!msg) return;
      msg.textContent = text || '';
      msg.className = 'mt-2 text-xs ' + (ok ? 'text-emerald-300' : 'text-amber-300');
    }

    async function uploadAvatar(){
      if (!input || !input.files || !input.files[0]) { setMsg('Choisis une image.', false); return; }
      const file = input.files[0];
      if (!/^image\//i.test(file.type)) { setMsg('Fichier non valide (image requise).', false); return; }
      if (file.size > 2 * 1024 * 1024) { setMsg('Image trop lourde (max 2 Mo).', false); return; }
      try {
        const fd = new FormData();
        fd.append('avatar', file, file.name);
        const res = await fetch('/api/me/avatar-file', {
          method: 'POST',
          body: fd
        });
        if (!res.ok) throw new Error('HTTP ' + res.status);
        const json = await res.json();
        if (json && (json.url || json.file) && preview){
          const raw = json.url || ('/public/uploads/plinkk/' + json.file);
          const url = raw + '?v=' + Date.now();
          preview.innerHTML = '<img src="' + url + '" alt="Avatar" class="h-full w-full object-cover" />';
          const currentId = '<%= user.id %>';
          document.querySelectorAll('[data-avatar]').forEach(el => {
            const elUser = el.getAttribute && el.getAttribute('data-avatar-user');
            if (elUser && elUser === currentId) {
              if (el.tagName === 'IMG') {
                el.setAttribute('src', url);
              } else {
                el.innerHTML = '<img data-avatar data-avatar-user="' + currentId + '" src="' + url + '" alt="Avatar" class="h-full w-full object-cover" />';
              }
            }
          });
        }
        setMsg('Avatar mis à jour.', true);
      } catch(err){
        console.error(err);
        setMsg('Échec de l’upload.', false);
      }
    }

    input?.addEventListener('change', uploadAvatar);
  })();
  </script>

  <script>
    // Expose si la 2FA est activée (valeur server-side) au JS client
    const twoFactorEnabled = <%= (user && user.twoFactorEnabled) ? 'true' : 'false' %>;
    // Email
    document.getElementById('formEmail')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const fd = new FormData(e.currentTarget);
      const payload = Object.fromEntries(fd.entries());
      const res = await fetch('/api/me/email', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
      const j = await res.json().catch(()=>({}));
      if (res.ok) alert('Email mis à jour'); else alert(j.error || 'Erreur');
    });

    // Toggle profil public
    document.getElementById('togglePublic')?.addEventListener('change', async (e) => {
      const checked = e.currentTarget.checked;
      await fetch('/api/me/visibility', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ isPublic: checked }) });
    });

    // Toggle email public
    document.getElementById('toggleEmailPublic')?.addEventListener('change', async (e) => {
      const checked = e.currentTarget.checked;
      await fetch('/api/me/email-visibility', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ isEmailPublic: checked }) });
    });

    // Mot de passe
    document.getElementById('formPassword')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const fd = new FormData(e.currentTarget);
      const payload = Object.fromEntries(fd.entries());
      const res = await fetch('/api/me/password', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
      const j = await res.json().catch(()=>({}));
      if (res.ok) alert('Mot de passe mis à jour'); else alert(j.error || 'Erreur');
    });

    // Supprimer mon compte: nouveau flux avec bouton unique -> affiche formulaire
    (function(){
      const btnShow = document.getElementById('btnShowDelete');
      const modal = document.getElementById('deleteModal');
      const form = document.getElementById('formDeleteAccount');
      const btnCancel = document.getElementById('btnCancelDelete');
      const btnConfirm = document.getElementById('btnConfirmDelete');
      const errorMsg = document.getElementById('deleteError');

      if (!btnShow || !modal || !form) return;

      // Ouvre le modal
      btnShow.addEventListener('click', () => {
        modal.classList.remove('hidden');
        setTimeout(() => {
          const pwd = document.getElementById('deletePassword');
          pwd && pwd.focus();
        }, 100);
      });

      // Ferme le modal (annuler)
      btnCancel?.addEventListener('click', () => {
        form.reset();
        modal.classList.add('hidden');
        if (errorMsg) { errorMsg.classList.add('hidden'); errorMsg.textContent = ''; }
      });

      // Ferme le modal si on clique sur l'overlay
      modal.querySelector('.modal-overlay')?.addEventListener('click', () => {
        form.reset();
        modal.classList.add('hidden');
        if (errorMsg) { errorMsg.classList.add('hidden'); errorMsg.textContent = ''; }
      });

      // Submit
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        if (btnConfirm) btnConfirm.disabled = true;
        if (errorMsg) { errorMsg.classList.add('hidden'); errorMsg.textContent = ''; }

        const fd = new FormData(form);
        const payload = Object.fromEntries(fd.entries());

        // Validation minimale côté client
        if (!payload.password || String(payload.password).trim() === '') {
          if (errorMsg) { errorMsg.textContent = 'Entrez votre mot de passe.'; errorMsg.classList.remove('hidden'); }
          btnConfirm && (btnConfirm.disabled = false);
          return;
        }
        if (twoFactorEnabled) {
          if (!payload.otp || String(payload.otp).trim().length < 6) {
            if (errorMsg) { errorMsg.textContent = 'Entrez votre code 2FA (6 chiffres).'; errorMsg.classList.remove('hidden'); }
            btnConfirm && (btnConfirm.disabled = false);
            return;
          }
        }

        try {
          const res = await fetch('/api/me/delete', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload)});
          const j = await res.json().catch(()=>({}));
          if (!res.ok) {
            if (errorMsg) { errorMsg.textContent = j.error || 'Suppression impossible'; errorMsg.classList.remove('hidden'); }
            btnConfirm && (btnConfirm.disabled = false);
            return;
          }
          // Succès : fermer le modal et rediriger
          modal.classList.add('hidden');
          // Affiche une notification dans le site puis redirige
          const toast = document.createElement('div');
          toast.className = 'rounded-md bg-emerald-600 text-white px-4 py-2 text-sm shadow';
          Object.assign(toast.style, {
            position: 'fixed',
            top: '1rem',
            right: '1rem',
            zIndex: '99999',
            transition: 'opacity .3s',
            opacity: '1'
          });
          toast.textContent = 'Compte supprimé. Redirection...';
          document.body.appendChild(toast);

          // Faire disparaître puis rediriger
          setTimeout(() => { toast.style.opacity = '0'; }, 1500);
          setTimeout(() => {
            if (toast.parentNode) toast.parentNode.removeChild(toast);
            window.location.href = '/';
          }, 1800);
          window.location.href = '/';
        } catch(err){
          console.error(err);
          if (errorMsg) { errorMsg.textContent = 'Erreur réseau'; errorMsg.classList.remove('hidden'); }
        } finally {
          btnConfirm && (btnConfirm.disabled = false);
        }
      });
    })();
  </script>
