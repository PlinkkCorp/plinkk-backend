<%- include('../../partials/head.ejs', 
{   title: 'Tableau de bord - Administration' , 
    description: 'Tableau de bord d\'administration — actions rapides, statistiques et modération.' ,
    robots: 'noindex,nofollow' }) %>

    <%- include('../../partials/header-dash.ejs', { user: user }) %>
        <%- include('../../partials/admin-nav.ejs', { user: user }) %>

            <% // safe fallbacks: totals or pendingThemes might be undefined depending on controller const
                pendingCount=(typeof totals !=='undefined' && totals && totals.pendingThemes !=null) ?
                totals.pendingThemes : (typeof pendingThemes !=='undefined' && pendingThemes ? pendingThemes.length :
                0); const totalUsersCount=(typeof totals !=='undefined' && totals && totals.totalUsers !=null) ?
                totals.totalUsers : users.length; const totalPublicCount=(typeof totals !=='undefined' && totals &&
                totals.totalPublic !=null) ? totals.totalPublic : 0; const moderatorsCount=(typeof totals !=='undefined'
                && totals && totals.moderators !=null) ? totals.moderators : 0; const privateCount=(typeof totals
                !=='undefined' && totals && totals.totalPrivate !=null) ? totals.totalPrivate : (Array.isArray(users) ?
                users.filter(u=>
                !u.isPublic).length : 0);
                %>
                <main class="max-w-7xl mx-auto p-4 space-y-5">
                    <!-- Quick actions -->
                    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                        <div>
                            <h1 class="text-2xl font-bold tracking-tight">Administration</h1>
                            <p class="text-xs text-slate-400">Tableau de bord d'administration — actions rapides,
                                statistiques et modération.</p>
                        </div>

                    </div>

                    <!-- Stats cards -->
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
                        <div class="rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
                            <p class="text-xs text-slate-400">Utilisateurs</p>
                            <p class="text-xl font-semibold">
                                <%= totalUsersCount %>
                            </p>
                        </div>
                        <div class="rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
                            <p class="text-xs text-slate-400">Thèmes en attente</p>
                            <p class="text-xl font-semibold">
                                <%= pendingCount %>
                            </p>
                        </div>
                        <div class="rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
                            <p class="text-xs text-slate-400">Publics</p>
                            <p class="text-xl font-semibold">
                                <%= totalPublicCount %>
                            </p>
                        </div>
                        <div class="rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
                            <p class="text-xs text-slate-400">Privés</p>
                            <p class="text-xl font-semibold">
                                <%= privateCount %>
                            </p>
                        </div>
                    </div>

                    <!-- Main grid: Users + Pending Themes -->
                    <div class="grid grid-cols-1 lg:grid-cols-3 gap-4">
                        <!-- Users list (2/3) -->
                        <section class="lg:col-span-2 rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
                            <div class="flex items-center justify-between mb-3">
                                <h2 class="font-medium">Utilisateurs</h2>
                                <div class="text-xs text-slate-400">Total: <span id="totalCount">
                                        <%= users.length %>
                                    </span></div>
                            </div>

                            <div class="mb-3 flex gap-2 flex-wrap">
                                <input id="searchInput" type="text" placeholder="Rechercher (nom, @id, email)"
                                    class="flex-1 rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm" />
                                <select id="roleFilter"
                                    class="rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm">
                                    <option value="all">Tous rôles</option>
                                    <option value="USER">USER</option>
                                    <option value="BETA">BETA</option>
                                    <option value="PARTNER">PARTNER</option>
                                    <option value="MODERATOR">MODERATOR</option>
                                    <option value="DEVELOPER">DEVELOPER</option>
                                    <option value="ADMIN">ADMIN</option>
                                </select>
                                <select id="visibilityFilter"
                                    class="rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm">
                                    <option value="all">Toutes Visibilités</option>
                                    <option value="public">Public</option>
                                    <option value="private">Privé</option>
                                </select>
                                <select id="sortSelect"
                                    class="rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm">
                                    <option value="date-desc">Plus récents</option>
                                    <option value="date-asc">Plus anciens</option>
                                    <option value="name-asc">Nom (A→Z)</option>
                                    <option value="name-desc">Nom (Z→A)</option>
                                </select>
                                <button id="resetBtn"
                                    class="rounded-md bg-slate-800/60 border border-slate-700 px-3 py-2 text-sm">Réinitialiser</button>
                            </div>

                            <% if (users.length===0) { %>
                                <p class="text-sm text-slate-400">Aucun utilisateur pour le moment.</p>
                                <% } else { %>
                                    <ul id="usersGrid" class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                                        <% users.forEach(u=> { %>
                                            <li class="relative rounded border border-slate-800 p-3 bg-slate-900 text-sm overflow-visible pr-12"
                                                data-name="<%- (u.userName||'').toLowerCase() %>"
                                                data-id="<%- (u.id||'').toLowerCase() %>"
                                                data-role="<%- (u.role||'USER') %>"
                                                data-visible="<%- u.isPublic ? 'public' : 'private' %>"
                                                data-email-public="<%- u.publicEmail ? '1' : '0' %>"
                                                data-created="<%- +new Date(u.createdAt) %>"
                                                data-search="<%- (u.userName+' '+u.id+' '+(u.publicEmail||u.email||'')).toLowerCase() %>">
                                                <div class="flex items-start gap-3">
                                                    <div
                                                        class="w-10 h-10 rounded-full bg-indigo-700/60 flex items-center justify-center text-white font-semibold">
                                                        <%= (u.userName||u.id||'?').charAt(0).toUpperCase() %>
                                                    </div>
                                                    <div class="min-w-0">
                                                        <div class="flex items-center gap-2">
                                                            <div class="font-semibold truncate">
                                                                <%= u.userName %>
                                                            </div>
                                                            <span
                                                                class="text-xs px-2 py-0.5 rounded bg-slate-800/80 border border-slate-700 text-slate-300 max-w-[8rem] truncate inline-block">@
                                                                <%= u.id %>
                                                            </span>
                                                        </div>
                                                                                                                <% /* Références Plinkk */ %>
                                                                                                                <% if (Array.isArray(u.plinkks) && u.plinkks.length > 0) { 
                                                                                                                         const def = u.plinkks.find(p=>p.isDefault) || null;
                                                                                                                         const others = u.plinkks.filter(p=>!p.isDefault);
                                                                                                                %>
                                                                                                                    <div class="mt-1 flex flex-wrap items-center gap-1">
                                                                                                                        <% if (def) { %>
                                                                                                                            <a href="/<%= u.id %>" class="inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-[11px] bg-indigo-600/20 border border-indigo-500/40 text-indigo-300 hover:bg-indigo-600/30" title="Page par défaut">
                                                                                                                                <span>Par défaut</span>
                                                                                                                            </a>
                                                                                                                        <% } %>
                                                                                                                        <% others.forEach(p => { %>
                                                                                                                            <a href="/<%= u.id %>/<%= p.slug %>" class="inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-[11px] bg-slate-800/70 border border-slate-700 text-slate-200 hover:bg-slate-800" title="Plinkk: <%- p.name || p.slug %>">
                                                                                                                                <span><%- p.name || p.slug %></span>
                                                                                                                            </a>
                                                                                                                        <% }) %>
                                                                                                                    </div>
                                                                                                                <% } %>
                                                        <% const isEmailPublic=Boolean(u.publicEmail); %>
                                                            <% const publicEmail=u.publicEmail || u.email; %>
                                                                <% const canReveal=(user && (user.role==='ADMIN' ||
                                                                    user.role==='DEVELOPER' || user.role==='MODERATOR'
                                                                    )); %>
                                                                    <% if (isEmailPublic) { %>
                                                                        <span class="text-xs text-slate-400 truncate">
                                                                            <%= publicEmail %>
                                                                        </span>
                                                                        <% } else { %>
                                                                            <span
                                                                                class="emailContainer inline-flex items-center gap-2 text-xs">
                                                                                <span
                                                                                    class="text-xs text-slate-500 italic privateEmailLabel">Email
                                                                                    privé</span>
                                                                                <% if (canReveal) { %>
                                                                                    <span
                                                                                        class="privateEmailWrap ml-3 inline-flex items-center gap-2 text-xs">
                                                                                        <button type="button"
                                                                                            class="revealEmailBtn inline-flex items-center gap-2 px-2 py-0.5 rounded-md bg-indigo-600/85 hover:bg-indigo-500 text-white text-xs focus:outline-none focus:ring-2 focus:ring-indigo-400"
                                                                                            aria-label="Afficher l'email">
                                                                                            <svg xmlns="http://www.w3.org/2000/svg"
                                                                                                viewBox="0 0 24 24"
                                                                                                fill="none"
                                                                                                stroke="currentColor"
                                                                                                stroke-width="1.5"
                                                                                                class="h-3 w-3 text-white">
                                                                                                <path
                                                                                                    stroke-linecap="round"
                                                                                                    stroke-linejoin="round"
                                                                                                    d="M3 8.5v7A2.5 2.5 0 0 0 5.5 18h13A2.5 2.5 0 0 0 21 15.5v-7A2.5 2.5 0 0 0 18.5 6h-13A2.5 2.5 0 0 0 3 8.5z">
                                                                                                </path>
                                                                                                <path
                                                                                                    stroke-linecap="round"
                                                                                                    stroke-linejoin="round"
                                                                                                    d="M21 8.5l-9 5-9-5" />
                                                                                            </svg>
                                                                                            <span>Afficher</span>
                                                                                        </button>
                                                                                        <span class="emailValue hidden">
                                                                                            <%= u.email %>
                                                                                        </span>
                                                                                    </span>
                                                                                    <% } %>
                                                                            </span>
                                                                            <% } %>
                                                    </div>
                                                    <div class="ml-auto text-xs text-slate-400">
                                                        <%= u.role || 'USER' %>
                                                    </div>
                                                </div>

                                                <div class="actionsWrap absolute top-3 right-3 z-20">
                                                    <button type="button"
                                                        class="actionsBtn inline-flex items-center justify-center h-8 w-8 rounded-md border border-slate-700 bg-slate-800/70 text-slate-200 hover:bg-slate-800 hover:text-white transition-colors"
                                                        aria-haspopup="menu" aria-expanded="false" title="Actions">
                                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                                                            fill="currentColor" class="h-4 w-4">
                                                            <path
                                                                d="M12 6.75a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Zm0 6a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Zm0 6a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Z" />
                                                        </svg>
                                                    </button>
                                                    <div
                                                        class="actionsMenu hidden absolute right-0 z-999 mt-2 min-w-[12rem] rounded-md border border-slate-700 bg-slate-900/95 p-1 shadow-xl">
                                                        <a href="/<%= u.id %>"
                                                            class="menuItem flex items-center gap-2 w-full text-left px-3 py-1.5 rounded hover:bg-slate-800 text-xs text-slate-200">
                                                            <span>Voir le profil</span>
                                                        </a>
                                                        <button type="button"
                                                            class="menuItem copyBtn flex items-center gap-2 w-full text-left px-3 py-1.5 rounded hover:bg-slate-800 text-xs text-slate-200"
                                                            data-id="<%= u.id %>">
                                                            <span>Copier le lien</span>
                                                        </button>
                                                        <div
                                                            class="menuItem hasSubmenu relative group flex items-center gap-2 w-full text-left px-3 py-1.5 rounded hover:bg-slate-800 text-xs text-slate-200 cursor-default select-none">
                                                            <span>Rôles</span>
                                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                                                                fill="currentColor"
                                                                class="ml-auto h-3.5 w-3.5 opacity-80">
                                                                <path d="M9 5l7 7-7 7" />
                                                            </svg>
                                                            <div class="submenu hidden absolute top-0 left-full ml-1 z-50 w-40 rounded-md border border-slate-700 bg-slate-900/95 p-1"
                                                                data-side="right">
                                                                    <% /* Determine which role buttons should be disabled
                                                                        based on current user role */ %>
                                                                    <% const myRole = (user && user.role) ? String(user.role) : 'USER';
                                                                        const disableRoleBtn = (target) => {
                                                                            if (myRole === 'ADMIN') return false;
                                                                            if (myRole === 'DEVELOPER') return (target === 'ADMIN');
                                                                            // moderators and others cannot set equal or higher role
                                                                            const ranks = { USER: 0, MODERATOR: 1, DEVELOPER: 2, ADMIN: 3 };
                                                                            return ranks[target] >= ranks[myRole];
                                                                        };
                                                                        const renderRoleBtn = (r) => {
                                                                            const d = disableRoleBtn(r);
                                                                            const base = 'roleSet block w-full text-left px-3 py-1.5 rounded text-xs';
                                                                            const enabledClass = ' hover:bg-slate-800 text-slate-200';
                                                                            const disabledClass = ' opacity-60 cursor-not-allowed text-slate-500';
                                                                            const cls = base + (d ? disabledClass : enabledClass);
                                                                            const title = d ? 'Vous ne pouvez pas attribuer ce rôle' : '';
                                                                            return `<button class="${cls}" data-role="${r}" ${d ? 'disabled' : ''} title="${title}">${r}</button>`;
                                                                        };
                                                                    %>
                                                                        <%- renderRoleBtn('USER') %>
                                                                            <%- renderRoleBtn('MODERATOR') %>
                                                                                <%- renderRoleBtn('DEVELOPER') %>
                                                                                    <%- renderRoleBtn('ADMIN') %>
                                                            </div>
                                                        </div>
                                                        <div class="menuItem hasSubmenu relative group flex items-center gap-2 w-full text-left px-3 py-1.5 rounded hover:bg-slate-800 text-xs text-slate-200 cursor-default select-none">
                                                            <span>Plinkks</span>
                                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="ml-auto h-3.5 w-3.5 opacity-80">
                                                                <path d="M9 5l7 7-7 7" />
                                                            </svg>
                                                            <div class="submenu hidden absolute top-0 left-full ml-1 z-50 w-64 rounded-md border border-slate-700 bg-slate-900/95 p-1" data-side="right">
                                                                <% if (Array.isArray(u.plinkks) && u.plinkks.length > 0) {
                                                                    const def = u.plinkks.find(p=>p.isDefault) || null;
                                                                    const others = u.plinkks.filter(p=>!p.isDefault);
                                                                %>
                                                                    <% if (def) { %>
                                                                        <div class="menuItem hasSubmenu relative group block w-full text-left px-0 py-0 rounded text-xs hover:bg-transparent text-slate-200 cursor-default select-none">
                                                                            <div class="px-3 py-1.5 flex items-center gap-2">
                                                                                <span class="truncate">Par défaut — /<%= u.id %></span>
                                                                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="ml-auto h-3.5 w-3.5 opacity-80">
                                                                                    <path d="M9 5l7 7-7 7" />
                                                                                </svg>
                                                                            </div>
                                                                            <div class="submenu hidden absolute top-0 left-full ml-1 z-50 w-56 rounded-md border border-slate-700 bg-slate-900/95 p-1" data-side="right">
                                                                                <a href="/<%= def.slug ? def.slug : u.id %>" class="menuItem plinkk-link block w-full text-left px-3 py-1.5 rounded text-xs hover:bg-slate-800 text-slate-200">Voir le Plinkk — /<%= def.slug ? def.slug : u.id %></a>
                                                                                <div class="text-xs text-slate-400 px-3 py-1">Email du compte: <strong class="text-sm text-slate-200"><%= u.publicEmail || u.email || '—' %></strong></div>
                                                                            </div>
                                                                        </div>
                                                                    <% } %>
                                                                    <% others.forEach(p=>{ %>
                                                                        <div class="menuItem hasSubmenu relative group block w-full text-left px-0 py-0 rounded text-xs hover:bg-transparent text-slate-200 cursor-default select-none">
                                                                            <div class="px-3 py-1.5 flex items-center gap-2">
                                                                                <span class="truncate"><%- p.name || p.slug %> — /<%= p.slug ? p.slug : (u.id + '/' + (p.slug||'')) %></span>
                                                                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="ml-auto h-3.5 w-3.5 opacity-80">
                                                                                    <path d="M9 5l7 7-7 7" />
                                                                                </svg>
                                                                            </div>
                                                                            <div class="submenu hidden absolute top-0 left-full ml-1 z-50 w-56 rounded-md border border-slate-700 bg-slate-900/95 p-1" data-side="right">
                                                                                <a href="/<%= p.slug ? p.slug : (u.id + '/' + p.slug) %>" class="menuItem plinkk-link block w-full text-left px-3 py-1.5 rounded text-xs hover:bg-slate-800 text-slate-200">Voir le Plinkk — /<%= p.slug ? p.slug : (u.id + '/' + p.slug) %></a>
                                                                                <button type="button" data-plinkk-id="<%= p.id %>" class="menuItem plinkkMakePublic block w-full text-left px-3 py-1.5 rounded text-xs hover:bg-slate-800 text-slate-200">Rendre public</button>
                                                                                <button type="button" data-plinkk-id="<%= p.id %>" class="menuItem plinkkMakePrivate block w-full text-left px-3 py-1.5 rounded text-xs hover:bg-slate-800 text-slate-200">Rendre privé</button>
                                                                            </div>
                                                                        </div>
                                                                    <% }) %>
                                                                <% } else { %>
                                                                    <div class="text-xs text-slate-500 px-3 py-1">Aucun Plinkk</div>
                                                                <% } %>
                                                            </div>
                                                        </div>
                                                        <button type="button"
                                                            class="menuItem disable2faBtn flex items-center gap-2 w-full text-left px-3 py-1.5 rounded hover:bg-amber-900/30 text-xs text-<%= (u.twoFactorEnabled || (u.twoFactorSecret && u.twoFactorSecret !== '')) ? 'amber-300' : 'slate-500 cursor-not-allowed opacity-60' %>"
                                                            data-id="<%= u.id %>" <%=(u.twoFactorEnabled ||
                                                            (u.twoFactorSecret && u.twoFactorSecret !=='' )) ? ''
                                                            : 'disabled' %>>
                                                            <span>Désactiver la A2F</span>
                                                        </button>
                                                        <div class="menuItem hasSubmenu relative group flex items-center gap-2 w-full text-left px-3 py-1.5 rounded hover:bg-slate-800 text-xs text-slate-200 cursor-default select-none">
                                                            <span>Visibilité</span>
                                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="ml-auto h-3.5 w-3.5 opacity-80">
                                                                <path d="M9 5l7 7-7 7" />
                                                            </svg>
                                                            <% const _isPublic = Boolean(u.isPublic); const _emailPublic = Boolean(u.publicEmail); %>
                                                            <div class="submenu hidden absolute top-0 left-full ml-1 z-50 w-44 rounded-md border border-slate-700 bg-slate-900/95 p-1" data-side="right">
                                                                <button class="menuItem visibilityToggle block w-full text-left px-3 py-1.5 rounded text-xs hover:bg-slate-800 text-slate-200">
                                                                    <%= _isPublic ? 'Rendre privé' : 'Rendre public' %>
                                                                </button>
                                                                <button class="menuItem emailVisibilityToggle block w-full text-left px-3 py-1.5 rounded text-xs hover:bg-slate-800 text-slate-200">
                                                                    <%= _emailPublic ? "Rendre l'email privé" : "Rendre l'email public" %>
                                                                </button>
                                                            </div>
                                                        </div>
                                                        <div class="my-1 border-t border-slate-700/70"></div>
                                                        <button type="button"
                                                            class="menuItem deleteBtn flex items-center gap-2 w-full text-left px-3 py-1.5 rounded hover:bg-red-900/30 text-xs text-red-300"
                                                            data-id="<%= u.id %>" data-name="<%= u.userName %>">
                                                            <span>Supprimer</span>
                                                        </button>
                                                    </div>
                                                </div>
                                            </li>
                                            <% }) %>
                                    </ul>
                                    <% } %>
                        </section>

                        <!-- Pending themes (1/3) -->
                        <aside class="rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
                            <div class="flex items-center justify-between mb-2">
                                <h2 class="font-medium">Thèmes en attente</h2>
                                <a href="/dashboard/admin/themes"
                                    class="text-xs px-2 py-1 rounded bg-slate-800 border border-slate-700 text-white">Voir
                                    tout</a>
                            </div>
                            <% if (typeof pendingThemes==='undefined' || !pendingThemes || pendingThemes.length===0) {
                                %>
                                <p class="text-sm text-slate-400">Aucun thème en attente.</p>
                                <% } else { %>
                                    <ul class="space-y-2">
                                        <% pendingThemes.forEach(t=> { %>
                                            <li
                                                class="rounded border border-slate-800 p-2 flex items-center gap-2 bg-slate-900 text-sm">
                                                <div class="w-12 h-12 rounded overflow-hidden previewMini"></div>
                                                <div class="min-w-0 flex-1">
                                                    <div class="font-semibold truncate">
                                                        <%= t.name %>
                                                    </div>
                                                    <div class="text-xs text-slate-400 truncate">
                                                        <%= t.description || '' %>
                                                    </div>
                                                    <div class="text-[11px] text-slate-500 mt-1">Par @<%= t.authorId %>
                                                    </div>
                                                </div>
                                                <div class="flex flex-col gap-2">
                                                    <a class="px-2 py-1 rounded bg-indigo-600 text-white text-xs"
                                                        href="/dashboard/admin/themes/validate/<%= t.id %>">Valider</a>
                                                    <a class="px-2 py-1 rounded bg-slate-800 border border-slate-700 text-white text-xs"
                                                        href="/dashboard/admin/themes/<%= t.id %>">Détails</a>
                                                </div>
                                            </li>
                                            <% }) %>
                                    </ul>
                                    <% } %>
                        </aside>
                    </div>

                                        
                                                        <!-- Modal preview réutilisable (admin) -->
                                                        <div id="plinkkPreviewModalAdmin" class="fixed inset-0 hidden z-50 items-center justify-center">
                                                            <div class="absolute inset-0 bg-black/60" data-close></div>
                                                            <div class="relative w-full max-w-4xl h-[80vh] bg-slate-900 border border-slate-700 rounded-lg overflow-hidden">
                                                                <div class="flex items-center justify-between p-2 border-b border-slate-800 bg-slate-900/95">
                                                                    <div id="plinkkPreviewTitleAdmin" class="text-sm text-white font-semibold">Prévisualisation</div>
                                                                    <button id="closePlinkkPreviewAdmin" class="px-3 py-1 rounded bg-slate-800 text-xs">Fermer</button>
                                                                </div>
                                                                <iframe id="plinkkPreviewFrameAdmin" src="about:blank" class="w-full h-full bg-white"></iframe>
                                                            </div>
                                                        </div>
                                                        <script>
                                                            (function(){
                                                                const modal = document.getElementById('plinkkPreviewModalAdmin');
                                                                const frame = document.getElementById('plinkkPreviewFrameAdmin');
                                                                const title = document.getElementById('plinkkPreviewTitleAdmin');
                                                                const closeBtn = document.getElementById('closePlinkkPreviewAdmin');
                                                                function openModal(url,label){ const sep = url.includes('?') ? '&' : '?'; frame.src = url+sep+'preview=1'; title.textContent = label||'Prévisualisation'; modal.classList.remove('hidden'); modal.classList.add('flex'); document.body.style.overflow='hidden'; }
                                                                function closeModal(){ frame.src='about:blank'; modal.classList.add('hidden'); modal.classList.remove('flex'); document.body.style.overflow=''; }
                                                                closeBtn?.addEventListener('click', closeModal); modal?.querySelector('[data-close]')?.addEventListener('click', closeModal);
                                                                document.addEventListener('click', (ev)=>{ const a = ev.target.closest && ev.target.closest('a.plinkk-link'); if (!a) return; ev.preventDefault(); const href=a.getAttribute('href')||''; const label = a.textContent && a.textContent.trim() ? a.textContent.trim() : href; openModal(href,label); });
                                                                document.addEventListener('keydown',(e)=>{ if(e.key==='Escape' && !modal.classList.contains('hidden')) closeModal(); });
                                                            })();
                                                        </script>

                </main>

                <script>
                    (function () {
                        const $ = (s, r = document) => r.querySelector(s);
                        const $$ = (s, r = document) => Array.from(r.querySelectorAll(s));
                        const search = $('#searchInput');
                        const sort = $('#sortSelect');
                        const roleFilter = $('#roleFilter');
                        const visFilter = $('#visibilityFilter');
                        const grid = $('#usersGrid');
                        const resetBtn = $('#resetBtn');

                        function applyFilter() {
                            if (!grid) return;
                            const q = (search?.value || '').trim().toLowerCase();
                            const rf = (roleFilter?.value || 'all');
                            const vf = (visFilter?.value || 'all');
                            const items = Array.from(grid.children);
                            let visible = 0;
                            items.forEach(li => {
                                const hay = (li.dataset.search || '');
                                const role = li.dataset.role || 'USER';
                                const vis = li.dataset.visible || 'private';
                                const okQ = !q || hay.includes(q);
                                const okR = rf === 'all' || role === rf;
                                const okV = vf === 'all' || vis === vf;
                                const show = okQ && okR && okV;
                                li.style.display = show ? '' : 'none';
                                if (show) visible++;
                            });
                            const totalCount = document.getElementById('totalCount'); if (totalCount) totalCount.textContent = String(visible);
                        }
                        function applySort() {
                            if (!grid) return;
                            const val = sort?.value || 'date-desc';
                            const arr = Array.from(grid.children);
                            arr.sort((a, b) => {
                                if (val === 'name-asc') return a.dataset.name.localeCompare(b.dataset.name, 'fr');
                                if (val === 'name-desc') return b.dataset.name.localeCompare(a.dataset.name, 'fr');
                                if (val === 'date-asc') return Number(a.dataset.created) - Number(b.dataset.created);
                                return Number(b.dataset.created) - Number(a.dataset.created);
                            });
                            arr.forEach(n => grid.appendChild(n));
                        }

                        [search, roleFilter, visFilter].forEach(el => el?.addEventListener('input', applyFilter));
                        sort?.addEventListener('change', () => { applySort(); applyFilter(); });
                        resetBtn?.addEventListener('click', () => { if (search) search.value = ''; if (sort) sort.value = 'date-desc'; if (roleFilter) roleFilter.value = 'all'; if (visFilter) visFilter.value = 'all'; applySort(); applyFilter(); });

                        // render mini previews for pending themes
                        (function renderPendingPreviews() {
                            document.querySelectorAll('aside .previewMini').forEach(el => {
                                const li = el.closest('li');
                                // try to read data-json if available
                                const raw = li?.getAttribute('data-json') || '';
                                let parsed = {};
                                try { parsed = raw ? JSON.parse(raw) : {}; } catch (e) { }
                                let c = { bg: '#111827', button: '#4f46e5', hover: '#22c55e' };
                                if (parsed.light) c = { bg: parsed.light.bg || c.bg, button: parsed.light.button || c.button, hover: parsed.light.hover || c.hover };
                                el.innerHTML = `<div style="width:100%;height:100%;background:${c.bg};display:flex;flex-direction:column;justify-content:center;gap:6px;padding:6px">` +
                                    `<div style="height:28px;background:${c.button};border-radius:6px;width:70%"></div>` +
                                    `<div style="height:20px;background:${c.hover};border-radius:6px;width:50%"></div>` +
                                    `</div>`;
                            });
                        })();
                    })();
                </script>

                </body>

                <script src="/public/js/pagination.js"></script>
                <script>
                    (function () {
                        const $ = (s, r = document) => r.querySelector(s);
                        const $$ = (s, r = document) => Array.from(r.querySelectorAll(s));
                        const search = $('#searchInput');
                        const sort = $('#sortSelect');
                        const roleFilter = $('#roleFilter');
                        const visFilter = $('#visibilityFilter');
                        const grid = $('#usersGrid');
                        const totalCount = $('#totalCount');
                        const visibleCount = $('#visibleCount');
                        const resetBtn = $('#resetBtn');

                        if (!grid || !window.__PlinkkPaginator) return;

                        const paginator = window.__PlinkkPaginator.createPaginator(grid, {
                            pageSize: 21, selectors: { items: 'li' }, onRender: (pageItems, meta) => {
                                // mettre à jour visibleCount (nombre total match)
                                if (visibleCount) visibleCount.textContent = String(meta.totalItems);
                            }
                        });

                        // initial total count
                        if (totalCount) totalCount.textContent = String(paginator.getAll().length);

                        function applyFilter() {
                            const q = (search?.value || '').trim().toLowerCase();
                            const rf = (roleFilter?.value || 'all');
                            const vf = (visFilter?.value || 'all');
                            const all = paginator.getAll();
                            const filtered = all.filter(li => {
                                const hay = (li.dataset.search || '').toString();
                                const role = (li.dataset.role || 'USER');
                                const vis = (li.dataset.visible || 'private');
                                const okQ = !q || hay.includes(q);
                                const okR = rf === 'all' || role === rf;
                                const okV = vf === 'all' || vis === vf;
                                return okQ && okR && okV;
                            });
                            paginator.setFiltered(filtered);
                        }

                        function applySort() {
                            const val = sort?.value;
                            const collator = new Intl.Collator('fr', { sensitivity: 'base' });
                            const getKey = (li, key) => (li.dataset[key] || '').toString();
                            paginator.sort((a, b) => {
                                switch (val) {
                                    case 'date-desc': return (Number(getKey(b, 'created')) - Number(getKey(a, 'created')));
                                    case 'date-asc': return (Number(getKey(a, 'created')) - Number(getKey(b, 'created')));
                                    case 'name-asc': return collator.compare(getKey(a, 'name'), getKey(b, 'name'));
                                    case 'name-desc': return collator.compare(getKey(b, 'name'), getKey(a, 'name'));
                                    case 'id-asc': return collator.compare(getKey(a, 'id'), getKey(b, 'id'));
                                    case 'id-desc': return collator.compare(getKey(b, 'id'), getKey(a, 'id'));
                                    default: return 0;
                                }
                            });
                        }

                        search?.addEventListener('input', () => applyFilter());
                        sort?.addEventListener('change', () => applySort());
                        roleFilter?.addEventListener('change', () => applyFilter());
                        visFilter?.addEventListener('change', () => applyFilter());
                        resetBtn?.addEventListener('click', () => {
                            if (search) search.value = '';
                            if (sort) sort.value = 'date-desc';
                            if (roleFilter) roleFilter.value = 'all';
                            if (visFilter) visFilter.value = 'all';
                            applySort();
                            applyFilter();
                        });

                        // Styles additionnels pour menus
                        const styleMenu = document.createElement('style');
                        styleMenu.textContent = `
.actionsWrap { display: inline-block; }
.actionsMenu { backdrop-filter: blur(4px); z-index: 9999 !important; }
.actionsMenu .menuItem { line-height: 1; }
.submenu { min-width: 9rem; z-index: 10000 !important; }
.submenu.open { display: block; }
`;
                        document.head.appendChild(styleMenu);

                        // Copier le lien (grid handler ignores menu items now)
                        grid.addEventListener('click', (e) => {
                            // let document-level handler process menu actions
                            if (e.target.closest('.actionsMenu') || e.target.closest('.copyBtn') || e.target.closest('.actionsBtn') || e.target.closest('.roleSet') || e.target.closest('.deleteBtn') || e.target.closest('.disable2faBtn') || e.target.closest('.revealEmailBtn')) return;
                            const btn = e.target.closest('.copyBtn');
                            if (btn) {
                                const url = (window.location && window.location.origin ? window.location.origin : '') + '/' + btn.dataset.id;
                                navigator.clipboard?.writeText(url).then(() => {
                                    showToast('Profile copié');
                                }).catch(() => { showToast('Copie échouée'); });
                            }
                        });

                        // Animation des boutons copier
                        const style = document.createElement('style');
                        style.textContent = `
.copy-anim { position: relative; }
.copy-anim::after {
content: 'Copié !';
position: absolute; left: 50%; top: -10px; transform: translate(-50%, -100%);
background: rgba(16,185,129,.95); color: #fff; font-size: 10px; border-radius: 6px; padding: 4px 6px;
opacity: 0; pointer-events: none; transition: opacity .25s ease, transform .25s ease;
box-shadow: 0 8px 24px rgba(16,185,129,.35);
}
.copy-anim.copied::after { opacity: 1; transform: translate(-50%, -120%); }
.copy-anim.copied { box-shadow: 0 0 0 1px rgba(16,185,129,.35) inset; }
`;
                        document.head.appendChild(style);

                        // Toast notification styles
                        const toastStyle = document.createElement('style');
                        toastStyle.textContent = `
 .plinkk-toast-container { position: fixed; top: 1rem; right: 1rem; z-index: 2147483200; display:flex; flex-direction:column; gap:8px; }
 .plinkk-toast { background: rgba(17,24,39,0.95); color: #fff; padding: 8px 12px; border-radius: 8px; box-shadow: 0 8px 24px rgba(2,6,23,.6); font-size: 13px; opacity:0; transform: translateY(-6px); transition: opacity .18s ease, transform .18s ease; }
 .plinkk-toast.show { opacity:1; transform: translateY(0); }
 `;
                        document.head.appendChild(toastStyle);

                        // Ensure toast container exists
                        function getToastContainer() {
                            let c = document.querySelector('.plinkk-toast-container');
                            if (!c) { c = document.createElement('div'); c.className = 'plinkk-toast-container'; document.body.appendChild(c); }
                            return c;
                        }

                        function showToast(message, ms = 2000) {
                            try {
                                const c = getToastContainer();
                                const t = document.createElement('div');
                                t.className = 'plinkk-toast';
                                t.textContent = message;
                                c.appendChild(t);
                                // force reflow then show
                                void t.offsetWidth;
                                t.classList.add('show');
                                setTimeout(() => { t.classList.remove('show'); setTimeout(() => t.remove(), 180); }, ms);
                            } catch (e) { /* ignore */ }
                        }

                        // Confirm with typed input helper (used by delete flows)
                        function confirmWithInput(displayName, userId) {
                            return new Promise(resolve => {
                                const overlay = document.createElement('div');
                                overlay.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black/50';
                                overlay.innerHTML = `
        <div class="w-full max-w-md mx-4 bg-slate-900 border border-slate-700 rounded-md p-4 text-sm">
            <div class="mb-3">Pour confirmer la suppression du compte "<strong>${displayName}</strong>" (@${userId}), tapez <strong>${userId}</strong> ci‑dessous :</div>
            <input type="text" class="w-full mb-3 px-3 py-2 rounded bg-slate-800 border border-slate-700 text-sm" aria-label="Confirmation input" />
            <div class="flex justify-end gap-2">
            <button class="cancel px-3 py-1.5 rounded-md bg-slate-700 text-sm">Annuler</button>
            <button class="ok px-3 py-1.5 rounded-md bg-red-600 text-white text-sm">Supprimer</button>
            </div>
        </div>`;
                                const input = overlay.querySelector('input');
                                const btnOk = overlay.querySelector('.ok');
                                const btnCancel = overlay.querySelector('.cancel');

                                document.body.appendChild(overlay);
                                input.focus();

                                function onKey(ev){
                                    if (ev.key === 'Enter') { ev.preventDefault(); btnOk.click(); }
                                    if (ev.key === 'Escape') { ev.preventDefault(); btnCancel.click(); }
                                    if (ev.key === 'Echap') { ev.preventDefault(); btnCancel.click(); }
                                }

                                const cleanup = (res) => {
                                    document.removeEventListener('keydown', onKey);
                                    overlay.remove();
                                    resolve(res);
                                };

                                btnCancel.addEventListener('click', () => cleanup(false));
                                overlay.addEventListener('click', (ev) => { if (ev.target === overlay) cleanup(false); });
                                btnOk.addEventListener('click', () => cleanup((input.value || '').trim() === String(userId)));
                                input.addEventListener('keydown', (ev) => {
                                    // keep behavior local too; it will trigger onKey as well
                                    if (ev.key === 'Enter') { ev.preventDefault(); btnOk.click(); }
                                    if (ev.key === 'Escape') { ev.preventDefault(); btnCancel.click(); }
                                });
                                // attach document-level key handler for Enter/Escape
                                document.addEventListener('keydown', onKey);
                            });
                        }

                        grid.addEventListener('click', (e) => {
                            if (e.target.closest('.actionsMenu') || e.target.closest('.copyBtn') || e.target.closest('.actionsBtn') || e.target.closest('.roleSet') || e.target.closest('.deleteBtn') || e.target.closest('.disable2faBtn') || e.target.closest('.revealEmailBtn')) return;
                            const btn = e.target.closest('.copyBtn');
                            if (btn) {
                                btn.classList.add('copy-anim');
                                setTimeout(() => btn.classList.add('copied'), 10);
                                setTimeout(() => btn.classList.remove('copied'), 1000);
                            }
                        });

                        // Menus d'actions et sous-menu Rôles
                        function closeAllMenus(except) {
                            $$('.actionsMenu').forEach(m => {
                                if (!except || m !== except) {
                                    // Fermer d'abord tous les sous-menus ouverts
                                    m.querySelectorAll('.submenu.open').forEach(sub => {
                                        sub.classList.remove('open');
                                        sub.classList.add('hidden');
                                    });
                                    // Puis fermer le menu d'actions
                                    m.classList.add('hidden');
                                    // remove any inline positioning applied when opened
                                    m.style.position = '';
                                    m.style.top = '';
                                    m.style.left = '';
                                    m.style.right = '';
                                    m.style.zIndex = '';
                                    // reset pointer-events if changed
                                    m.style.pointerEvents = '';
                                    // attempt to find the corresponding button and update aria
                                    const btn = (m._origParent && m._origParent.querySelector) ? m._origParent.querySelector('.actionsBtn') : m.closest('.actionsWrap')?.querySelector('.actionsBtn');
                                    if (btn) btn.setAttribute('aria-expanded', 'false');
                                    // if the menu was moved to document.body, restore it into its original parent
                                    if (m._origParent) {
                                        try {
                                            if (m._origNext && m._origNext.parentNode === m._origParent) {
                                                m._origParent.insertBefore(m, m._origNext);
                                            } else {
                                                m._origParent.appendChild(m);
                                            }
                                        } catch (e) {
                                            // ignore restore errors
                                        }
                                        delete m._origParent;
                                        delete m._origNext;
                                    }
                                }
                            });
                        }
                        grid.addEventListener('click', (e) => {
                            // ignore if click is inside menu: document handler will handle
                            if (e.target.closest('.actionsMenu')) return;
                            const btn = e.target.closest('.actionsBtn');
                            if (btn) {
                                const wrap = btn.closest('.actionsWrap');
                                const menu = wrap.querySelector('.actionsMenu');
                                const isHidden = menu.classList.contains('hidden');
                                closeAllMenus(menu);
                                if (!isHidden) {
                                    // On ferme d'abord les sous-menus ouverts du menu courant
                                    menu.querySelectorAll('.submenu.open').forEach(sub => {
                                        sub.classList.remove('open');
                                        sub.classList.add('hidden');
                                    });
                                }
                                menu.classList.toggle('hidden', !isHidden);
                                btn.setAttribute('aria-expanded', String(!isHidden));
                                // If we just opened the menu, move it to document.body and position it fixed to escape stacking contexts
                                if (isHidden) {
                                    // store original parent so we can restore later
                                    try {
                                        menu._origParent = wrap;
                                        menu._origNext = menu.nextSibling;
                                        // move menu to body so it is outside any stacking context
                                        document.body.appendChild(menu);
                                    } catch (e) { /* ignore */ }
                                    // ensure visible for measurements
                                    menu.style.position = 'fixed';
                                    menu.style.zIndex = '2147483000';
                                    menu.style.pointerEvents = 'auto';
                                    // compute coords: align menu's right edge with button's right edge and place below button
                                    const btnRect = btn.getBoundingClientRect();
                                    // allow the menu to layout first
                                    const menuRect = menu.getBoundingClientRect();
                                    let left = btnRect.right - menuRect.width;
                                    if (left < 8) left = 8; // small margin
                                    let top = btnRect.bottom + 6;
                                    // if bottom would overflow, place above
                                    if (top + menuRect.height > window.innerHeight - 8) {
                                        top = btnRect.top - menuRect.height - 6;
                                    }
                                    menu.style.left = left + 'px';
                                    menu.style.top = top + 'px';
                                    menu.style.right = 'auto';
                                } else {
                                    // closed -> reset inline styles and restore to original parent if moved
                                    menu.style.position = '';
                                    menu.style.top = '';
                                    menu.style.left = '';
                                    menu.style.right = '';
                                    menu.style.zIndex = '';
                                    menu.style.pointerEvents = '';
                                    if (menu._origParent) {
                                        try {
                                            if (menu._origNext && menu._origNext.parentNode === menu._origParent) {
                                                menu._origParent.insertBefore(menu, menu._origNext);
                                            } else {
                                                menu._origParent.appendChild(menu);
                                            }
                                        } catch (e) { /* ignore */ }
                                        delete menu._origParent;
                                        delete menu._origNext;
                                    }
                                }
                                // Ajuster la position du sous-menu (droite/gauche) quand on ouvre
                                requestAnimationFrame(() => {
                                    wrap.querySelectorAll('.submenu').forEach((sub) => {
                                        const rect = sub.getBoundingClientRect();
                                        const overflowRight = rect.right > window.innerWidth - 8; // marge
                                        if (overflowRight) {
                                            sub.style.left = 'auto';
                                            sub.style.right = '100%';
                                            sub.style.marginLeft = '0';
                                            sub.style.marginRight = '0.25rem';
                                            sub.dataset.side = 'left';
                                        } else {
                                            sub.style.left = '100%';
                                            sub.style.right = 'auto';
                                            sub.style.marginLeft = '0.25rem';
                                            sub.style.marginRight = '0';
                                            sub.dataset.side = 'right';
                                        }
                                    });
                                });
                            }
                        });
                        document.addEventListener('click', (ev) => {
                            // If click happens inside an actionsMenu (which may have been moved to body), don't close
                            if (ev.target.closest('.actionsMenu')) return;
                            if (!ev.target.closest('.actionsWrap')) closeAllMenus();
                        });
                        document.addEventListener('keydown', (ev) => {
                            if (ev.key === 'Escape') closeAllMenus();
                        });

                        // Toggle du sous-menu Rôles au clic — document-level so it works when menu is moved to body
                        document.addEventListener('click', (e) => {
                            // avoid handling clicks inside the submenu itself
                            if (e.target.closest('.submenu')) return;
                            const host = e.target.closest('.hasSubmenu');
                            if (!host) return;
                            const sub = host.querySelector('.submenu');
                            if (!sub) return;
                            // Prevent closing the parent menu when toggling submenu
                            // (do not stop propagation so submenu item clicks still reach the global handler)
                            // Toggle only this submenu (close others in same actionsMenu)
                            const parentMenu = host.closest('.actionsMenu');
                            parentMenu?.querySelectorAll('.submenu.open')?.forEach(el => { if (el !== sub) { el.classList.remove('open'); el.classList.add('hidden'); } });
                            const willOpen = !sub.classList.contains('open');
                            sub.classList.toggle('open', willOpen);
                            sub.classList.toggle('hidden', !willOpen);
                            // Reposition when opening
                            if (willOpen) {
                                requestAnimationFrame(() => {
                                    const rect = sub.getBoundingClientRect();
                                    const overflowRight = rect.right > window.innerWidth - 8;
                                    if (overflowRight) {
                                        sub.style.left = 'auto';
                                        sub.style.right = '100%';
                                        sub.style.marginLeft = '0';
                                        sub.style.marginRight = '0.25rem';
                                        sub.dataset.side = 'left';
                                    } else {
                                        sub.style.left = '100%';
                                        sub.style.right = 'auto';
                                        sub.style.marginLeft = '0.25rem';
                                        sub.style.marginRight = '0';
                                        sub.dataset.side = 'right';
                                    }
                                });
                            }
                        });

                        // Changer rôle via éléments du sous-menu — handled by document-level handler above

                        // Repositionner le sous-menu au survol pour éviter le dépassement
                        grid.addEventListener('mouseover', (e) => {
                            const host = e.target.closest('.hasSubmenu');
                            if (!host) return;
                            const sub = host.querySelector('.submenu');
                            if (!sub) return;
                            requestAnimationFrame(() => {
                                const rect = sub.getBoundingClientRect();
                                const overflowRight = rect.right > window.innerWidth - 8;
                                if (overflowRight) {
                                    sub.style.left = 'auto';
                                    sub.style.right = '100%';
                                    sub.style.marginLeft = '0';
                                    sub.style.marginRight = '0.25rem';
                                    sub.dataset.side = 'left';
                                } else {
                                    sub.style.left = '100%';
                                    sub.style.right = 'auto';
                                    sub.style.marginLeft = '0.25rem';
                                    sub.style.marginRight = '0';
                                    sub.dataset.side = 'right';
                                }
                            });
                        });

                        // Supprimer un utilisateur (admin)
                        grid.addEventListener('click', async (e) => {
                            const btn = e.target.closest('.deleteBtn');
                            if (!btn) return;
                            const id = btn.dataset.id;
                            const name = btn.dataset.name || id;
                            // use global confirmWithInput helper defined above

                            const ok = await confirmWithInput(name, id);
                            if (!ok) return;
                            btn.disabled = true; btn.textContent = 'Suppression...';
                            try {
                                const res = await fetch(`/api/users/${encodeURIComponent(id)}`, { method: 'DELETE' });
                                if (!res.ok) throw new Error('HTTP ' + res.status);
                                let li = btn.closest('li');
                                if (!li && btn.dataset.id) li = document.querySelector(`#usersGrid li[data-id="${btn.dataset.id}"]`);
                                if (li) li.remove();
                                // refresh paginator source & counts
                                paginator.setFiltered(paginator.getAll());
                                if (totalCount) totalCount.textContent = String(paginator.getAll().length);
                            } catch (err) {
                                console.error(err);
                                alert('Impossible de supprimer cet utilisateur.');
                            } finally {
                                btn.disabled = false; btn.textContent = 'Supprimer';
                            }
                        });

                        // Désactiver la 2FA d'un utilisateur (admin)
                        grid.addEventListener('click', async (e) => {
                            const btn = e.target.closest('.disable2faBtn');
                            if (!btn) return;
                            if (btn.disabled) return;
                            const id = btn.dataset.id;
                            const confirm = window.confirm("Désactiver la 2FA pour @" + id + " ?\nL'utilisateur devra la reconfigurer pour la réactiver.");
                            if (!confirm) return;
                            btn.disabled = true; const prev = btn.textContent; btn.textContent = 'Désactivation...';
                            try {
                                const res = await fetch(`/api/users/${encodeURIComponent(id)}/2fa/disable`, { method: 'POST' });
                                if (!res.ok) throw new Error('HTTP ' + res.status);
                                // Retirer l'état actif visuel et désactiver le bouton
                                btn.textContent = 'A2F désactivée';
                                btn.classList.add('opacity-60', 'cursor-not-allowed', 'text-slate-500');
                            } catch (err) {
                                console.error(err);
                                // Show inline error message near the button instead of an alert
                                try {
                                    const msg = 'Erreur : impossible de désactiver la 2FA';
                                    // insert or reuse an inline error element right after the button
                                    let errEl = btn.parentElement.querySelector('.twofaError');
                                    if (!errEl) {
                                        errEl = document.createElement('div');
                                        errEl.className = 'twofaError text-xs text-rose-400 mt-2';
                                        btn.insertAdjacentElement('afterend', errEl);
                                    }
                                    errEl.textContent = msg;
                                    // auto-remove after 5s
                                    setTimeout(() => { try { errEl.remove(); } catch (e) { } }, 5000);
                                } catch (e) {
                                    console.error('failed to show inline 2FA error', e);
                                }
                                btn.textContent = prev; btn.disabled = false;
                            } finally {
                                // fermer le menu
                                closeAllMenus();
                            }
                        });

                        // Reveal / hide private email for admins (toggle)
                        grid.addEventListener('click', (e) => {
                            const btn = e.target.closest('.revealEmailBtn');
                            if (!btn) return;
                            const container = btn.closest('.emailContainer');
                            if (!container) return;
                            const wrap = container.querySelector('.privateEmailWrap');
                            if (!wrap) return;
                            const emailEl = wrap.querySelector('.emailValue');
                            if (!emailEl) return;
                            const email = emailEl.textContent || '';
                            // if email currently hidden, show it with Copy and Hide buttons
                            if (!container.classList.contains('revealed')) {
                                container.classList.add('revealed');
                                // replace only the inner content of the container to avoid layout shift
                                container.innerHTML = `<span class="text-xs text-slate-400 truncate emailShown">${email}</span>
            <div class="inline-flex items-center gap-2 ml-2">
                <button class="copySmall px-2 py-0.5 text-xs rounded-md bg-emerald-600 text-white hover:bg-emerald-500">Copier</button>
                <button class="hideEmailBtn px-2 py-0.5 text-xs rounded-md bg-slate-700 text-white hover:bg-slate-600">Cacher</button>
            </div>`;
                                const copyBtn = container.querySelector('.copySmall');
                                copyBtn?.addEventListener('click', () => {
                                    navigator.clipboard?.writeText(email).then(() => {
                                        copyBtn.textContent = 'Copié !';
                                        setTimeout(() => copyBtn.textContent = 'Copier', 1000);
                                    }).catch(() => { });
                                });
                                const hideBtn = container.querySelector('.hideEmailBtn');
                                hideBtn?.addEventListener('click', () => {
                                    // restore to initial state (Email privé + reveal button) with new markup
                                    container.classList.remove('revealed');
                                    container.innerHTML = `<span class="text-xs text-slate-500 italic privateEmailLabel">Email privé</span>` +
                                        `<span class="privateEmailWrap ml-3 inline-flex items-center gap-2 text-xs">` +
                                        `<button type="button" class="revealEmailBtn inline-flex items-center gap-2 px-2 py-0.5 rounded-md bg-indigo-600/85 hover:bg-indigo-500 text-white text-xs focus:outline-none focus:ring-2 focus:ring-indigo-400" aria-label="Afficher l'email">` +
                                        `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" class="h-3 w-3 text-white"><path stroke-linecap="round" stroke-linejoin="round" d="M3 8.5v7A2.5 2.5 0 0 0 5.5 18h13A2.5 2.5 0 0 0 21 15.5v-7A2.5 2.5 0 0 0 18.5 6h-13A2.5 2.5 0 0 0 3 8.5z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M21 8.5l-9 5-9-5"/></svg>` +
                                        `<span>Afficher</span></button>` +
                                        `<span class="emailValue hidden">${email}</span>` +
                                        `</span>`;
                                });
                            }
                        });

                        // Init
                        if (sort) sort.value = 'date-desc';
                        applySort();
                        applyFilter();

                        // shortcut
                        document.addEventListener('keydown', (ev) => {
                            const isMac = /Mac|iPod|iPhone|iPad/.test(navigator.platform);
                            const meta = isMac ? ev.metaKey : ev.ctrlKey;
                            if (meta && ev.key.toLowerCase() === 'k') { ev.preventDefault(); search?.focus(); }
                        });

                        // Document-level handler for menu actions (works even if menu is moved to document.body)
                        document.addEventListener('click', async (ev) => {
                            // if user clicked the submenu host (hasSubmenu) but NOT inside the submenu, let the submenu toggle logic handle it and do not auto-close
                            if (ev.target.closest('.hasSubmenu') && !ev.target.closest('.submenu')) return;
                            const menuItem = ev.target.closest('.menuItem, .copyBtn, .roleSet, .deleteBtn, .disable2faBtn, .revealEmailBtn');
                            if (!menuItem) return;
                            // prevent grid-level handlers from also acting
                            ev.stopPropagation();

                            // Reveal email handled specially (inside emailContainer)
                            if (menuItem.classList.contains('revealEmailBtn')) {
                                const btn = menuItem;
                                const container = btn.closest('.emailContainer');
                                if (!container) return;
                                const wrap = container.querySelector('.privateEmailWrap');
                                if (!wrap) return;
                                const emailEl = wrap.querySelector('.emailValue');
                                if (!emailEl) return;
                                const email = emailEl.textContent || '';
                                if (!container.classList.contains('revealed')) {
                                    container.classList.add('revealed');
                                    container.innerHTML = `<span class="text-xs text-slate-400 truncate emailShown">${email}</span>
            <div class="inline-flex items-center gap-2 ml-2">
                <button class="copySmall px-2 py-0.5 text-xs rounded-md bg-emerald-600 text-white hover:bg-emerald-500">Copier</button>
                <button class="hideEmailBtn px-2 py-0.5 text-xs rounded-md bg-slate-700 text-white hover:bg-slate-600">Cacher</button>
            </div>`;
                                    const copyBtn = container.querySelector('.copySmall');
                                    copyBtn?.addEventListener('click', () => {
                                        navigator.clipboard?.writeText(email).then(() => {
                                            copyBtn.textContent = 'Copié !';
                                            setTimeout(() => copyBtn.textContent = 'Copier', 1000);
                                        }).catch(() => { });
                                    });
                                    const hideBtn = container.querySelector('.hideEmailBtn');
                                    hideBtn?.addEventListener('click', () => {
                                        container.classList.remove('revealed');
                                        container.innerHTML = `<span class="text-xs text-slate-500 italic privateEmailLabel">Email privé</span>` +
                                            `<span class="privateEmailWrap ml-3 inline-flex items-center gap-2 text-xs">` +
                                            `<button type="button" class="revealEmailBtn inline-flex items-center gap-2 px-2 py-0.5 rounded-md bg-indigo-600/85 hover:bg-indigo-500 text-white text-xs focus:outline-none focus:ring-2 focus:ring-indigo-400" aria-label="Afficher l'email">` +
                                            `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" class="h-3 w-3 text-white"><path stroke-linecap="round" stroke-linejoin="round" d="M3 8.5v7A2.5 2.5 0 0 0 5.5 18h13A2.5 2.5 0 0 0 21 15.5v-7A2.5 2.5 0 0 0 18.5 6h-13A2.5 2.5 0 0 0 3 8.5z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M21 8.5l-9 5-9-5"/></svg>` +
                                            `<span>Afficher</span></button>` +
                                            `<span class="emailValue hidden">${email}</span>` +
                                            `</span>`;
                                    });
                                }
                                // reveal email is outside actionsMenu; do not attempt to close actions menus here
                                return;
                            }

                            // copy link
                            if (ev.target.closest('.copyBtn')) {
                                const btn = ev.target.closest('.copyBtn');
                                const id = btn.dataset.id;
                                const url = (window.location && window.location.origin ? window.location.origin : '') + '/' + id;
                                try {
                                    await navigator.clipboard?.writeText(url);
                                    showToast('Profile copié');
                                    btn.classList.add('copy-anim');
                                    setTimeout(() => btn.classList.add('copied'), 10);
                                    setTimeout(() => btn.classList.remove('copied'), 1000);
                                } catch (e) { showToast('Copie échouée'); }
                                // fermer le menu après copie
                                closeAllMenus();
                                return;
                            }

                            // role change
                            if (ev.target.closest('.roleSet')) {
                                const setBtn = ev.target.closest('.roleSet');
                                const menu = ev.target.closest('.actionsMenu');
                                // find original li via menu._origParent or by walking up from menu's original location
                                let li = null;
                                if (menu && menu._origParent) {
                                    li = menu._origParent.closest('li') || menu._origParent.querySelector('li');
                                }
                                if (!li) li = ev.target.closest('li');
                                const id = li?.dataset.id;
                                const newRole = setBtn.dataset.role;
                                try {
                                    if (window.console && window.console.log) console.log('Role change request', { id, newRole });
                                    const res = await fetch('/api/users/' + encodeURIComponent(id) + '/role', {
                                        method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ role: newRole })
                                    });
                                    if (!res.ok) throw new Error('HTTP ' + res.status);
                                    if (li) {
                                        li.dataset.role = newRole;
                                        // update visible role text in the UI
                                        const roleDisplay = li.querySelector('.ml-auto');
                                        if (roleDisplay) roleDisplay.textContent = newRole;
                                        if (window.console && window.console.log) console.log('Role change success', { id, newRole });
                                    }
                                } catch (err) { console.error(err); alert('Impossible de changer le rôle.'); }
                                closeAllMenus(); applyFilter();
                                return;
                            }

                            // visibility toggle (single button) - uses data-visible on the li to determine current state
                            if (ev.target.closest('.visibilityToggle')) {
                                const btn = ev.target.closest('.visibilityToggle');
                                const menu = ev.target.closest('.actionsMenu');
                                let li = null;
                                if (menu && menu._origParent) li = menu._origParent.closest('li') || menu._origParent.querySelector('li');
                                if (!li) li = ev.target.closest('li');
                                const id = li?.dataset.id;
                                const currentlyPublic = li?.dataset.visible === 'public';
                                try {
                                    const res = await fetch('/api/users/' + encodeURIComponent(id) + '/visibility', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ isPublic: !currentlyPublic }) });
                                    if (!res.ok) throw new Error('HTTP ' + res.status);
                                    location.reload();
                                } catch (err) {
                                    console.error(err); alert('Impossible de changer la visibilité.');
                                }
                                closeAllMenus();
                                return;
                            }

                            // email visibility toggle (single button) - uses data-email-public on the li to determine current state
                            if (ev.target.closest('.emailVisibilityToggle')) {
                                const btn = ev.target.closest('.emailVisibilityToggle');
                                const menu = ev.target.closest('.actionsMenu');
                                let li = null;
                                if (menu && menu._origParent) li = menu._origParent.closest('li') || menu._origParent.querySelector('li');
                                if (!li) li = ev.target.closest('li');
                                const id = li?.dataset.id;
                                const emailPublic = li?.dataset.emailPublic === '1';
                                try {
                                    const res = await fetch('/api/users/' + encodeURIComponent(id) + '/email-visibility', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ isEmailPublic: !emailPublic }) });
                                    if (!res.ok) throw new Error('HTTP ' + res.status);
                                    location.reload();
                                } catch (err) {
                                    console.error(err); alert('Impossible de changer la visibilité de l\'email.');
                                }
                                closeAllMenus();
                                return;
                            }

                            // delete
                            if (ev.target.closest('.deleteBtn')) {
                                const btn = ev.target.closest('.deleteBtn');
                                const id = btn.dataset.id; const name = btn.dataset.name || id;
                                const ok = await confirmWithInput(name, id);
                                if (!ok) return;
                                btn.disabled = true; btn.textContent = 'Suppression...';
                                try {
                                    const res = await fetch(`/api/users/${encodeURIComponent(id)}`, { method: 'DELETE' });
                                    if (!res.ok) throw new Error('HTTP ' + res.status);
                                    const li = btn.closest('li'); if (li) li.remove();
                                    paginator.setFiltered(paginator.getAll()); if (totalCount) totalCount.textContent = String(paginator.getAll().length);
                                } catch (err) { console.error(err); alert('Impossible de supprimer cet utilisateur.'); } finally { btn.disabled = false; btn.textContent = 'Supprimer'; }
                                // fermer le menu après suppression
                                closeAllMenus();
                                return;
                            }

                            // disable 2fa
                            if (ev.target.closest('.disable2faBtn')) {
                                const btn = ev.target.closest('.disable2faBtn'); if (!btn || btn.disabled) return;
                                const id = btn.dataset.id; const confirmOk = window.confirm("Désactiver la 2FA pour @" + id + " ?\nL'utilisateur devra la reconfigurer pour la réactiver."); if (!confirmOk) return;
                                btn.disabled = true; const prev = btn.textContent; btn.textContent = 'Désactivation...';
                                try {
                                    const res = await fetch(`/api/users/${encodeURIComponent(id)}/2fa/disable`, { method: 'POST' }); if (!res.ok) throw new Error('HTTP ' + res.status);
                                    btn.textContent = 'A2F désactivée'; btn.classList.add('opacity-60', 'cursor-not-allowed', 'text-slate-500');
                                } catch (err) {
                                    console.error(err);
                                    try {
                                        const msg = 'Erreur : impossible de désactiver la 2FA'; let errEl = btn.parentElement.querySelector('.twofaError'); if (!errEl) { errEl = document.createElement('div'); errEl.className = 'twofaError text-xs text-rose-400 mt-2'; btn.insertAdjacentElement('afterend', errEl); }
                                        errEl.textContent = msg; setTimeout(() => { try { errEl.remove(); } catch (e) { } }, 5000);
                                    } catch (e) { console.error('failed to show inline 2FA error', e); }
                                    btn.textContent = prev; btn.disabled = false;
                                }
                                // fermer le menu après désactivation
                                closeAllMenus();
                                return;
                            }
                            // If a plain anchor/menu link was clicked (menuItem is an <a>), close menus (navigation will occur)
                            if (menuItem.tagName === 'A') { closeAllMenus(); }
                        }, { capture: false });
                    })();
                </script>

                </html>