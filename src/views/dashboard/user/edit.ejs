<%- include('../../partials/head.ejs', { title: 'Tableau de bord - Édition', description: 'Configure les sections, apparence et arrière‑plan de ta page.', robots: 'noindex,nofollow' }) %>
<%- include('../../partials/header-dash.ejs', { user: user }) %>

<div id="mobileEditNotice" class="md:hidden fixed inset-0 z-50 bg-slate-900 flex items-center justify-center p-4" role="dialog" aria-modal="true">
    <div class="relative w-full max-w-lg mx-auto bg-slate-800/85 border border-slate-700 rounded-lg p-5 text-center text-white">
        <button id="mobileEditNoticeClose" class="absolute right-3 top-3 size-8 rounded bg-slate-800 hover:bg-slate-700 text-white">✕</button>
        <h2 class="text-lg font-semibold mb-2">Édition indisponible sur mobile</h2>
        <p class="text-sm text-slate-300 mb-4">L'interface d'édition n'est pas accessible depuis un petit écran. Utilisez un ordinateur ou activez le mode « affichage bureau » de votre navigateur pour modifier votre page.</p>
        <div class="flex items-center justify-center gap-2">
            <a href="<% if (typeof plinkk !== 'undefined' && plinkk && plinkk.slug) { %>/<%= plinkk.slug %><% } else { %>/<%= user.id %><% } %>" target="_blank" class="px-3 py-2 rounded bg-emerald-700/80 hover:bg-emerald-600 text-white">Ouvrir la page</a>
        </div>
    </div>
</div>

<script>
    (function(){
        const notice = document.getElementById('mobileEditNotice');
        const closeBtn = document.getElementById('mobileEditNoticeClose');
        const main = document.querySelector('main');

        if (!notice) return;

        // Masque le main tant que la notice est affichée (mobile)
        if (main) main.classList.add('hidden');

        // Fermeture : réaffiche le main
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                notice.classList.add('hidden');
                if (main) main.classList.remove('hidden');
            });
        }
    })();
</script>

        <main class="max-w-7xl mx-auto p-4 grid grid-cols-12 gap-4">
            <!-- Colonne gauche: UI de configuration -->
            <section class="col-span-12 md:col-span-7 xl:col-span-8 space-y-4">
                <div class="flex items-center justify-between gap-3">
                    <div class="min-w-0">
                        <h2 class="text/base font-semibold">Configuration <% if (typeof plinkk !== 'undefined' && plinkk) { %>
                            <span id="headerPlinkkLabel" class="text-slate-400">— <span id="headerPlinkkName"><%= plinkk.name %></span> (<span id="headerPlinkkSlug"><%= plinkk.slug %></span>)</span>
                        <% } %></h2>
                        <div id="status" class="text-xs text-slate-400"></div>
                    </div>
                                        <div class="hidden sm:flex items-center gap-2">
                                                <%- include('../../partials/changePlinkkDropdown.ejs') %>
                                        </div>
                                        <div class="flex sm:hidden items-center gap-2">
                                                <% if (typeof pages !== 'undefined' && Array.isArray(pages) && pages.length > 1) { %>
                                                    <div class="ml-2 relative inline-block text-left">
                                                        <button id="changePlinkkBtnMobile" type="button" class="inline-flex items-center gap-2 px-3 py-2 text-sm rounded-md bg-slate-800 border border-slate-700 text-white focus:outline-none">
                                                            <span id="changePlinkkBtnLabelMobile">Choisir...</span>
                                                            <svg class="text-slate-300" width="14" height="14" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.23 8.29a.75.75 0 01.02-1.08z" clip-rule="evenodd"/></svg>
                                                        </button>
                                                        <div id="changePlinkkDropdownMobile" class="hidden absolute right-0 mt-2 w-64 rounded-md bg-slate-900 border border-slate-800 shadow-lg z-40">
                                                            <div class="p-2">
                                                                <input id="changePlinkkSearchMobile" type="search" placeholder="Rechercher..." class="w-full px-3 py-2 rounded bg-slate-800 border border-slate-700 text-sm text-white focus:outline-none" />
                                                            </div>
                                                            <ul id="changePlinkkListMobile" class="max-h-48 overflow-auto divide-y divide-slate-800 text-sm"></ul>
                                                        </div>
                                                    </div>
                                                <% } %>
                                                <button id="resetBtn--mobile" class="px-3 py-2 text-sm rounded-md bg-slate-800 hover:bg-slate-700 border border-slate-700">Reset</button>
                                                <button id="saveBtn--mobile" class="px-3 py-2 text-sm rounded-md bg-indigo-600 hover:bg-indigo-500">Save</button>
                                        </div>
                </div>

                <!-- Onglets (avec icônes, accessible) -->
                <nav class="rounded-xl border border-slate-800/60 bg-slate-900/60 px-2 overflow-x-auto shadow animate-slide-up" role="tablist" aria-label="Sections d'édition">
                    <ul class="flex gap-1 text-sm min-w-max" id="tabs">
                        <li>
                            <button data-target="#section-profile" role="tab" aria-controls="section-profile" class="tab-btn px-3 py-2 rounded-md hover:bg-slate-800 aria-selected:bg-slate-800 flex items-center gap-2" aria-selected="true">
                                <svg class="size-4 text-slate-300" viewBox="0 0 24 24" fill="currentColor"><path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-3.33 0-8 1.67-8 5v1h16v-1c0-3.33-4.67-5-8-5z"/></svg>
                                Profil
                            </button>
                        </li>
                        <li>
                            <button data-target="#section-appearance" role="tab" aria-controls="section-appearance" class="tab-btn px-3 py-2 rounded-md hover:bg-slate-800 flex items-center gap-2">
                                <svg class="size-4 text-slate-300" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2l4 8h8l-6 5 2 9-8-5-8 5 2-9-6-5h8z"/></svg>
                                Apparence
                            </button>
                        </li>
                        <li>
                            <button data-target="#section-background" role="tab" aria-controls="section-background" class="tab-btn px-3 py-2 rounded-md hover:bg-slate-800 flex items-center gap-2">
                                <svg class="size-4 text-slate-300" viewBox="0 0 24 24" fill="currentColor"><path d="M4 6h16v12H4zM7 9h10v6H7z"/></svg>
                                Arrière-plan
                            </button>
                        </li>
                        <li>
                            <button data-target="#section-links" role="tab" aria-controls="section-links" class="tab-btn px-3 py-2 rounded-md hover:bg-slate-800 flex items-center gap-2">
                                <svg class="size-4 text-slate-300" viewBox="0 0 24 24" fill="currentColor"><path d="M10.59 13.41L9.17 12l4.24-4.24 1.41 1.41L10.59 13.41zm2.82-2.82L14.83 12 10.59 16.24 9.17 14.83 13.41 10.59z"/></svg>
                                Liens
                            </button>
                        </li>
                        <li>
                            <button data-target="#section-animations" role="tab" aria-controls="section-animations" class="tab-btn px-3 py-2 rounded-md hover:bg-slate-800 flex items-center gap-2">
                                <svg class="size-4 text-slate-300" viewBox="0 0 24 24" fill="currentColor"><path d="M2 17h20v2H2zM7 9h10v2H7zM4 13h16v2H4z"/></svg>
                                Animations
                            </button>
                        </li>
                        <li>
                            <button data-target="#section-statusbar" role="tab" aria-controls="section-statusbar" class="tab-btn px-3 py-2 rounded-md hover:bg-slate-800 flex items-center gap-2">
                                <svg class="size-4 text-slate-300" viewBox="0 0 24 24" fill="currentColor"><path d="M3 5h18v2H3zM3 9h18v6H3zM3 17h18v2H3z"/></svg>
                                Status & Labels
                            </button>
                        </li>
                        <li>
                            <button data-target="#section-layout" role="tab" aria-controls="section-layout" class="tab-btn px-3 py-2 rounded-md hover:bg-slate-800 flex items-center gap-2">
                                <svg class="size-4 text-slate-300" viewBox="0 0 24 24" fill="currentColor"><path d="M4 5h16v2H4zM4 11h10v2H4zM4 17h13v2H4z"/></svg>
                                Agencement
                            </button>
                        </li>
                    </ul>
                </nav>

                <!-- Sections -->
                <div class="space-y-4">
                    <!-- Profil -->
                    <div id="section-profile" class="card rounded-lg border border-slate-800/60 bg-slate-900/60 p-4 shadow animate-slide-up">
                        <div class="mb-3"><h3 class="font-medium">Profil</h3><p class="text-xs text-slate-400">Informations de base affichées publiquement.</p></div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <label class="block text-sm">Lien du profil <span class="info-i" title="Lien externe vers ton profil principal (ex. site perso, X/Twitter). Affiché sous ton nom. Utilise https://">i</span>
                                <input id="profileLink" type="url" class="mt-1 w-full px-3 py-2 rounded bg-slate-900/60 border border-slate-800/60 focus:outline-none focus:ring-2 focus:ring-indigo-600/50" placeholder="https://..." inputmode="url"/>
                            </label>
                            <label class="block text-sm">Texte du site <span class="info-i" title="Texte court affiché à côté du lien (ex. ‘Mon site’, ‘Portfolio’).">i</span>
                                <div class="relative">
                                    <input id="profileSiteText" data-maskable="true" type="text" class="mt-1 w-full px-3 py-2 rounded bg-slate-900/60 border border-slate-800/60 focus:outline-none focus:ring-2 focus:ring-indigo-600/50" />
                                    <button type="button" data-target="profileSiteText" aria-pressed="false" class="mask-toggle absolute right-1 top-1 h-8 px-2 text-xs rounded bg-slate-800 hover:bg-slate-700 text-white" aria-label="Masquer / afficher">
                                        <svg class="icon-eye" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M1 12s4-7 11-7 11 7 11 7-4 7-11 7S1 12 1 12z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                                    </button>
                                </div>
                            </label>
                            <label class="block text-sm">Nom affiché <span class="info-i" title="Nom public visible sur ta page.">i</span>
                                <input id="userName" type="text" class="mt-1 w-full px-3 py-2 rounded bg-slate-900/60 border border-slate-800/60 focus:outline-none focus:ring-2 focus:ring-indigo-600/50" />
                            </label>
                            <label class="block text-sm">Email <span class="info-i" title="Adresse e‑mail de contact. Tu peux la masquer via l’icône œil avant d’enregistrer si tu ne souhaites pas l’afficher.">i</span>
                                <div class="relative">
                                    <input id="email" data-maskable="true" type="email" class="mt-1 w-full px-3 py-2 rounded bg-slate-900/60 border border-slate-800/60 focus:outline-none focus:ring-2 focus:ring-indigo-600/50" inputmode="email" autocomplete="email" />
                                    <button type="button" data-target="email" aria-pressed="false" class="mask-toggle absolute right-1 top-1 h-8 px-2 text-xs rounded bg-slate-800 hover:bg-slate-700 text-white" aria-label="Masquer / afficher">
                                        <svg class="icon-eye" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M1 12s4-7 11-7 11 7 11 7-4 7-11 7S1 12 1 12z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                                    </button>
                                </div>
                            </label>
                            <label class="block text-sm">Image de profil (URL) <span class="info-i" title="URL d’une image carrée (idéalement 512×512) en .jpg/.png/.webp.">i</span>
                                <div class="relative">
                                    <input id="profileImage" type="url" class="mt-1 w-full px-3 py-2 rounded bg-slate-900/60 border border-slate-800/60 focus:outline-none focus:ring-2 focus:ring-indigo-600/50" />
                                </div>
                            </label>
                            <label class="block text-sm">Icône de profil (URL) <span class="info-i" title="Petite icône affichée près de ton nom. Taille conseillée ≥64px.">i</span>
                                <div class="relative">
                                    <input id="profileIcon" data-maskable="true" type="url" class="mt-1 w-full px-3 py-2 rounded bg-slate-900/60 border border-slate-800/60 focus:outline-none focus:ring-2 focus:ring-indigo-600/50" />
                                    <button type="button" data-target="profileIcon" aria-pressed="false" class="mask-toggle absolute right-1 top-1 h-8 px-2 text-xs rounded bg-slate-800 hover:bg-slate-700 text-white" aria-label="Masquer / afficher">
                                        <svg class="icon-eye" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M1 12s4-7 11-7 11 7 11 7-4 7-11 7S1 12 1 12z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                                    </button>
                                </div>
                            </label>
                            <label class="block text-sm">Icône d’onglet (URL) <span class="info-i" title="Favicon affichée dans l’onglet du navigateur. .png ou .ico (≈32×32).">i</span>
                                <div class="relative">
                                    <input id="iconUrl" data-maskable="true" type="url" class="mt-1 w-full px-3 py-2 rounded bg-slate-900/60 border border-slate-800/60 focus:outline-none focus:ring-2 focus:ring-indigo-600/50" />
                                    <button type="button" data-target="iconUrl" aria-pressed="false" class="mask-toggle absolute right-1 top-1 h-8 px-2 text-xs rounded bg-slate-800 hover:bg-slate-700 text-white" aria-label="Masquer / afficher">
                                        <svg class="icon-eye" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M1 12s4-7 11-7 11 7 11 7-4 7-11 7S1 12 1 12z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                                    </button>
                                </div>
                            </label>
                            <label class="block text-sm md:col-span-2">Description <span class="info-i" title="Courte bio affichée sur ta page. Idéalement 200–300 caractères.">i</span>
                                <div class="relative">
                                    <textarea id="description" data-maskable="true" rows="3" class="mt-1 w-full px-3 py-2 rounded bg-slate-900/60 border border-slate-800/60 focus:outline-none focus:ring-2 focus:ring-indigo-600/50"></textarea>
                                    <button type="button" data-target="description" aria-pressed="false" class="mask-toggle absolute right-1 top-1 h-8 px-2 text-xs rounded bg-slate-800 hover:bg-slate-700 text-white" aria-label="Masquer / afficher">
                                        <svg class="icon-eye" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M1 12s4-7 11-7 11 7 11 7-4 7-11 7S1 12 1 12z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                                    </button>
                                </div>
                            </label>
                        </div>
                    </div>

                    <!-- Apparence -->
                    <div id="section-appearance" class="card rounded-lg border border-slate-800/60 bg-slate-900/60 p-4 hidden shadow animate-slide-up">
                        <div class="mb-3"><h3 class="font-medium">Apparence</h3><p class="text-xs text-slate-400">Couleurs et options d’affichage.</p></div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <label class="block text-sm">Couleur hover <span class="info-i" title="Couleur utilisée au survol des liens et boutons.">i</span>
                                <input id="profileHoverColor" type="color" class="mt-1 h-10 w-full rounded bg-slate-900 border border-slate-800 p-1" />
                            </label>
                            <label class="block text-sm">Thème <span class="info-i" title="Palette de couleurs prédéfinie pour ta page.">i</span>
                                <div class="mt-1 flex items-center gap-2">
                                    <select id="selectedThemeIndex" class="flex-1 px-3 py-2 rounded bg-slate-900 border border-slate-800"></select>
                                    <button id="openThemePicker" type="button" class="h-10 px-3 text-sm rounded-md bg-fuchsia-700/80 hover:bg-fuchsia-600 border border-fuchsia-500/40 text-white shadow transition-colors">Choisir</button>
                                </div>
                            </label>
                            <label style="display: none;" class="flex items-center gap-2 text-sm opacity-60 cursor-not-allowed " title="Fonctionnalité à venir">
                                <input id="neonEnable" type="checkbox" class="size-4" disabled/>
                                <span>Activer Néon</span>
                                <span class="text-[10px] px-2 py-0.5 rounded-full border border-fuchsia-500/30 text-fuchsia-300/90 bg-fuchsia-950/30">À venir</span>
                            </label>
                            <label class="flex items-center gap-2 text-sm"><input id="buttonThemeEnable" type="checkbox" class="size-4"/> Activer thème des boutons <span class="info-i" title="Applique le style de boutons du thème sélectionné.">i</span></label>
                        </div>
                        <!-- Néon (déplacé ici) -->
                        <div class="pt-4 mt-4 border-t border-slate-800">
                            <div class="relative rounded-xl border border-slate-800/70 bg-slate-900/50 overflow-hidden">
                                <div class="px-3 pt-3 flex items-center justify-between opacity-60 select-none">
                                    <div class="flex items-center gap-2">
                                        <h4 class="font-medium">Couleurs Néon</h4>
                                        <span class="text-[10px] px-2 py-0.5 rounded-full border border-fuchsia-500/30 text-fuchsia-300/90 bg-fuchsia-950/30">À venir</span>
                                    </div>
                                    <button id="addNeonColor" type="button" class="px-3 py-2 text-sm rounded-md bg-fuchsia-700/60 border border-fuchsia-500/30 text-white/70 shadow" disabled>+ Ajouter une couleur</button>
                                </div>
                                <div class="p-3">
                                  <div id="neonList" class="grid grid-cols-2 md:grid-cols-4 gap-3 opacity-50 pointer-events-none">
                                    <div class="col-span-2 md:col-span-4 text-xs text-slate-400">Planifie tes couleurs préférées — le néon revient bientôt avec plus d’options ✨</div>
                                  </div>
                                </div>
                                <div class="absolute inset-0 flex items-center justify-center" aria-hidden="true">
                                    <div class="relative">
                                        <div class="absolute -inset-0.5 bg-gradient-to-r from-fuchsia-500/40 via-indigo-500/40 to-cyan-500/40 blur-md rounded-2xl"></div>
                                        <div class="relative px-5 py-3 rounded-2xl border border-slate-700/80 bg-slate-900/85 text-center shadow-xl">
                                            <div class="mx-auto mb-2 size-8 rounded-full flex items-center justify-center bg-slate-800/80 border border-slate-700 text-slate-200">🛠️</div>
                                            <div class="text-sm font-semibold text-slate-100">En cours de développement</div>
                                            <div class="text-[11px] text-slate-400 mt-0.5">Bientôt disponible</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Arrière-plan -->
                    <div id="section-background" class="card rounded-lg border border-slate-800/60 bg-slate-900/60 p-4 hidden shadow animate-slide-up">
                            <div class="mb-3 flex items-center justify-between">
                            <div>
                                <h3 class="font-medium">Arrière‑plan (dégradé)</h3>
                                <p class="text-xs text-slate-400">Définissez les couleurs du dégradé d’arrière‑plan.</p>
                            </div>
                            <div class="flex items-center gap-2">
                                <button id="invertBackgroundColors" type="button" class="px-3 py-2 text-sm rounded-md bg-slate-800/80 hover:bg-slate-700 border border-slate-700 text-white shadow transition-colors">Inverser</button>
                                <button id="addBackgroundColor" type="button" class="px-3 py-2 text-sm rounded-md bg-cyan-700/80 hover:bg-cyan-600 border border-cyan-500/40 text-white shadow transition-colors">+ Ajouter une couleur</button>
                            </div>
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                            <label class="block text-sm">Angle du dégradé <span class="info-i" title="Orientation du dégradé en degrés (0–359). 0° = haut, 90° = droite.">i</span>
                                <div class="mt-1 flex items-center gap-3">
                                    <input id="degBackgroundColor" type="number" class="w-24 px-3 py-2 rounded bg-slate-900 border border-slate-800" />
                                    <div id="degDial" class="deg-dial" tabindex="0" role="slider" aria-label="Angle du dégradé" aria-valuemin="0" aria-valuemax="359" aria-valuenow="0">
                                        <div class="deg-dial-dot"></div>
                                    </div>
                                </div>
                            </label>
                        </div>
                        <div id="backgroundList" class="flex flex-col gap-2" role="list"></div>
                        <!-- Canvas (déplacé ici) -->
                        <div class="pt-4 mt-4 border-t border-slate-800">
                            <div class="mb-2 flex items-center justify-between">
                                <div>
                                    <h4 class="font-medium">Canvas</h4>
                                    <p class="text-xs text-slate-400">Choisissez l’animation de fond canvas.</p>
                                </div>
                                <label class="flex items-center gap-2 text-sm">
                                    <input id="canvaEnable" type="checkbox" class="size-4"/>
                                    Activer Canvas <span class="info-i" title="Active ou désactive l’animation de fond (consomme davantage de ressources).">i</span>
                                </label>
                            </div>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <label class="block text-sm md:col-span-2">Animation <span class="info-i" title="Choisis l’animation de fond à utiliser.">i</span>
                                    <div class="mt-1">
                                        <select id="selectedCanvasIndex" class="hidden"></select>
                                        <div class="relative">
                                            <input id="selectedCanvasLabel" type="text" class="pl-3 pr-20 py-2 w-full rounded bg-slate-900/60 border border-slate-800/60 cursor-pointer focus:outline-none focus:ring-2 focus:ring-indigo-600/50" placeholder="Cliquer pour choisir" readonly />
                                            <button id="openCanvasPicker" type="button" class="absolute right-1 top-1 h-8 px-2 text-xs rounded bg-cyan-700/80 hover:bg-cyan-600 border border-cyan-500/40 text-white shadow transition-colors">Choisir</button>
                                        </div>
                                    </div>
                                </label>
                                <div class="flex items-center gap-2 md:col-span-2 -mt-2">
                                  <label class="inline-flex items-center text-xs">
                                    <input id="canvasPreviewEnable" type="checkbox" class="form-checkbox mr-2" />
                                    Aperçu (réduit) <span class="info-i" title="Affiche un petit aperçu de l’animation sélectionnée. Désactive pour économiser les ressources.">i</span>
                                  </label>
                                  <span class="text-[11px] text-slate-400">Désactive pour économiser les ressources</span>
                                </div>
                                <!-- Aperçu sélectionné 16:9 -->
                                <div class="md:col-span-2">
                                    <div id="selectedCanvasPreview" class="relative rounded-lg border border-slate-800 overflow-hidden bg-slate-900/60 max-w-[440px] mx-auto">
                                        <div id="selectedCanvasPreviewOverlay" class="absolute inset-0 bg-black/50 text-slate-200 text-xs flex items-center justify-center hidden">Canvas désactivé</div>
                                        <div id="selectedCanvasPreviewFrame" class="block w-full" style="aspect-ratio: 16/9;"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Liens (inclut Icônes sociales) -->
                    <div id="section-links" class="card rounded-lg border border-slate-800/60 bg-slate-900/60 p-4 hidden shadow animate-slide-up">
                        <!-- Icônes sociales -->
                        <div class="mb-3 flex items-center justify-between">
                            <div>
                                <h3 class="font-medium">Icônes sociales</h3>
                                <p class="text-xs text-slate-400">Ajoutez des liens vers vos réseaux et services.</p>
                            </div>
                            <button id="addSocial" type="button" class="px-3 py-2 text-sm rounded-md bg-indigo-600 hover:bg-indigo-500 text-white shadow transition-colors">+ Ajouter</button>
                        </div>
                        <div id="socialList" class="space-y-3"></div>
                        <div class="border-t border-slate-800 my-4"></div>

                        <!-- Liens -->
                        <div class="mb-3 flex items-center justify-between">
                            <div>
                                <h3 class="font-medium">Liens</h3>
                                <p class="text-xs text-slate-400">Gérez les boutons et liens de votre page.</p>
                            </div>
                            <button id="addLink" type="button" class="px-3 py-2 text-sm rounded-md bg-indigo-600 hover:bg-indigo-500 text-white shadow transition-colors">+ Ajouter un lien</button>
                        </div>
                        <div id="linksList" class="space-y-3"></div>
                    </div>

                    <!-- Animations -->
                    <div id="section-animations" class="card rounded-lg border border-slate-800/60 bg-slate-900/60 p-4 hidden shadow animate-slide-up">
                        <div class="mb-3"><h3 class="font-medium">Animations</h3><p class="text-xs text-slate-400">Ajustez les animations d’éléments et d’arrière‑plan.</p></div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <label class="block text-sm">Animation d'article <span class="info-i" title="Effet d’apparition des blocs (sections, liens).">i</span>
                                <select id="selectedAnimationIndex" class="hidden"></select>
                                <div class="relative mt-1">
                                    <input id="selectedAnimationLabel" type="text" class="pl-3 pr-20 py-2 w-full rounded bg-slate-900/60 border border-slate-800/60 cursor-pointer focus:outline-none focus:ring-2 focus:ring-indigo-600/50" placeholder="Cliquer pour choisir" readonly />
                                    <button id="openAnimArticlePicker" type="button" class="absolute right-1 top-1 h-8 px-2 text-xs rounded bg-indigo-600 hover:bg-indigo-500 text-white shadow transition-colors">Choisir</button>
                                </div>
                            </label>
                            <label class="block text-sm">Animation de bouton <span class="info-i" title="Effet appliqué aux boutons (au survol, au clic).">i</span>
                                <select id="selectedAnimationButtonIndex" class="hidden"></select>
                                <div class="relative mt-1">
                                    <input id="selectedAnimationButtonLabel" type="text" class="pl-3 pr-20 py-2 w-full rounded bg-slate-900/60 border border-slate-800/60 cursor-pointer focus:outline-none focus:ring-2 focus:ring-indigo-600/50" placeholder="Cliquer pour choisir" readonly />
                                    <button id="openAnimButtonPicker" type="button" class="absolute right-1 top-1 h-8 px-2 text-xs rounded bg-indigo-600 hover:bg-indigo-500 text-white shadow transition-colors">Choisir</button>
                                </div>
                            </label>
                            <label class="block text-sm">Animation d'arrière-plan <span class="info-i" title="Effet d’animation appliqué à l’arrière‑plan (si utilisé).">i</span>
                                <select id="selectedAnimationBackgroundIndex" class="hidden"></select>
                                <div class="relative mt-1">
                                    <input id="selectedAnimationBackgroundLabel" type="text" class="pl-3 pr-20 py-2 w-full rounded bg-slate-900/60 border border-slate-800/60 cursor-pointer focus:outline-none focus:ring-2 focus:ring-indigo-600/50" placeholder="Cliquer pour choisir" readonly />
                                    <button id="openAnimBackgroundPicker" type="button" class="absolute right-1 top-1 h-8 px-2 text-xs rounded bg-indigo-600 hover:bg-indigo-500 text-white shadow transition-colors">Choisir</button>
                                </div>
                            </label>
                            <label class="block text-sm">Durée anim background (s) <span class="info-i" title="Durée d’un cycle complet d’animation (en secondes).">i</span>
                                <input id="animationDurationBackground" type="number" class="mt-1 w-full px-3 py-2 rounded bg-slate-900 border border-slate-800" />
                            </label>
                            <label class="block text-sm">Délai anim bouton (s) <span class="info-i" title="Retard avant le déclenchement de l’animation des boutons (en secondes).">i</span>
                                <input id="delayAnimationButton" step="0.01" type="number" class="mt-1 w-full px-3 py-2 rounded bg-slate-900 border border-slate-800" />
                            </label>
                            <label class="block text-sm">Taille background (%) <span class="info-i" title="Échelle du motif d’arrière‑plan (en pourcentage).">i</span>
                                <input id="backgroundSize" type="number" class="mt-1 w-full px-3 py-2 rounded bg-slate-900 border border-slate-800" />
                            </label>
                        </div>
                    </div>

                    <!-- Statusbar (inclut Labels) -->
                    <div id="section-statusbar" class="card rounded-lg border border-slate-800/60 bg-slate-900/60 p-4 hidden shadow animate-slide-up">

                        <div class="mb-3"><h3 class="font-medium">Barre de statut</h3><p class="text-xs text-slate-400">Message et style du statut affiché sous le profil.</p></div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <label class="block text-sm md:col-span-2">Texte <span class="info-i" title="Message affiché sous ton profil dans la barre de statut.">i</span>
                                <input id="status_text" type="text" class="mt-1 w-full px-3 py-2 rounded bg-slate-900 border border-slate-800" />
                            </label>
                            <label class="block text-sm">FontTextColor (0 ou 1) <span class="info-i" title="Forcer la couleur du texte: 0 = texte clair, 1 = texte foncé (selon ton fond).">i</span>
                                <input id="status_fontTextColor" type="number" class="mt-1 w-full px-3 py-2 rounded bg-slate-900 border border-slate-800" />
                            </label>
                            <div class="md:col-span-1">
                                <div class="text-sm mb-1">Statut <span class="info-i" title="État visible sous ton profil (en ligne, occupé, absent, hors‑ligne).">i</span></div>
                                <div class="relative inline-block" id="statusDropdown">
                                    <button id="statusDropdownBtn" type="button" aria-haspopup="menu" aria-expanded="false" class="inline-flex items-center gap-2 px-3 py-2 rounded-md bg-slate-800/80 border border-slate-700/60 hover:bg-slate-700/80 focus:outline-none focus:ring-2 focus:ring-indigo-600/40 text-sm">
                                        <span class="inline-block size-2 rounded-full bg-slate-400"></span>
                                        <span class="status-current-label">Hors‑ligne</span>
                                        <svg class="size-4 text-slate-300" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.23 8.29a.75.75 0 01.02-1.08z" clip-rule="evenodd"/></svg>
                                    </button>
                                    <div id="statusDropdownPanel" class="absolute z-10 mt-2 w-48 rounded-lg border border-slate-700 bg-slate-900/95 backdrop-blur shadow-xl p-1 hidden" role="menu" aria-label="Choisir un statut">
                                        <button type="button" class="w-full flex items-center gap-2 px-3 py-2 text-sm rounded-md hover:bg-slate-800" data-value="online" role="menuitem">
                                            <span class="inline-block size-2 rounded-full bg-emerald-400"></span> En ligne
                                        </button>
                                        <button type="button" class="w-full flex items-center gap-2 px-3 py-2 text-sm rounded-md hover:bg-slate-800" data-value="busy" role="menuitem">
                                            <span class="inline-block size-2 rounded-full bg-rose-400"></span> Occupé
                                        </button>
                                        <button type="button" class="w-full flex items-center gap-2 px-3 py-2 text-sm rounded-md hover:bg-slate-800" data-value="away" role="menuitem">
                                            <span class="inline-block size-2 rounded-full bg-amber-400"></span> Absent
                                        </button>
                                        <button type="button" class="w-full flex items-center gap-2 px-3 py-2 text-sm rounded-md hover:bg-slate-800" data-value="offline" role="menuitem">
                                            <span class="inline-block size-2 rounded-full bg-slate-400"></span> Hors‑ligne
                                        </button>
                                    </div>
                                </div>
                                <input type="hidden" id="status_statusText" />
                            </div>
                        </div>
                        <!-- Labels (déplacé ici) -->
                        <div class="pt-4 mt-4 border-t border-slate-800">
                            <div class="mb-3 flex items-center justify-between">
                                <div>
                                    <h4 class="font-medium">Labels</h4>
                                    <p class="text-xs text-slate-400">Badges affichés sous votre profil.</p>
                                </div>
                                <button id="addLabel" type="button" class="px-3 py-2 text-sm rounded-md bg-emerald-700/80 hover:bg-emerald-600 border border-emerald-500/40 text-white shadow transition-colors">+ Ajouter un label</button>
                            </div>
                            <div id="labelsList" class="space-y-3"></div>
                        </div>
                    </div>

                    <!-- Agencement -->
                    <div id="section-layout" class="card rounded-lg border border-slate-800/60 bg-slate-900/60 p-4 hidden shadow animate-slide-up">
                        <div class="mb-3"><h3 class="font-medium">Agencement</h3><p class="text-xs text-slate-400">Réordonne visuellement les sections de ta page par glisser‑déposer.</p></div>
                        <div class="space-y-2" id="layoutList" role="list"></div>
                        <p class="text-[11px] text-slate-400 mt-3">Astuce: fais glisser les éléments avec la poignée à gauche pour changer l’ordre.</p>
                    </div>
                </div>
            </section>

            <!-- Colonne droite: Aperçu -->
            <aside class="col-span-12 md:col-span-5 xl:col-span-4 space-y-3">
                <div class="rounded-lg border border-indigo-800/40 bg-slate-900/60 p-3 sticky top-[68px] shadow animate-slide-up" style="animation-delay:120ms">
                    <div class="flex items-center justify-between gap-2 mb-2">
                        <h2 class="text-base font-semibold">Aperçu</h2>
                        <div class="flex items-center gap-2">
                            <button id="refreshPreview" class="px-3 py-2 text-xs rounded-md bg-indigo-600 hover:bg-indigo-500 text-white shadow transition-colors">Rafraîchir</button>
                            <a class="px-3 py-2 text-xs rounded-md bg-emerald-700/80 hover:bg-emerald-600 border border-emerald-500/40 text-white shadow transition-colors" target="_blank" href="<% if (typeof plinkk !== 'undefined' && plinkk && plinkk.slug) { %>/<%= plinkk.slug %><% } else { %>/<%= user.id %><% } %>">Ouvrir</a>
                        </div>
                    </div>
                    <div class="rounded border border-slate-800 overflow-hidden bg-slate-950/40">
                        <div class="flex items-center gap-2 px-3 py-2 border-b border-slate-800 text-[10px] text-slate-400">
                            <span class="size-2 rounded-full bg-rose-500/80"></span>
                            <span class="size-2 rounded-full bg-amber-500/80"></span>
                            <span class="size-2 rounded-full bg-emerald-500/80"></span>
                            <div class="ml-auto flex items-center gap-1">
                                <button type="button" data-view="desktop" class="px-2 py-1 rounded hover:bg-slate-800">Desktop</button>
                                <button type="button" data-view="mobile" class="px-2 py-1 rounded hover:bg-slate-800">Mobile</button>
                            </div>
                        </div>
                        <iframe id="preview" class="w-full h-[72dvh] bg-white" src="<% if (typeof plinkk !== 'undefined' && plinkk && plinkk.slug) { %>/<%= plinkk.slug %>?preview=1<% } else { %>/<%= user.id %>?preview=1<% } %>"></iframe>
                    </div>
                </div>
            </aside>
        </main>

                    <!-- Modal Sélection d'icône sociale -->
                    <div id="iconModal" class="fixed inset-0 z-50 hidden">
                        <div class="absolute inset-0 bg-black/60 animate-fade-in"></div>
                        <div class="relative mx-auto mt-16 w-[92vw] max-w-3xl rounded-lg border border-slate-800 bg-slate-900 shadow-xl animate-pop-in">
                            <div class="flex items-center justify-between px-4 py-3 border-b border-slate-800">
                                <h3 class="font-semibold">Choisir une icône</h3>
                                <button id="iconModalClose" class="size-8 rounded bg-slate-800 hover:bg-slate-700">✕</button>
                            </div>
                            <div class="p-4 space-y-3">
                                <input id="iconSearch" type="text" placeholder="Rechercher..." class="w-full px-3 py-2 rounded bg-slate-800 border border-slate-700" />
                                <div id="iconGrid" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3 max-h-[60vh] overflow-auto"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Modal générique de sélection (thèmes, animations, canvas, bouton thème) -->
                    <div id="pickerModal" class="fixed inset-0 z-50 hidden">
                        <div class="absolute inset-0 bg-black/60 animate-fade-in"></div>
                        <div class="relative mx-auto mt-16 w-[92vw] max-w-5xl rounded-lg border border-slate-800 bg-slate-900 shadow-xl animate-pop-in">
                                                        <div class="flex items-center justify-between px-4 py-3 border-b border-slate-800">
                                                                <div class="flex items-center gap-3">
                                                                    <a id="pickerCreateBtn" href="/dashboard/themes" target="_blank" class="hidden px-3 py-1.5 text-sm rounded-md bg-emerald-700/80 hover:bg-emerald-600 border border-emerald-500/40 text-white shadow transition-colors">Créer mon propre thème</a>
                                                                    <h3 id="pickerTitle" class="font-semibold">Sélection</h3>
                                                                </div>
                                                                <div class="flex items-center gap-2">
                                                                    <button id="pickerClose" class="size-8 rounded bg-slate-800 hover:bg-slate-700">✕</button>
                                                                </div>
                                                        </div>
                            <div class="p-4 space-y-3">
                                <input id="pickerSearch" type="text" placeholder="Rechercher..." class="w-full px-3 py-2 rounded bg-slate-800 border border-slate-700" />
                                                                <div id="pickerGrid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 max-h-[64vh] overflow-auto"></div>
                            </div>
                        </div>
                    </div>

                        <script>
                                window.__PLINKK_USER_ID__ = "<%= user.id %>";
                                // Gestion simple des onglets avec hash dans l’URL
                                (function(){
                                    const btns = Array.from(document.querySelectorAll('.tab-btn'));
                                    const sections = Array.from(document.querySelectorAll('[id^="section-"]'));
                                    const selectTab = (target) => {
                                        sections.forEach(s => s.classList.toggle('hidden', `#${s.id}` !== target));
                                        btns.forEach(b => b.setAttribute('aria-selected', b.dataset.target === target ? 'true' : 'false'));
                                        // Mémoriser dans l’URL
                                        if (history.replaceState) {
                                            history.replaceState(null, '', target);
                                        } else {
                                            location.hash = target;
                                        }
                                    };
                                    btns.forEach(b => b.addEventListener('click', () => selectTab(b.dataset.target)));
                                    // Init sur hash ou défaut profil
                                    const initial = location.hash && sections.some(s => `#${s.id}` === location.hash) ? location.hash : '#section-profile';
                                    selectTab(initial);

                                    // Relier boutons mobiles aux actions principales
                                    const save = document.getElementById('saveBtn');
                                    const reset = document.getElementById('resetBtn');
                                    ['saveBtn--mobile','saveBtn--fab'].forEach(id=>{
                                        const el = document.getElementById(id); if(el && save){ el.addEventListener('click', ()=> save.click()); }
                                    });
                                    ['resetBtn--mobile','resetBtn--fab'].forEach(id=>{
                                        const el = document.getElementById(id); if(el && reset){ el.addEventListener('click', ()=> reset.click()); }
                                    });
                                })();
                        </script>
                <!-- Expose les données de configuration (thèmes, animations, canvas, boutons) au dashboard -->
                <style>
                    /* Visuel pour champs masqués : grisé et non éditable mais valeur visible */
                    .masked-field { background-color: rgba(100,100,100,0.12) !important; opacity: 0.65; cursor: not-allowed; }
                    .masked-field:disabled { color: inherit; }
                    .masked-field[readonly] { color: inherit; }
                    .mask-toggle { line-height: 1; }

                    /* Petit (i) d'aide discret */
                    .info-i { display:inline-flex; align-items:center; justify-content:center; width:14px; height:14px; font-size:10px; line-height:1; border-radius:9999px; border:1px solid rgba(148,163,184,0.35); color:#cbd5e1; margin-left:6px; cursor:help; background: rgba(15,23,42,0.5); }
                    .info-i:hover { background: rgba(30,41,59,0.6); color:#e5e7eb; border-color: rgba(148,163,184,0.6); }

                    /* Cadran d'angle (knob) */
                    .deg-dial { position: relative; width: 72px; height: 72px; border-radius: 100%; border: 1px solid #334155; background: radial-gradient(closest-side, rgba(30,41,59,0.9), rgba(15,23,42,0.9)); box-shadow: inset 0 0 0 2px rgba(148,163,184,0.1); outline: none; user-select: none; -webkit-user-select: none; touch-action: none; cursor: grab; }
                    .deg-dial:focus { box-shadow: 0 0 0 2px rgba(99,102,241,0.55), inset 0 0 0 2px rgba(148,163,184,0.1); }
                    .deg-dial.is-dragging { cursor: grabbing; }
                    .deg-dial-dot { position: absolute; width: 14px; height: 14px; border-radius: 100%; background: #93c5fd; border: 2px solid #1f2937; top: 50%; left: 50%; box-shadow: 0 0 0 1px rgba(148,163,184,0.35); pointer-events: auto; cursor: grab; }
                    .deg-dial:active .deg-dial-dot, .deg-dial.is-dragging .deg-dial-dot { background: #3b82f6; cursor: grabbing; }
                </style>
                <script>
                    (function(){
                        // Gestion des boutons "œil" pour masquer les inputs de profil, avec persistance locale
                        const USER_ID = window.__PLINKK_USER_ID__ || 'self';
                        const PLINKK_ID = window.__PLINKK_SELECTED_ID__ || 'default';
                        const LS_PREFIX = 'PLK_MASK:'; // clé localStorage prefix

                        function lsGet(key){ try { return JSON.parse(localStorage.getItem(key) || 'null'); } catch { return null; } }
                        function lsSet(key, val){ try { localStorage.setItem(key, JSON.stringify(val)); } catch { /* ignore */ } }
                        function lsDel(key){ try { localStorage.removeItem(key); } catch { /* ignore */ } }
                        function getKey(inputId){ return `${LS_PREFIX}${USER_ID}:${PLINKK_ID}:${inputId}`; }

                        function applyMaskedState(input, btn, saved){
                            // saved: { masked: boolean, value: string }
                            if (!input || !btn) return;
                            const isMasked = !!(saved && saved.masked);
                            
                            btn.setAttribute('title', 'Masquer / afficher le champ');
                            btn.setAttribute('aria-pressed', isMasked ? 'true' : 'false');

                            if (isMasked) {
                                // Conserver/forcer la valeur mémorisée
                                if (saved && typeof saved.value !== 'undefined') {
                                    input.value = saved.value;
                                }
                                input.dataset._originalValue = input.value ?? '';
                                input.readOnly = true;
                                input.disabled = true;
                                input.classList.add('masked-field');
                                // Icône œil barré (eye-off)
                                btn.innerHTML = '<svg class="icon-eye-off" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M17.94 17.94A10.94 10.94 0 0 1 12 20C5 20 1 12 1 12a20.81 20.81 0 0 1 5.06-6.94M9.9 4.24A10.94 10.94 0 0 1 12 4c7 0 11 8 11 8a20.82 20.82 0 0 1-4.87 6.82M1 1l22 22"/></svg>';
                            } else {
                                // État non masqué
                                if (typeof input.dataset._originalValue !== 'undefined') {
                                    // restaurer la valeur en clair si nous l’avions mémorisée
                                    input.value = input.dataset._originalValue;
                                    delete input.dataset._originalValue;
                                }
                                input.readOnly = false;
                                input.disabled = false;
                                input.classList.remove('masked-field');
                                btn.innerHTML = '<svg class="icon-eye" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M1 12s4-7 11-7 11 7 11 7-4 7-11 7S1 12 1 12z"></path><circle cx="12" cy="12" r="3"></circle></svg>';
                            }
                        }

                        // Initialisation + listeners
                        const buttons = Array.from(document.querySelectorAll('.mask-toggle'));
                        buttons.forEach(btn => {
                            const targetId = btn.getAttribute('data-target');
                            if (!targetId) return;
                            const input = document.getElementById(targetId);
                            if (!input) return;

                            // Restaure l'état depuis localStorage
                            const key = getKey(targetId);
                            const saved = lsGet(key);
                            applyMaskedState(input, btn, saved);

                            // Listener clic
                            btn.addEventListener('click', () => {
                                const currentlyMasked = btn.getAttribute('aria-pressed') === 'true';
                                if (!currentlyMasked) {
                                    // activer masquage: mémoriser valeur+état
                                    const value = input.value ?? '';
                                    lsSet(key, { masked: true, value });
                                    applyMaskedState(input, btn, { masked: true, value });
                                } else {
                                    // désactiver masquage: supprimer persistance + restaurer
                                    lsDel(key);
                                    applyMaskedState(input, btn, { masked: false });
                                }
                                // Déclencher une sauvegarde auto afin d’actualiser l’aperçu après le PUT
                                if (window.__DASH_TRIGGER_SAVE__) {
                                    window.__DASH_TRIGGER_SAVE__();
                                }
                            });
                        });

                        // Avant l'envoi (click sur save ou submit de form), remplacer les champs masqués par "" pour qu'ils n'envoient rien
                        function clearMaskedValues() {
                            document.querySelectorAll('[data-maskable]')
                                .forEach(inp => {
                                    const key = getKey(inp.id);
                                    const saved = lsGet(key);
                                    const isMasked = (typeof inp.dataset._originalValue !== 'undefined') || inp.classList.contains('masked-field') || (saved && saved.masked);
                                    if (isMasked) {
                                        inp.value = '';
                                    }
                                });
                        }

                        // Intercepter clics sur les boutons de sauvegarde (capture pour être sûr d'exécuter avant d'autres handlers)
                        document.addEventListener('click', (e) => {
                            const saveBtn = e.target.closest && e.target.closest('#saveBtn, #saveBtn--mobile, #saveBtn--fab');
                            if (saveBtn) {
                                clearMaskedValues();
                            }
                        }, true);

                        // Si un formulaire enveloppe ces champs, intercepter son submit aussi (plus robuste)
                        (function attachFormInterceptor(){
                            // Cherche le formulaire parent le plus proche d'un des inputs maskable
                            const sample = document.querySelector('[data-maskable]');
                            if (!sample) return;
                            const form = sample.closest('form');
                            if (!form) return;
                            form.addEventListener('submit', (ev) => {
                                clearMaskedValues();
                                // allow normal submit to proceed
                            });
                        })();
                    })();
                </script>
                <script type="module">
                    import canvaData from '/public/config/canvaConfig.js';
                    import { animations, animationBackground } from '/public/config/animationConfig.js';
                    import btnIconThemeConfig from '/public/config/btnIconThemeConfig.js';
                    import labelPresets from '/public/config/labelPresets.js';
                    // Fetch built-ins + community themes from the server and expose
                    // them to the dashboard UI via window.__PLINKK_CFG__
                    try {
                        const res = await fetch(`/themes.json?userId=${encodeURIComponent("<%= user.id %>")}`);
                        let builtIns = [];
                        let community = [];
                        if (res.ok) {
                            const payload = await res.json();
                            builtIns = Array.isArray(payload.builtIns) ? payload.builtIns : [];
                            community = Array.isArray(payload.theme) ? payload.theme : [];
                        }
                        const mergedThemes = builtIns.concat(community);
                        window.__PLINKK_CFG__ = { themes: mergedThemes, canvaData, animations, animationBackground, btnIconThemeConfig, labelPresets };
                    } catch (e) {
                        window.__PLINKK_CFG__ = { themes: [], canvaData, animations, animationBackground, btnIconThemeConfig, labelPresets };
                    }
                </script>
                <script>
                    // Synchronisation knob <-> input pour l'angle de dégradé
                    (function(){
                        const input = document.getElementById('degBackgroundColor');
                        const dial = document.getElementById('degDial');
                        const dot = dial ? dial.querySelector('.deg-dial-dot') : null;
                        if (!input || !dial || !dot) return;

                        function clampDeg(n){ n = Math.round(Number(n)||0); n %= 360; if (n < 0) n += 360; return n; }
                        function setAria(val){ dial.setAttribute('aria-valuenow', String(val)); }
                        function setDot(val){ dot.style.transform = `translate(-50%, -50%) rotate(${val - 90}deg) translate(26px, 0)`; }
                        function syncFromInput(){ const v = clampDeg(input.value); setDot(v); setAria(v); }
                        function syncFromDeg(val){ const v = clampDeg(val); input.value = String(v); setDot(v); setAria(v); if (window.__DASH_TRIGGER_SAVE__) window.__DASH_TRIGGER_SAVE__(); }

                        // Init (attendre que le formulaire soit rempli)
                        setTimeout(syncFromInput, 0);

                        input.addEventListener('input', () => syncFromInput());
                        input.addEventListener('change', () => { if (window.__DASH_TRIGGER_SAVE__) window.__DASH_TRIGGER_SAVE__(); });

                        function posToDeg(clientX, clientY){
                            const rect = dial.getBoundingClientRect();
                            const cx = rect.left + rect.width/2; const cy = rect.top + rect.height/2;
                            const dx = clientX - cx; const dy = clientY - cy;
                            let angle = Math.atan2(dy, dx) * 180/Math.PI; // -180..180, 0 à droite
                            angle = (angle + 360) % 360; // 0..359
                            // On veut 0° en haut: ajouter 90° puis modulo 360
                            angle = (angle + 90) % 360;
                            return Math.round(angle);
                        }

                        let dragging = false;
                        function onPointerMove(e){
                            if (!dragging) return;
                            const pt = e.touches?.[0] || e;
                            syncFromDeg(posToDeg(pt.clientX, pt.clientY));
                            e.preventDefault();
                        }
                        function onPointerUp(){
                            dragging = false;
                            dial.classList.remove('is-dragging');
                            window.removeEventListener('mousemove', onPointerMove, { passive: false });
                            window.removeEventListener('mouseup', onPointerUp);
                            window.removeEventListener('touchmove', onPointerMove);
                            window.removeEventListener('touchend', onPointerUp);
                        }
                        function startDrag(e){
                            e.preventDefault();
                            dragging = true;
                            dial.classList.add('is-dragging');
                            const pt = e.touches?.[0] || e;
                            syncFromDeg(posToDeg(pt.clientX, pt.clientY));
                            window.addEventListener('mousemove', onPointerMove, { passive: false });
                            window.addEventListener('mouseup', onPointerUp);
                            window.addEventListener('touchmove', onPointerMove, { passive: false });
                            window.addEventListener('touchend', onPointerUp);
                            // Focus pour activer le support à la molette ensuite
                            dial.focus();
                        }

                        // Drag depuis n'importe où sur le dial (dot compris)
                        dial.addEventListener('mousedown', startDrag);
                        dial.addEventListener('touchstart', startDrag, { passive: false });

                        // Molette (uniquement quand le dial a le focus, i.e. cliqué juste avant)
                        dial.addEventListener('wheel', (e) => {
                            if (document.activeElement !== dial) return;
                            e.preventDefault();
                            const delta = e.deltaY || e.deltaX || 0;
                            const step = e.shiftKey ? 10 : 1;
                            const dir = delta > 0 ? -step : step; // sens intuitif
                            const val = clampDeg((Number(input.value)||0) + dir);
                            syncFromDeg(val);
                        }, { passive: false });

                        // Accessibilité clavier
                        dial.addEventListener('keydown', (e) => {
                            const step = (e.shiftKey ? 10 : 1);
                            let val = clampDeg(input.value);
                            if (e.key === 'ArrowRight' || e.key === 'ArrowUp') { val = clampDeg(val + step); syncFromDeg(val); e.preventDefault(); }
                            if (e.key === 'ArrowLeft' || e.key === 'ArrowDown') { val = clampDeg(val - step); syncFromDeg(val); e.preventDefault(); }
                            if (e.key === 'Home') { syncFromDeg(0); e.preventDefault(); }
                            if (e.key === 'End') { syncFromDeg(359); e.preventDefault(); }
                        });
                    })();
                </script>
                <!-- Données utiles pour la sélection de page -->
                <script type="application/json" id="pages-data"><%- JSON.stringify(typeof pages !== 'undefined' ? pages : []) %></script>
                <script type="application/json" id="autoopen-data"><%= (typeof autoOpenPlinkkModal !== 'undefined' && autoOpenPlinkkModal) ? 'true' : 'false' %></script>
                <% if (typeof plinkk !== 'undefined' && plinkk) { %>
                <script>window.__PLINKK_SELECTED_ID__ = "<%= plinkk.id %>";</script>
                <% } %>
                <!-- Initialisation de l'UI du dashboard (formulaire, listes, pickers) -->
                <script type="module" src="/public/js/dashboard-ui/index.js"></script>
                <script>
                        // Toggle preview viewport (desktop/mobile)
                        (function(){
                            const frame = document.getElementById('preview');
                            const wrap = frame && frame.parentElement;
                            if (!frame || !wrap) return;
                            const setMobile = (on) => {
                                if (on) { frame.style.width = '390px'; frame.style.margin = '0 auto'; }
                                else { frame.style.width = '100%'; frame.style.margin = '0'; }
                            };
                            document.querySelectorAll('[data-view]')?.forEach(btn=>{
                                btn.addEventListener('click', ()=> setMobile(btn.getAttribute('data-view')==='mobile'));
                            });
                        })();
                        // Live-update header plinkk name as user types in the "Nom affiché" field
                        (function(){
                            try {
                                const nameInput = document.getElementById('userName');
                                const headerName = document.getElementById('headerPlinkkName');
                                if (nameInput && headerName) {
                                    nameInput.addEventListener('input', () => {
                                        const v = nameInput.value || '';
                                        headerName.textContent = v || headerName.getAttribute('data-original') || '';
                                    });
                                    // store original as fallback
                                    headerName.setAttribute('data-original', headerName.textContent || '');
                                }
                            } catch (e) { /* ignore */ }
                        })();
                        // Sélection de page via un select intégré à la page (fallback vers prompt si nécessaire)
                        (function(){
                            const btn = document.getElementById('changePlinkk');
                            const btnMobile = document.getElementById('changePlinkk--mobile');
                            const select = document.getElementById('changePlinkkSelect');
                            const selectMobile = document.getElementById('changePlinkkSelectMobile');
                            const pagesRaw = document.getElementById('pages-data')?.textContent || '[]';
                            let pages = [];
                            try { pages = JSON.parse(pagesRaw) || []; } catch {}

                            const currentId = window.__PLINKK_SELECTED_ID__ || '';


                            // Build dropdown items into a UL
                            function buildList(listEl, isMobile) {
                                if (!listEl) return;
                                listEl.innerHTML = '';
                                pages.forEach(p => {
                                    const li = document.createElement('li');
                                    li.className = 'px-3 py-2 hover:bg-slate-800 cursor-pointer flex items-center justify-between';
                                    li.tabIndex = 0;
                                    const left = document.createElement('div');
                                    // Afficher uniquement le slug dans la liste déroulante (visuel)
                                    left.textContent = p.slug;
                                    const openLink = document.createElement('a');
                                    openLink.textContent = 'Ouvrir';
                                    openLink.href = `/${p.slug}`;
                                    openLink.target = '_blank';
                                    openLink.rel = 'noopener';
                                    openLink.className = 'text-emerald-300 hover:underline ml-2';
                                    li.appendChild(left);
                                    li.appendChild(openLink);
                                    li.addEventListener('click', (e) => {
                                        // If clicking the 'Ouvrir' link, let it open in new tab
                                        if (e.target === openLink) return;
                                        location.href = `/dashboard/edit?plinkkId=${encodeURIComponent(p.id)}`;
                                    });
                                    li.addEventListener('keypress', (e) => { if (e.key === 'Enter') location.href = `/dashboard/edit?plinkkId=${encodeURIComponent(p.id)}`; });
                                    listEl.appendChild(li);
                                });
                            }

                            function filterList(inputEl, listEl) {
                                const q = (inputEl.value || '').toLowerCase().trim();
                                Array.from(listEl.children).forEach(li => {
                                    const txt = li.textContent || '';
                                    li.style.display = txt.toLowerCase().includes(q) ? '' : 'none';
                                });
                            }

                            // Dropdown open/close helpers
                            function toggleDropdown(drop, open) {
                                if (!drop) return;
                                drop.classList.toggle('hidden', !open);
                            }

                            const dropdown = document.getElementById('changePlinkkDropdown');
                            const list = document.getElementById('changePlinkkList');
                            const search = document.getElementById('changePlinkkSearch');

                            const dropdownM = document.getElementById('changePlinkkDropdownMobile');
                            const listM = document.getElementById('changePlinkkListMobile');
                            const searchM = document.getElementById('changePlinkkSearchMobile');

                            buildList(list, false);
                            buildList(listM, true);

                            if (search && list) {
                                search.addEventListener('input', () => filterList(search, list));
                            }
                            if (searchM && listM) {
                                searchM.addEventListener('input', () => filterList(searchM, listM));
                            }

                            // Show current label + open link
                            if (currentId) {
                                const current = pages.find(p => p.id === currentId);
                                if (current) {
                                    const lbl = document.getElementById('currentPlinkkLabel');
                                    const link = document.getElementById('openCurrentPlinkk');
                                    const btnLabel = document.getElementById('changePlinkkBtnLabel');
                                    if (lbl) { lbl.textContent = current.slug; lbl.classList.remove('hidden'); }
                                    if (link) { link.href = `/${current.slug}`; link.classList.remove('hidden'); }
                                    if (btnLabel) { btnLabel.textContent = `${current.slug}`; }

                                    const lblM = document.getElementById('currentPlinkkLabelMobile');
                                    const linkM = document.getElementById('openCurrentPlinkkMobile');
                                    const btnLabelM = document.getElementById('changePlinkkBtnLabelMobile');
                                    if (lblM) { lblM.textContent = current.slug; lblM.classList.remove('hidden'); }
                                    if (linkM) { linkM.href = `/${current.slug}`; linkM.classList.remove('hidden'); }
                                    if (btnLabelM) { btnLabelM.textContent = `${current.slug}`; }
                                }
                            }

                            // Toggle dropdown on button click
                            const btnEl = document.getElementById('changePlinkkBtn');
                            const btnElM = document.getElementById('changePlinkkBtnMobile');
                            if (btnEl && dropdown) {
                                btnEl.addEventListener('click', (e) => { e.stopPropagation(); toggleDropdown(dropdown, dropdown.classList.contains('hidden')); if (search) { search.value = ''; filterList(search, list); setTimeout(()=>search.focus(), 50); } });
                            }
                            if (btnElM && dropdownM) {
                                btnElM.addEventListener('click', (e) => { e.stopPropagation(); toggleDropdown(dropdownM, dropdownM.classList.contains('hidden')); if (searchM) { searchM.value = ''; filterList(searchM, listM); setTimeout(()=>searchM.focus(), 50); } });
                            }

                            // Close dropdown when clicking outside
                            document.addEventListener('click', () => { toggleDropdown(dropdown, false); toggleDropdown(dropdownM, false); });
                            // Prevent clicks inside dropdown from closing (we handle)
                            if (dropdown) dropdown.addEventListener('click', (e)=> e.stopPropagation());
                            if (dropdownM) dropdownM.addEventListener('click', (e)=> e.stopPropagation());

                            function openChooserFallback() {
                                // Redirect to the first available page by default instead of using prompt
                                if (pages && pages.length) {
                                    const id = pages[0].id;
                                    if (id) location.href = `/dashboard/edit?plinkkId=${encodeURIComponent(id)}&autoRedirect=1`;
                                }
                            }

                            // Helper to populate a <select> with available pages and wire navigation
                            function populate(selectEl, isMobile) {
                                if (!selectEl) return;
                                selectEl.innerHTML = '';
                                pages.forEach((p, i) => {
                                    const opt = document.createElement('option');
                                    opt.value = p.id;
                                    opt.textContent = `${i+1}. ${p.name} (${p.slug})`;
                                    selectEl.appendChild(opt);
                                });
                                // Pre-select current if known
                                if (currentId) {
                                    const idx = pages.findIndex(p => p.id === currentId);
                                    if (idx !== -1) selectEl.value = pages[idx].id;
                                }
                                // Navigate when selection changes
                                selectEl.addEventListener('change', () => {
                                    const val = selectEl.value;
                                    if (!val) return;
                                    location.href = `/dashboard/edit?plinkkId=${encodeURIComponent(val)}`;
                                });
                                // Keyboard support: Enter to confirm
                                selectEl.addEventListener('keydown', (e) => { if (e.key === 'Enter') { const val = selectEl.value; if (val) location.href = `/dashboard/edit?plinkkId=${encodeURIComponent(val)}`; } });
                            }

                            populate(select, false);
                            populate(selectMobile, true);

                            // Afficher le label courant (au lieu de pré-sélectionner l'option)
                            if (currentId) {
                                const current = pages.find(p => p.id === currentId);
                                if (current) {
                                    const lbl = document.getElementById('currentPlinkkLabel');
                                    if (lbl) { lbl.textContent = `${current.name} (${current.slug})`; lbl.classList.remove('hidden'); }
                                    const lblM = document.getElementById('currentPlinkkLabelMobile');
                                    if (lblM) { lblM.textContent = `${current.name} (${current.slug})`; lblM.classList.remove('hidden'); }
                                }
                            }

                            if (btn) { btn.addEventListener('click', () => { if (select) select.focus(); else openChooserFallback(); }); }
                            if (btnMobile) { btnMobile.addEventListener('click', () => { if (selectMobile) selectMobile.focus(); else openChooserFallback(); }); }

                            const autoOpenRaw = document.getElementById('autoopen-data')?.textContent || 'false';
                            const autoOpen = String(autoOpenRaw).trim() === 'true';
                            if (autoOpen && pages.length > 1) {
                                // si un select existe, l'ouvrir (focus) sinon fallback
                                if (select) { select.focus(); } else { openChooserFallback(); }
                            }
                        })();
                </script>
    </body>
    </html>
