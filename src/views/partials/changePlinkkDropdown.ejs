<%# Partial: reusable changePlinkk chooser (desktop + mobile) --%>
<% if (typeof pages !== 'undefined' && Array.isArray(pages) && pages.length > 1) { %>
  <% const hasSelection = (typeof plinkk !== 'undefined' && plinkk); %>
  <div class="ml-2 relative inline-block text-left">
    <button id="changePlinkkBtn" type="button" class="inline-flex items-center gap-2 px-3 py-2 text-sm rounded-md border text-white focus:outline-none <%= hasSelection ? 'bg-slate-800 border-slate-700' : 'bg-slate-800/40 border-slate-700/40 cursor-not-allowed' %>" <%= hasSelection ? '' : 'disabled aria-disabled="true" data-needs-selection="1"' %>>
      <span id="changePlinkkBtnLabel"><%= hasSelection && plinkk && plinkk.name ? plinkk.name : 'Veuillez sélectionner un plinkk' %></span>
      <svg class="text-slate-300" width="14" height="14" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.23 8.29a.75.75 0 01.02-1.08z" clip-rule="evenodd"/></svg>
    </button>
    <div id="changePlinkkDropdown" class="hidden absolute right-0 mt-2 w-72 rounded-md bg-slate-900 border border-slate-800 shadow-lg z-40">
      <div class="p-2">
        <input id="changePlinkkSearch" type="search" placeholder="Rechercher..." class="w-full px-3 py-2 rounded bg-slate-800 border border-slate-700 text-sm text-white focus:outline-none" />
      </div>
      <ul id="changePlinkkList" class="max-h-48 overflow-auto divide-y divide-slate-800 text-sm"></ul>
    </div>
  </div>

  <!-- Mobile variant -->
  <div class="ml-2 relative inline-block text-left sm:hidden">
    <button id="changePlinkkBtnMobile" type="button" class="inline-flex items-center gap-2 px-3 py-2 text-sm rounded-md border text-white focus:outline-none <%= hasSelection ? 'bg-slate-800 border-slate-700' : 'bg-slate-800/40 border-slate-700/40 cursor-not-allowed' %>" <%= hasSelection ? '' : 'disabled aria-disabled="true" data-needs-selection="1"' %>>
      <span id="changePlinkkBtnLabelMobile"><%= hasSelection && plinkk && plinkk.name ? plinkk.name : 'Veuillez sélectionner un plinkk' %></span>
      <svg class="text-slate-300" width="14" height="14" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.23 8.29a.75.75 0 01.02-1.08z" clip-rule="evenodd"/></svg>
    </button>
    <div id="changePlinkkDropdownMobile" class="hidden absolute right-0 mt-2 w-64 rounded-md bg-slate-900 border border-slate-800 shadow-lg z-40">
      <div class="p-2">
        <input id="changePlinkkSearchMobile" type="search" placeholder="Rechercher..." class="w-full px-3 py-2 rounded bg-slate-800 border border-slate-700 text-sm text-white focus:outline-none" />
      </div>
      <ul id="changePlinkkListMobile" class="max-h-48 overflow-auto divide-y divide-slate-800 text-sm"></ul>
    </div>
  </div>
<% } %>
<script>
// Show a small notice when the user was auto-redirected to the default plinkk
(function(){
  try {
    const params = new URLSearchParams(location.search);
    if (params.get('autoRedirect') === '1') {
        // create a small floating toast (non intrusive) instead of a full-width banner
        const toast = document.createElement('div');
        toast.className = 'fixed top-4 right-4 z-50 max-w-xs w-auto px-4 py-2 rounded-md text-sm bg-indigo-700 text-white shadow-lg flex items-center gap-3 transition-opacity duration-200';
        toast.setAttribute('role','status');
        toast.setAttribute('aria-live','polite');
        toast.innerHTML = '<div class="truncate">Vous avez été redirigé(e) vers votre plinkk par défaut.</div>';
        const closeBtn = document.createElement('button');
        closeBtn.className = 'ml-2 px-2 py-1 rounded bg-indigo-800/30 hover:bg-indigo-800 text-xs';
        closeBtn.setAttribute('aria-label','Fermer la notification');
        closeBtn.textContent = 'Fermer';
        closeBtn.addEventListener('click', () => { toast.remove(); });
        toast.appendChild(closeBtn);
        document.body.appendChild(toast);
        // auto-hide after 5s
        setTimeout(() => {
          try { toast.style.opacity = '0'; } catch (e) {}
          setTimeout(() => { try { toast.remove(); } catch (e) {} }, 300);
        }, 5000);
      // remove autoRedirect from URL
      params.delete('autoRedirect');
      const base = location.pathname + (params.toString() ? '?' + params.toString() : '') + location.hash;
      history.replaceState(null, '', base);
    }
  } catch (e) { /* ignore */ }
})();
</script>
