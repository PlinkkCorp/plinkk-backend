<%- include('../../partials/head.ejs', 
{   title: 'Tableau de bord - Administration' , 
    description: 'Tableau de bord d\'administration — actions rapides, statistiques et modération.' ,
    robots: 'noindex,nofollow' }) %>

<%- include('../../partials/header-dash.ejs', { user: user }) %>
<%- include('../../partials/admin-nav.ejs', { user: user }) %>

<% // safe fallbacks: totals or pendingThemes might be undefined depending on controller const
pendingCount=(typeof totals !=='undefined' && totals && totals.pendingThemes !=null) ?
totals.pendingThemes : (typeof pendingThemes !=='undefined' && pendingThemes ? pendingThemes.length :
0); const totalUsersCount=(typeof totals !=='undefined' && totals && totals.totalUsers !=null) ?
totals.totalUsers : users.length; const totalPublicCount=(typeof totals !=='undefined' && totals &&
totals.totalPublic !=null) ? totals.totalPublic : 0; const moderatorsCount=(typeof totals !=='undefined'
&& totals && totals.moderators !=null) ? totals.moderators : 0; const privateCount=(typeof totals
!=='undefined' && totals && totals.totalPrivate !=null) ? totals.totalPrivate : (Array.isArray(users) ?
users.filter(u=>
!u.isPublic).length : 0);
%>
<main class="max-w-7xl mx-auto p-4 space-y-5">
    <!-- Quick actions -->
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
            <h1 class="text-2xl font-bold tracking-tight">Administration</h1>
            <p class="text-xs text-slate-400">Tableau de bord d'administration — actions rapides,
                statistiques et modération.</p>
        </div>

    </div>

    <!-- Stats cards -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
        <div class="rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
            <p class="text-xs text-slate-400">Utilisateurs</p>
            <p class="text-xl font-semibold">
                <%= totalUsersCount %>
            </p>
        </div>
        <div class="rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
            <p class="text-xs text-slate-400">Thèmes en attente</p>
            <p class="text-xl font-semibold">
                <%= pendingCount %>
            </p>
        </div>
        <div class="rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
            <p class="text-xs text-slate-400">Publics</p>
            <p class="text-xl font-semibold">
                <%= totalPublicCount %>
            </p>
        </div>
        <div class="rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
            <p class="text-xs text-slate-400">Privés</p>
            <p class="text-xl font-semibold">
                <%= privateCount %>
            </p>
        </div>
    </div>

    <!-- Main grid: Users + Pending Themes -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-4">
        <!-- Users list (2/3) -->
        <section class="lg:col-span-2 rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
            <div class="flex items-center justify-between mb-3">
                <h2 class="font-medium">Utilisateurs</h2>
                <div class="text-xs text-slate-400">Total: <span id="totalCount">
                        <%= users.length %>
                    </span></div>
            </div>

            <div class="mb-3 flex gap-2 flex-wrap">
                <input id="searchInput" type="text" placeholder="Rechercher (nom, @id, email)"
                    class="flex-1 rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm" />
                    <select id="roleFilter"
                    class="rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm">
                    <option value="all">Tous rôles</option>
                </select>
                <select id="visibilityFilter"
                    class="rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm">
                    <option value="all">Toutes Visibilités</option>
                    <option value="public">Public</option>
                    <option value="private">Privé</option>
                </select>
                <select id="sortSelect"
                    class="rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm">
                    <option value="date-desc">Plus récents</option>
                    <option value="date-asc">Plus anciens</option>
                    <option value="name-asc">Nom (A→Z)</option>
                    <option value="name-desc">Nom (Z→A)</option>
                </select>
                <button id="resetBtn"
                    class="rounded-md bg-slate-800/60 border border-slate-700 px-3 py-2 text-sm">Réinitialiser</button>
            </div>

            <% if (users.length===0) { %>
                <p class="text-sm text-slate-400">Aucun utilisateur pour le moment.</p>
                <% } else { %>
                    <ul id="usersGrid" class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                        <% users.forEach(u=> { 
                            const plCount = Array.isArray(u.plinkks) ? u.plinkks.length : 0;
                            const plActive = Array.isArray(u.plinkks) ? u.plinkks.filter(p=>p.isActive).length : 0;
                            const uViews = typeof u.views === 'number' ? u.views : 0;
                            const mustChange = !!u.mustChangePassword;
                        %>
                            <li class="relative rounded border border-slate-800 p-3 bg-slate-900 text-sm overflow-visible"
                                data-name="<%- (u.userName||'').toLowerCase() %>"
                                data-id="<%- (u.id||'').toLowerCase() %>"
                                data-role="<%- (u.role && (u.role.id || u.role.name)) ? (u.role.id || u.role.name) : 'USER' %>"
                                data-role-name="<%- (u.role && (u.role.name || u.role.id)) ? (u.role.name || u.role.id) : 'USER' %>"
                                data-visible="<%- u.isPublic ? 'public' : 'private' %>"
                                data-email-public="<%- u.publicEmail ? '1' : '0' %>"
                                data-twofa="<%- (u.twoFactorEnabled || (u.twoFactorSecret && u.twoFactorSecret !== '')) ? '1' : '0' %>"
                                data-views="<%- uViews %>"
                                data-plinkks-count="<%- plCount %>"
                                data-plinkks-active="<%- plActive %>"
                                data-must-change="<%- mustChange ? '1' : '0' %>"
                                data-created="<%- +new Date(u.createdAt) %>"
                                data-search="<%- (u.userName+' '+u.id+' '+(u.publicEmail||u.email||'')).toLowerCase() %>">
                                <div class="flex items-start gap-3">
                                    <div
                                        class="w-10 h-10 rounded-full bg-indigo-700/60 flex items-center justify-center text-white font-semibold">
                                        <%= (u.userName||u.id||'?').charAt(0).toUpperCase() %>
                                    </div>
                                    <div class="min-w-0">
                                        <div class="flex items-center gap-2">
                                            <div class="font-semibold truncate" title="<%= u.userName || u.id %>">
                                                <%= u.userName %>
                                            </div>
                                            <span
                                                class="text-xs px-2 py-0.5 rounded bg-slate-800/80 border border-slate-700 text-slate-300 max-w-[8rem] truncate inline-block" title="@<%= u.id %>">@<%= u.id %>
                                            </span>
                                        </div>
                                        <% /* Références Plinkk */ %>
                                        <% if (Array.isArray(u.plinkks) && u.plinkks.length > 0) { 
                                                    const def = u.plinkks.find(p=>p.isDefault) || null;
                                                    const others = u.plinkks.filter(p=>!p.isDefault);
                                        %>
                                            <div class="mt-1 flex flex-wrap items-center gap-1">
                                                <% if (def) { %>
                                                    <a href="/<%= u.id %>" class="inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-[11px] bg-indigo-600/20 border border-indigo-500/40 text-indigo-300 hover:bg-indigo-600/30" title="Plinkk: <%= def.name || def.slug %> (Par défaut)">
                                                        <span>Par défaut</span>
                                                    </a>
                                                <% } %>
                                                <% others.forEach(p => { %>
                                                    <a href="/<%= u.id %>/<%= p.slug %>" class="inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-[11px] bg-slate-800/70 border border-slate-700 text-slate-200 hover:bg-slate-800" title="Plinkk: <%- p.name || p.slug %>">
                                                        <span><%- p.name || p.slug %></span>
                                                    </a>
                                                <% }) %>
                                            </div>
                                        <% } %>
                                        <% const isEmailPublic=Boolean(u.publicEmail); %>
                                            <% const publicEmail=u.publicEmail || u.email; %>
                                                <% const canReveal=(user.role && (user.role.id==='ADMIN' ||
                                                    user.role.id==='DEVELOPER' || user.role.id==='MODERATOR'
                                                    )); %>
                                                    <% if (isEmailPublic) { %>
                                                        <span class="text-xs text-slate-400 truncate">
                                                            <%= publicEmail %>
                                                        </span>
                                                        <% } else { %>
                                                            <span
                                                                class="emailContainer inline-flex items-center gap-2 text-xs">
                                                                <span
                                                                    class="text-xs text-slate-500 italic privateEmailLabel" title="<%= u.email %>">Email
                                                                    privé</span>
                                                                <% if (canReveal) { %>
                                                                    <span
                                                                        class="privateEmailWrap ml-3 inline-flex items-center gap-2 text-xs">
                                                                        <button type="button"
                                                                            class="revealEmailBtn inline-flex items-center gap-2 px-2 py-0.5 rounded-md bg-indigo-600/85 hover:bg-indigo-500 text-white text-xs focus:outline-none focus:ring-2 focus:ring-indigo-400"
                                                                            aria-label="Afficher l'email">
                                                                            <svg xmlns="http://www.w3.org/2000/svg"
                                                                                viewBox="0 0 24 24"
                                                                                fill="none"
                                                                                stroke="currentColor"
                                                                                stroke-width="1.5"
                                                                                class="h-3 w-3 text-white">
                                                                                <path
                                                                                    stroke-linecap="round"
                                                                                    stroke-linejoin="round"
                                                                                    d="M3 8.5v7A2.5 2.5 0 0 0 5.5 18h13A2.5 2.5 0 0 0 21 15.5v-7A2.5 2.5 0 0 0 18.5 6h-13A2.5 2.5 0 0 0 3 8.5z">
                                                                                </path>
                                                                                <path
                                                                                    stroke-linecap="round"
                                                                                    stroke-linejoin="round"
                                                                                    d="M21 8.5l-9 5-9-5" />
                                                                            </svg>
                                                                            <span>Afficher</span>
                                                                        </button>
                                                                        <span class="emailValue hidden">
                                                                            <%= u.email %>
                                                                        </span>
                                                                    </span>
                                                                    <% } %>
                                                            </span>
                                                            <% } %>
                                    </div>
                                    <div class="ml-auto flex items-center gap-2 text-xs text-slate-300">
                                        <span class="roleDisplay inline-flex items-center px-2 py-0.5 rounded bg-slate-800/80 border border-slate-700">
                                            <%= (typeof u.role !== 'undefined' && u.role) ? (u.role.name || u.role.id) : 'USER' %>
                                        </span>
                                        <button type="button" class="userManageBtn inline-flex items-center gap-1 px-2 py-1 rounded-md bg-slate-800/70 border border-slate-700 text-slate-200 hover:bg-slate-800" title="Gérer cet utilisateur">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-4 w-4"><path d="M12 6.75a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Zm0 6a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Zm0 6a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Z"/></svg>
                                        </button>
                                    </div>
                                </div>
                            </li>
                            <% }) %>
                    </ul>
                    <% } %>
        </section>

        <!-- Pending themes (1/3) -->
        <aside class="rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
            <div class="flex items-center justify-between mb-2">
                <h2 class="font-medium">Thèmes en attente</h2>
                <a href="/dashboard/admin/themes"
                    class="text-xs px-2 py-1 rounded bg-slate-800 border border-slate-700 text-white">Voir
                    tout</a>
            </div>
            <% if (typeof pendingThemes==='undefined' || !pendingThemes || pendingThemes.length===0) {
                %>
                <p class="text-sm text-slate-400">Aucun thème en attente.</p>
                <% } else { %>
                    <ul class="space-y-2">
                        <% pendingThemes.forEach(t=> { %>
                            <li
                                class="rounded border border-slate-800 p-2 flex items-center gap-2 bg-slate-900 text-sm">
                                <div class="w-12 h-12 rounded overflow-hidden previewMini"></div>
                                <div class="min-w-0 flex-1">
                                    <div class="font-semibold truncate">
                                        <%= t.name %>
                                    </div>
                                    <div class="text-xs text-slate-400 truncate">
                                        <%= t.description || '' %>
                                    </div>
                                    <div class="text-[11px] text-slate-500 mt-1">Par @<%= t.authorId %>
                                    </div>
                                </div>
                                <div class="flex flex-col gap-2">
                                    <a class="px-2 py-1 rounded bg-indigo-600 text-white text-xs"
                                        href="/dashboard/admin/themes/validate/<%= t.id %>">Valider</a>
                                    <a class="px-2 py-1 rounded bg-slate-800 border border-slate-700 text-white text-xs"
                                        href="/dashboard/admin/themes/<%= t.id %>">Détails</a>
                                </div>
                            </li>
                            <% }) %>
                    </ul>
                    <% } %>
        </aside>
    </div>

                        
                                        <!-- Modal preview réutilisable (admin) -->
                                        <div id="plinkkPreviewModalAdmin" class="fixed inset-0 hidden z-50 items-center justify-center">
                                            <div class="absolute inset-0 bg-black/60" data-close></div>
                                            <div class="relative w-full max-w-4xl h-[80vh] bg-slate-900 border border-slate-700 rounded-lg overflow-hidden">
                                                <div class="flex items-center justify-between p-2 border-b border-slate-800 bg-slate-900/95">
                                                    <div id="plinkkPreviewTitleAdmin" class="text-sm text-white font-semibold">Prévisualisation</div>
                                                    <button id="closePlinkkPreviewAdmin" class="px-3 py-1 rounded bg-slate-800 text-xs">Fermer</button>
                                                </div>
                                                <iframe id="plinkkPreviewFrameAdmin" src="about:blank" class="w-full h-full bg-white"></iframe>
                                            </div>
                                        </div>
                                        <script>
                                            (function(){
                                                const modal = document.getElementById('plinkkPreviewModalAdmin');
                                                const frame = document.getElementById('plinkkPreviewFrameAdmin');
                                                const title = document.getElementById('plinkkPreviewTitleAdmin');
                                                const closeBtn = document.getElementById('closePlinkkPreviewAdmin');
                                                function openModal(url,label){
                                                    const sep = url.includes('?') ? '&' : '?';
                                                    frame.src = url+sep+'preview=1';
                                                    title.textContent = label||'Prévisualisation';
                                                    modal.classList.remove('hidden');
                                                    modal.classList.add('flex');
                                                    // animate backdrop and panel
                                                    const backdrop = modal.querySelector('[data-close]');
                                                    const panel = modal.querySelector('.relative.w-full.max-w-4xl');
                                                    backdrop?.classList.remove('animate-backdrop-out');
                                                    backdrop?.classList.add('animate-backdrop-in');
                                                    panel?.classList.remove('animate-pop-in'); // reset
                                                    void panel?.offsetWidth;
                                                    panel?.classList.add('animate-pop-in');
                                                    document.body.style.overflow='hidden';
                                                }
                                                function closeModal(){
                                                    const backdrop = modal.querySelector('[data-close]');
                                                    const panel = modal.querySelector('.relative.w-full.max-w-4xl');
                                                    backdrop?.classList.remove('animate-backdrop-in');
                                                    backdrop?.classList.add('animate-backdrop-out');
                                                    // fade out quickly
                                                    panel?.classList.remove('animate-pop-in');
                                                    panel?.classList.add('animate-fade-in'); // reuse subtle fade
                                                    setTimeout(()=>{
                                                        frame.src='about:blank';
                                                        modal.classList.add('hidden'); modal.classList.remove('flex');
                                                        document.body.style.overflow='';
                                                    }, 160);
                                                }
                                                closeBtn?.addEventListener('click', closeModal); modal?.querySelector('[data-close]')?.addEventListener('click', closeModal);
                                                document.addEventListener('click', (ev)=>{ const a = ev.target.closest && ev.target.closest('a.plinkk-link'); if (!a) return; ev.preventDefault(); const href=a.getAttribute('href')||''; const label = a.textContent && a.textContent.trim() ? a.textContent.trim() : href; openModal(href,label); });
                                                document.addEventListener('keydown',(e)=>{ if(e.key==='Escape' && !modal.classList.contains('hidden')) closeModal(); });
                                            })();
                                        </script>

</main>

<!-- Modale de gestion utilisateur -->
<div id="userManageModal" class="fixed inset-0 hidden z-[2147483600] items-center justify-center transition-opacity duration-200 ease-out">
    <div class="absolute inset-0 bg-black/60 opacity-0 transition-opacity duration-200" data-close></div>
    <div class="relative w-full max-w-3xl bg-slate-900 border border-slate-700 rounded-lg shadow-2xl translate-y-2 opacity-0 transition-all duration-200 ease-out">
        <div class="flex items-center justify-between p-3 border-b border-slate-800">
            <div class="min-w-0 flex-1">
                <div id="umUserName" class="text-white font-semibold block w-full truncate">Utilisateur</div>
                <div class="text-xs text-slate-400 truncate">@<span id="umUserId">id</span></div>
            </div>
            <button id="umClose" class="px-3 py-1 text-xs rounded bg-slate-800 text-white">Fermer</button>
        </div>
        <div class="p-4 grid grid-cols-1 md:grid-cols-2 gap-4">
            <!-- Colonne gauche: Compte -->
            <div class="space-y-4">
                <!-- Rôle -->
                <div>
                    <label class="block text-xs text-slate-400 mb-1" data-tip="Définit les permissions et accès de l'utilisateur.">Rôle</label>
                    <select id="umRole" class="w-full rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm"></select>
                </div>

                <!-- Stats compte -->
                <div class="rounded-md border border-slate-800/70 bg-slate-900/50 p-3">
                    <div class="text-xs text-slate-400 mb-2">Statistiques du compte</div>
                    <div class="grid grid-cols-3 gap-2 text-center">
                        <div class="rounded bg-slate-800/50 py-2">
                            <div class="text-[10px] text-slate-400">Plinkks</div>
                            <div id="umStatPlCount" class="text-base font-semibold text-white">0</div>
                        </div>
                        <div class="rounded bg-slate-800/50 py-2">
                            <div class="text-[10px] text-slate-400">Actifs</div>
                            <div id="umStatPlActive" class="text-base font-semibold text-white">0</div>
                        </div>
                    </div>
                </div>

                <!-- Sécurité compte -->
                <div class="rounded-md border border-slate-800/70 bg-slate-900/50 p-3">
                    <div class="text-xs text-slate-400 mb-2">Sécurité</div>
                    <div class="flex flex-col gap-2">
                        <label class="inline-flex items-center gap-2 text-sm text-slate-200" data-tip="Oblige l’utilisateur à définir un nouveau mot de passe à sa prochaine connexion.">
                            <input id="umForcePwd" type="checkbox" class="rounded border-slate-700 bg-slate-900"> Forcer le reset du mot de passe
                            <svg id="umForcePwdSpin" class="plinkk-spinner hidden" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true"><circle cx="12" cy="12" r="10" opacity="0.2"/><path d="M22 12a10 10 0 0 1-10 10"/></svg>
                        </label>
                        <button id="umDisable2fa" class="px-3 py-1.5 w-fit rounded bg-amber-600/90 text-white text-sm disabled:opacity-60 has-spinner" data-tip="Désactive l’authentification à deux facteurs pour cet utilisateur">
                            <svg class="plinkk-spinner hidden" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true"><circle cx="12" cy="12" r="10" opacity="0.2"/><path d="M22 12a10 10 0 0 1-10 10"/></svg>
                            <span>Désactiver la 2FA</span>
                        </button>
                    </div>
                </div>

                <!-- Modération: Ban par email -->
                <div class="rounded-md border border-slate-800/70 bg-slate-900/50 p-3">
                    <div class="text-xs text-slate-400 mb-2">Modération</div>
                    <div id="umBanState" class="text-xs text-slate-300 hidden"></div>
                    <div id="umBanForm" class="grid grid-cols-1 sm:grid-cols-3 gap-2">
                        <div class="sm:col-span-2">
                            <label class="block text-xs text-slate-400 mb-1">Raison</label>
                            <input id="umBanReason" type="text" maxlength="500" class="w-full rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm" placeholder="ex: spam massif" />
                        </div>
                        <div>
                            <label class="block text-xs text-slate-400 mb-1" data-tip="Durée en minutes; -1 pour permanent">Durée (min)</label>
                            <input id="umBanMinutes" type="number" step="1" min="-1" class="w-full rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm" placeholder="-1 (permanent)" />
                        </div>
                        <label class="inline-flex items-center gap-2 text-xs text-slate-300 sm:col-span-3">
                            <input id="umBanDeletePlinkk" type="checkbox" class="rounded border-slate-700 bg-slate-900"> Supprimer les Plinkks si applicable
                        </label>
                        <div class="sm:col-span-3 flex gap-2">
                            <button id="umBanApply" class="px-3 py-1.5 rounded bg-rose-700 text-white text-xs has-spinner">
                                <svg class="plinkk-spinner hidden" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true"><circle cx="12" cy="12" r="10" opacity="0.2"/><path d="M22 12a10 10 0 0 1-10 10"/></svg>
                                <span>Bannir</span>
                            </button>
                            <button id="umBanRevoke" class="px-3 py-1.5 rounded bg-slate-800 border border-slate-700 text-white text-xs hidden has-spinner">
                                <svg class="plinkk-spinner hidden" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true"><circle cx="12" cy="12" r="10" opacity="0.2"/><path d="M22 12a10 10 0 0 1-10 10"/></svg>
                                <span>Révoquer le ban</span>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Zone dangereuse: suppression compte -->
                <div class="rounded-md border border-slate-800/70 bg-slate-900/50 p-3">
                    <div class="text-xs text-rose-300 mb-2">Zone dangereuse</div>
                    <button id="umDelete" class="px-3 py-1.5 rounded bg-rose-700 text-white text-sm has-spinner" data-tip="Supprimer définitivement le compte (irréversible)">
                        <svg class="plinkk-spinner hidden" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true"><circle cx="12" cy="12" r="10" opacity="0.2"/><path d="M22 12a10 10 0 0 1-10 10"/></svg>
                        <span>Supprimer le compte</span>
                    </button>
                </div>
            </div>

            <!-- Colonne droite: Plinkk sélectionné -->
            <div class="space-y-4">
                <!-- Sélecteur + slug -->
                <div class="rounded-md border border-slate-800/70 bg-slate-900/50 p-3">
                    <div class="flex items-center justify-between mb-2">
                        <div class="text-xs text-slate-400">Plinkks de l’utilisateur</div>
                        <div id="umPlMeta" class="text-[11px] text-slate-500"></div>
                    </div>
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                        <div>
                            <label class="block text-xs text-slate-400 mb-1" data-tip="Choisissez la page Plinkk à modifier">Sélection</label>
                            <select id="umPlSelect" class="w-full rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm"></select>
                        </div>
                        <div>
                            <label class="block text-xs text-slate-400 mb-1" data-tip="Le slug détermine l’URL de la page (ex: /@id/slug)">Slug</label>
                            <input id="umPlSlug" type="text" class="w-full rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm" placeholder="ex: portfolio" />
                        </div>
                    </div>
                    <div class="mt-3 flex items-center justify-between gap-2 flex-wrap">
                        <div class="flex gap-2 flex-wrap">
                            <a id="umPlPreview" target="_blank" class="inline-flex items-center gap-2 px-3 py-1.5 rounded bg-slate-800/80 border border-slate-700 text-white text-sm hover:bg-slate-800" data-tip="Ouvrir un aperçu dans un nouvel onglet">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-4 w-4 opacity-90"><path d="M15.75 2.25a.75.75 0 0 0-.75.75v3a.75.75 0 0 0 1.28.53l1.22-1.22 3.22 3.22a.75.75 0 1 0 1.06-1.06l-3.22-3.22 1.22-1.22A.75.75 0 0 0 19.5 1.5h-3.75Z"/><path d="M3.75 6A2.25 2.25 0 0 1 6 3.75h6a.75.75 0 0 1 0 1.5H6A.75.75 0 0 0 5.25 6v12A.75.75 0 0 0 6 18.75h12a.75.75 0 0 0 .75-.75v-6a.75.75 0 0 1 1.5 0v6A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6Z"/></svg>
                                <span>Prévisualiser</span>
                            </a>
                            <a id="umViewProfile" target="_blank" class="inline-flex items-center gap-2 px-3 py-1.5 rounded bg-slate-800/80 border border-slate-700 text-white text-sm hover:bg-slate-800" data-tip="Ouvrir le profil dans un nouvel onglet">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-4 w-4 opacity-90"><path d="M12 2.25a5.25 5.25 0 1 1 0 10.5 5.25 5.25 0 0 1 0-10.5Z"/><path d="M2.25 20.25a9.75 9.75 0 0 1 19.5 0v.75H2.25v-.75Z"/></svg>
                                <span>Voir le profil</span>
                            </a>
                            <button id="umCopyLink" class="inline-flex items-center gap-2 px-3 py-1.5 rounded bg-slate-800/80 border border-slate-700 text-white text-sm hover:bg-slate-800" data-tip="Copier l’URL du profil">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-4 w-4 opacity-90"><path d="M9 7.5A2.25 2.25 0 0 1 11.25 5h3A2.25 2.25 0 0 1 16.5 7.25v7.5A2.25 2.25 0 0 1 14.25 17h-3A2.25 2.25 0 0 1 9 14.75V7.5Zm-3 3A2.25 2.25 0 0 1 8.25 8.25H9v1.5h-.75a.75.75 0 0 0-.75.75v6A.75.75 0 0 0 8.25 18H12v1.5H8.25A2.25 2.25 0 0 1 6 17.25v-6Z"/></svg>
                                <span>Copier le lien</span>
                            </button>
                        </div>
                        <button id="umPlSave" class="inline-flex items-center gap-2 px-3 py-1.5 rounded bg-indigo-600 hover:bg-indigo-500 text-white text-sm has-spinner" data-tip="Enregistrer les modifications de la page">
                            <svg class="plinkk-spinner hidden" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true"><circle cx="12" cy="12" r="10" opacity="0.2"/><path d="M22 12a10 10 0 0 1-10 10"/></svg>
                            <span>Enregistrer</span>
                        </button>
                    </div>
                </div>

                <!-- Stats Plinkk + Toggles -->
                <div class="rounded-md border border-slate-800/70 bg-slate-900/50 p-3">
                    <div class="grid grid-cols-2 sm:grid-cols-4 gap-2">
                        <label class="inline-flex items-center gap-2 text-sm text-slate-200" data-tip="Rend la page visible publiquement">
                            <input id="umPlPublic" type="checkbox" class="rounded border-slate-700 bg-slate-900"> Public
                        </label>
                        <label class="inline-flex items-center gap-2 text-sm text-slate-200" data-tip="Désactive l’accès si décoché (la page reste conservée)">
                            <input id="umPlActive" type="checkbox" class="rounded border-slate-700 bg-slate-900"> Actif
                        </label>
                        <label class="inline-flex items-center gap-2 text-sm text-slate-200 whitespace-nowrap" data-tip="Définit cette page comme page principale de l’utilisateur">
                            <input id="umPlDefault" type="checkbox" class="rounded border-slate-700 bg-slate-900"> <span class="whitespace-nowrap">Par défaut</span>
                        </label>
                        <label class="inline-flex items-center gap-2 text-sm text-slate-200" data-tip="Affiche l’email de ce compte sur cette page uniquement">
                            <input id="umPlEmailVisible" type="checkbox" class="rounded border-slate-700 bg-slate-900"> Email visible
                        </label>
                    </div>
                    <div class="mt-3 grid grid-cols-3 gap-2 text-center">
                        <div class="rounded bg-slate-800/50 py-2">
                            <div class="text-[10px] text-slate-400">Vues plinkk</div>
                            <div id="umPlViews" class="text-base font-semibold text-white">0</div>
                        </div>
                    </div>
                    <div class="mt-3 flex justify-end">
                        <button id="umPlDelete" class="inline-flex items-center gap-2 px-3 py-1.5 rounded bg-rose-700 hover:bg-rose-600 text-white text-xs has-spinner" data-tip="Supprimer définitivement cette page">
                            <svg class="plinkk-spinner hidden" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true"><circle cx="12" cy="12" r="10" opacity="0.2"/><path d="M22 12a10 10 0 0 1-10 10"/></svg>
                            <span>Supprimer</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    (function () {
        const $ = (s, r = document) => r.querySelector(s);
        const $$ = (s, r = document) => Array.from(r.querySelectorAll(s));
        const search = $('#searchInput');
        const sort = $('#sortSelect');
        const roleFilter = $('#roleFilter');
        const visFilter = $('#visibilityFilter');
        const grid = $('#usersGrid');
        const resetBtn = $('#resetBtn');

        function applyFilter() {
            if (!grid) return;
            const q = (search?.value || '').trim().toLowerCase();
            const rf = (roleFilter?.value || 'all');
            const vf = (visFilter?.value || 'all');
            const items = Array.from(grid.children);
            let visible = 0;
            items.forEach(li => {
                const hay = (li.dataset.search || '');
                const role = li.dataset.role || 'USER';
                const vis = li.dataset.visible || 'private';
                const okQ = !q || hay.includes(q);
                const okR = rf === 'all' || role === rf;
                const okV = vf === 'all' || vis === vf;
                const show = okQ && okR && okV;
                li.style.display = show ? '' : 'none';
                if (show) visible++;
            });
            const totalCount = document.getElementById('totalCount'); if (totalCount) totalCount.textContent = String(visible);
        }
        function applySort() {
            if (!grid) return;
            const val = sort?.value || 'date-desc';
            const arr = Array.from(grid.children);
            arr.sort((a, b) => {
                if (val === 'name-asc') return a.dataset.name.localeCompare(b.dataset.name, 'fr');
                if (val === 'name-desc') return b.dataset.name.localeCompare(a.dataset.name, 'fr');
                if (val === 'date-asc') return Number(a.dataset.created) - Number(b.dataset.created);
                return Number(b.dataset.created) - Number(a.dataset.created);
            });
            arr.forEach(n => grid.appendChild(n));
        }

        [search, roleFilter, visFilter].forEach(el => el?.addEventListener('input', applyFilter));
        sort?.addEventListener('change', () => { applySort(); applyFilter(); });
        resetBtn?.addEventListener('click', () => { if (search) search.value = ''; if (sort) sort.value = 'date-desc'; if (roleFilter) roleFilter.value = 'all'; if (visFilter) visFilter.value = 'all'; applySort(); applyFilter(); });

        // render mini previews for pending themes
        (function renderPendingPreviews() {
            document.querySelectorAll('aside .previewMini').forEach(el => {
                const li = el.closest('li');
                // try to read data-json if available
                const raw = li?.getAttribute('data-json') || '';
                let parsed = {};
                try { parsed = raw ? JSON.parse(raw) : {}; } catch (e) { }
                let c = { bg: '#111827', button: '#4f46e5', hover: '#22c55e' };
                if (parsed.light) c = { bg: parsed.light.bg || c.bg, button: parsed.light.button || c.button, hover: parsed.light.hover || c.hover };
                el.innerHTML = `<div style="width:100%;height:100%;background:${c.bg};display:flex;flex-direction:column;justify-content:center;gap:6px;padding:6px">` +
                    `<div style="height:28px;background:${c.button};border-radius:6px;width:70%"></div>` +
                    `<div style="height:20px;background:${c.hover};border-radius:6px;width:50%"></div>` +
                    `</div>`;
            });
        })();
    })();
</script>

</body>

<script src="/public/js/pagination.js"></script>
<script>
    (function () {
        const $ = (s, r = document) => r.querySelector(s);
        const $$ = (s, r = document) => Array.from(r.querySelectorAll(s));
        const search = $('#searchInput');
        const sort = $('#sortSelect');
        const roleFilter = $('#roleFilter');
        const visFilter = $('#visibilityFilter');
        const grid = $('#usersGrid');
        const totalCount = $('#totalCount');
        const visibleCount = $('#visibleCount');
        const resetBtn = $('#resetBtn');

        if (!grid || !window.__PlinkkPaginator) return;

        const paginator = window.__PlinkkPaginator.createPaginator(grid, {
            pageSize: 21, selectors: { items: 'li' }, onRender: (pageItems, meta) => {
                // mettre à jour visibleCount (nombre total match)
                if (visibleCount) visibleCount.textContent = String(meta.totalItems);
            }
        });

        // initial total count
        if (totalCount) totalCount.textContent = String(paginator.getAll().length);

        function applyFilter() {
            const q = (search?.value || '').trim().toLowerCase();
            const rf = (roleFilter?.value || 'all');
            const vf = (visFilter?.value || 'all');
            const all = paginator.getAll();
            const filtered = all.filter(li => {
                const hay = (li.dataset.search || '').toString();
                const role = (li.dataset.role || 'USER');
                const vis = (li.dataset.visible || 'private');
                const okQ = !q || hay.includes(q);
                const okR = rf === 'all' || role === rf;
                const okV = vf === 'all' || vis === vf;
                return okQ && okR && okV;
            });
            paginator.setFiltered(filtered);
        }

        function applySort() {
            const val = sort?.value;
            const collator = new Intl.Collator('fr', { sensitivity: 'base' });
            const getKey = (li, key) => (li.dataset[key] || '').toString();
            paginator.sort((a, b) => {
                switch (val) {
                    case 'date-desc': return (Number(getKey(b, 'created')) - Number(getKey(a, 'created')));
                    case 'date-asc': return (Number(getKey(a, 'created')) - Number(getKey(b, 'created')));
                    case 'name-asc': return collator.compare(getKey(a, 'name'), getKey(b, 'name'));
                    case 'name-desc': return collator.compare(getKey(b, 'name'), getKey(a, 'name'));
                    case 'id-asc': return collator.compare(getKey(a, 'id'), getKey(b, 'id'));
                    case 'id-desc': return collator.compare(getKey(b, 'id'), getKey(a, 'id'));
                    default: return 0;
                }
            });
        }

        search?.addEventListener('input', () => applyFilter());
        sort?.addEventListener('change', () => applySort());
        roleFilter?.addEventListener('change', () => applyFilter());
        visFilter?.addEventListener('change', () => applyFilter());
        resetBtn?.addEventListener('click', () => {
            if (search) search.value = '';
            if (sort) sort.value = 'date-desc';
            if (roleFilter) roleFilter.value = 'all';
            if (visFilter) visFilter.value = 'all';
            applySort();
            applyFilter();
        });

        // Animation des boutons copier
        const style = document.createElement('style');
        style.textContent = `
            .copy-anim { position: relative; }
            .copy-anim::after {
            content: 'Copié !';
            position: absolute; left: 50%; top: -10px; transform: translate(-50%, -100%);
            background: rgba(16,185,129,.95); color: #fff; font-size: 10px; border-radius: 6px; padding: 4px 6px;
            opacity: 0; pointer-events: none; transition: opacity .25s ease, transform .25s ease;
            box-shadow: 0 8px 24px rgba(16,185,129,.35);
            }
            .copy-anim.copied::after { opacity: 1; transform: translate(-50%, -120%); }
            .copy-anim.copied { box-shadow: 0 0 0 1px rgba(16,185,129,.35) inset; }
            `;
        document.head.appendChild(style);

        // Toast notification styles
        const toastStyle = document.createElement('style');
        toastStyle.textContent = `
            .plinkk-toast-container { position: fixed; top: 1rem; right: 1rem; z-index: 2147483200; display:flex; flex-direction:column; gap:8px; }
            .plinkk-toast { background: rgba(17,24,39,0.95); color: #fff; padding: 8px 12px; border-radius: 8px; box-shadow: 0 8px 24px rgba(2,6,23,.6); font-size: 13px; opacity:0; transform: translateY(-6px); transition: opacity .18s ease, transform .18s ease; }
            .plinkk-toast.show { opacity:1; transform: translateY(0); }
            `;
        document.head.appendChild(toastStyle);

        // Tooltips + spinner styles
        const uxStyle = document.createElement('style');
        uxStyle.textContent = `
            [data-tip]{ position: relative; cursor: help; }
            [data-tip]::after{ content: attr(data-tip); position: absolute; left: 0; top: 100%; transform: translateY(6px); background: rgba(2,6,23,0.96); color: #e5e7eb; border:1px solid #334155; font-size: 11px; line-height:1.2; padding: 6px 8px; border-radius: 6px; white-space: nowrap; opacity: 0; pointer-events: none; transition: opacity .15s ease; z-index: 50; }
            [data-tip]:hover::after{ opacity: 1; }
            .has-spinner{ position: relative; }
            .has-spinner .plinkk-spinner{ width: 14px; height: 14px; margin-right: 6px; animation: plk-spin 1s linear infinite; }
            .plinkk-spinner{ width: 14px; height: 14px; animation: plk-spin 1s linear infinite; opacity:.9 }
            @keyframes plk-spin { from{ transform: rotate(0deg);} to{ transform: rotate(360deg);} }
            `;
        document.head.appendChild(uxStyle);

        // Ensure toast container exists
        function getToastContainer() {
            let c = document.querySelector('.plinkk-toast-container');
            if (!c) { c = document.createElement('div'); c.className = 'plinkk-toast-container'; document.body.appendChild(c); }
            return c;
        }

        function showToast(message, ms = 2000) {
            try {
                const c = getToastContainer();
                const t = document.createElement('div');
                t.className = 'plinkk-toast';
                t.textContent = message;
                c.appendChild(t);
                // force reflow then show
                void t.offsetWidth;
                t.classList.add('show');
                setTimeout(() => { t.classList.remove('show'); setTimeout(() => t.remove(), 180); }, ms);
            } catch (e) { /* ignore */ }
        }

        // Confirm with typed input helper (used by delete flows)
        function confirmWithInput(displayName, userId) {
            return new Promise(resolve => {
                const overlay = document.createElement('div');
                // Utiliser un z-index supérieur à la modale utilisateur (z-[2147483600])
                overlay.className = 'fixed inset-0 z-[2147483800] flex items-center justify-center bg-black/50';
                overlay.innerHTML = `
                    <div class="w-full max-w-md mx-4 bg-slate-900 border border-slate-700 rounded-md p-4 text-sm">
                        <div class="mb-3">Pour confirmer la suppression du compte "<strong>${displayName}</strong>" (@${userId}), tapez <strong>${userId}</strong> ci‑dessous :</div>
                        <input type="text" class="w-full mb-3 px-3 py-2 rounded bg-slate-800 border border-slate-700 text-sm" aria-label="Confirmation input" />
                        <div class="flex justify-end gap-2">
                        <button class="cancel px-3 py-1.5 rounded-md bg-slate-700 text-sm">Annuler</button>
                        <button class="ok px-3 py-1.5 rounded-md bg-red-600 text-white text-sm">Supprimer</button>
                        </div>
                    </div>`;
                const input = overlay.querySelector('input');
                const btnOk = overlay.querySelector('.ok');
                const btnCancel = overlay.querySelector('.cancel');

                document.body.appendChild(overlay);
                input.focus();

                function onKey(ev){
                    if (ev.key === 'Enter') { ev.preventDefault(); btnOk.click(); }
                    if (ev.key === 'Escape') { ev.preventDefault(); btnCancel.click(); }
                    if (ev.key === 'Echap') { ev.preventDefault(); btnCancel.click(); }
                }

                const cleanup = (res) => {
                    document.removeEventListener('keydown', onKey);
                    overlay.remove();
                    resolve(res);
                };

                btnCancel.addEventListener('click', () => cleanup(false));
                overlay.addEventListener('click', (ev) => { if (ev.target === overlay) cleanup(false); });
                btnOk.addEventListener('click', () => cleanup((input.value || '').trim() === String(userId)));
                input.addEventListener('keydown', (ev) => {
                    // keep behavior local too; it will trigger onKey as well
                    if (ev.key === 'Enter') { ev.preventDefault(); btnOk.click(); }
                    if (ev.key === 'Escape') { ev.preventDefault(); btnCancel.click(); }
                });
                // attach document-level key handler for Enter/Escape
                document.addEventListener('keydown', onKey);
            });
        }

        // Boîte de dialogue simple (Oui/Non) — utilisation: suppression de Plinkk
        function confirmSimple(message = 'Confirmer ?', { confirmText = 'Confirmer', cancelText = 'Annuler' } = {}) {
            return new Promise(resolve => {
                const overlay = document.createElement('div');
                overlay.className = 'fixed inset-0 z-[2147483800] flex items-center justify-center bg-black/50';
                overlay.innerHTML = `
                    <div class="w-full max-w-md mx-4 bg-slate-900 border border-slate-700 rounded-md p-4 text-sm">
                        <div class="mb-3 text-slate-200">${message}</div>
                        <div class="flex justify-end gap-2">
                            <button class="cancel px-3 py-1.5 rounded-md bg-slate-700 text-white text-sm">${cancelText}</button>
                            <button class="ok px-3 py-1.5 rounded-md bg-rose-600 text-white text-sm">${confirmText}</button>
                        </div>
                    </div>`;
                const btnOk = overlay.querySelector('.ok');
                const btnCancel = overlay.querySelector('.cancel');
                document.body.appendChild(overlay);
                function cleanup(val){ overlay.remove(); resolve(val); }
                btnOk.addEventListener('click', () => cleanup(true));
                btnCancel.addEventListener('click', () => cleanup(false));
                overlay.addEventListener('click', (ev) => { if (ev.target === overlay) cleanup(false); });
                const onKey = (ev) => { if (ev.key === 'Escape') { ev.preventDefault(); cleanup(false); } if (ev.key === 'Enter') { ev.preventDefault(); cleanup(true); } };
                document.addEventListener('keydown', onKey, { once: true });
            });
        }

        // Reveal / hide private email pour admins (toggle inline dans la carte)
        grid.addEventListener('click', (e) => {
            const btn = e.target.closest('.revealEmailBtn');
            if (!btn) return;
            const container = btn.closest('.emailContainer');
            if (!container) return;
            const wrap = container.querySelector('.privateEmailWrap');
            if (!wrap) return;
            const emailEl = wrap.querySelector('.emailValue');
            if (!emailEl) return;
            const email = emailEl.textContent || '';
            // if email currently hidden, show it with Copy and Hide buttons
            if (!container.classList.contains('revealed')) {
                container.classList.add('revealed');
                // replace only the inner content of the container to avoid layout shift
                container.innerHTML = `<span class="text-xs text-slate-400 truncate emailShown" title="${email}">${email}</span>
                    <div class="inline-flex items-center gap-2 ml-2">
                        <button class="copySmall px-2 py-0.5 text-xs rounded-md bg-emerald-600 text-white hover:bg-emerald-500">Copier</button>
                        <button class="hideEmailBtn px-2 py-0.5 text-xs rounded-md bg-slate-700 text-white hover:bg-slate-600">Cacher</button>
                    </div>`;
                const copyBtn = container.querySelector('.copySmall');
                copyBtn?.addEventListener('click', () => {
                    navigator.clipboard?.writeText(email).then(() => {
                        copyBtn.textContent = 'Copié !';
                        setTimeout(() => copyBtn.textContent = 'Copier', 1000);
                    }).catch(() => { });
                });
                const hideBtn = container.querySelector('.hideEmailBtn');
                hideBtn?.addEventListener('click', () => {
                    // restore to initial state (Email privé + reveal button) with new markup
                    container.classList.remove('revealed');
                    container.innerHTML = `<span class="text-xs text-slate-500 italic privateEmailLabel" title="${email}">Email privé</span>` +
                        `<span class="privateEmailWrap ml-3 inline-flex items-center gap-2 text-xs">` +
                        `<button type="button" class="revealEmailBtn inline-flex items-center gap-2 px-2 py-0.5 rounded-md bg-indigo-600/85 hover:bg-indigo-500 text-white text-xs focus:outline-none focus:ring-2 focus:ring-indigo-400" aria-label="Afficher l'email">` +
                        `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" class="h-3 w-3 text-white"><path stroke-linecap="round" stroke-linejoin="round" d="M3 8.5v7A2.5 2.5 0 0 0 5.5 18h13A2.5 2.5 0 0 0 21 15.5v-7A2.5 2.5 0 0 0 18.5 6h-13A2.5 2.5 0 0 0 3 8.5z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M21 8.5l-9 5-9-5"/></svg>` +
                        `<span>Afficher</span></button>` +
                        `<span class="emailValue hidden" title="${email}">${email}</span>` +
                        `</span>`;
                });
            }
        });

        // Init
        if (sort) sort.value = 'date-desc';
        applySort();
        applyFilter();

        // shortcut
        document.addEventListener('keydown', (ev) => {
            const isMac = /Mac|iPod|iPhone|iPad/.test(navigator.platform);
            const meta = isMac ? ev.metaKey : ev.ctrlKey;
            if (meta && ev.key.toLowerCase() === 'k') { ev.preventDefault(); search?.focus(); }
        });

        // ========= Modale de gestion utilisateur =========
        const myRole = "<%= (user && user.role && (user.role.id || user.role.name)) ? (user.role.id || user.role.name) : 'USER' %>";
        // Charger dynamiquement les rôles depuis l'API
        const rolesCache = { list: [] };
        async function loadRoles() {
            try {
                const res = await fetch('/api/roles');
                if (!res.ok) return;
                const json = await res.json();
                const roles = Array.isArray(json.roles) ? json.roles : [];
                rolesCache.list = roles;
                // Peupler roleFilter
                const rf = document.getElementById('roleFilter');
                if (rf) {
                    const current = rf.value;
                    rf.innerHTML = '<option value="all">Tous rôles</option>' + roles.map(r => `<option value="${r.id}">${r.name}</option>`).join('');
                    rf.value = current || 'all';
                }
                // Peupler umRole
                const umRoleSel = document.getElementById('umRole');
                if (umRoleSel) {
                    umRoleSel.innerHTML = roles.map(r => `<option value="${r.id}">${r.name}</option>`).join('');
                }
            } catch {}
        }
        loadRoles();
        const um = {
            root: document.getElementById('userManageModal'),
            close: document.getElementById('umClose'),
            name: document.getElementById('umUserName'),
            id: document.getElementById('umUserId'),
            role: document.getElementById('umRole'),
            view: document.getElementById('umViewProfile'),
            copy: document.getElementById('umCopyLink'),
            disable2fa: document.getElementById('umDisable2fa'),
            del: document.getElementById('umDelete')
        };
        let currentLI = null;
        let currentUserDetails = null;
        let currentPlinkks = [];

        async function fetchUserDetails(userId){
            try { const res = await fetch('/api/users/' + encodeURIComponent(userId)); if (!res.ok) throw new Error('HTTP '+res.status); return await res.json(); } catch(e){ console.error(e); return null; }
        }

        async function openUserModal(li){
            currentLI = li;
            const displayName = li.querySelector('.font-semibold')?.textContent?.trim() || li.dataset.id;
            const id = li.dataset.id;
            const role = li.dataset.role || 'USER';
            const twofa = (li.dataset.twofa === '1');
            const views = Number(li.dataset.views || 0) || 0;
            const plCount = Number(li.dataset.plinkksCount || 0) || 0;
            const plActiveCount = Number(li.dataset.plinkksActive || 0) || 0;
            const mustChange = (li.dataset.mustChange === '1');

            um.name.textContent = displayName || id;
            um.id.textContent = id;
            um.role.value = role;
            um.view.href = "<%= frontendUrl %>" + '/' + id;
            um.disable2fa.disabled = !twofa;
            // Stats
            const v = document.getElementById('umStatViews'); if (v) v.textContent = String(views);
            const pc = document.getElementById('umStatPlCount'); if (pc) pc.textContent = String(plCount);
            const pa = document.getElementById('umStatPlActive'); if (pa) pa.textContent = String(plActiveCount);
            // Force reset password toggle
            const fp = document.getElementById('umForcePwd'); if (fp) fp.checked = !!mustChange;

            // Charger les détails + plinkks depuis l'API
            currentUserDetails = await fetchUserDetails(id);
            const plSelect = document.getElementById('umPlSelect');
            const plSlug = document.getElementById('umPlSlug');
            const plPublic = document.getElementById('umPlPublic');
            const plActiveChk = document.getElementById('umPlActive');
            const plDefault = document.getElementById('umPlDefault');
            const plMeta = document.getElementById('umPlMeta');
            const plPreview = document.getElementById('umPlPreview');
            const plEmailVisible = document.getElementById('umPlEmailVisible');
            const plViews = document.getElementById('umPlViews');
            currentPlinkks = Array.isArray(currentUserDetails?.plinkks) ? currentUserDetails.plinkks : [];
            // Options: label = name||slug (+ Par défaut)
            const opts = currentPlinkks.map(p => ({
                id: p.id, slug: (p.slug||''), label: (p.isDefault ? (p.name||p.slug||'Par défaut')+ ' (Par défaut)' : (p.name||p.slug||'Sans nom')),
                isDefault: !!p.isDefault, isPublic: !!p.isPublic, isActive: !!p.isActive,
                url: p.isDefault ? ('/'+id) : ('/'+p.slug), views: (p.views||0), emailVisible: !!(p.settings && p.settings.affichageEmail)
            }));
            if (plSelect){ plSelect.innerHTML = opts.map((o,i)=>`<option value="${i}">${o.label}${o.slug?` (${o.slug})`:''}</option>`).join(''); }
            function applyPl(i){
                const o = opts[i|0]||opts[0]; if (!o) return;
                if (plSlug) plSlug.value = o.slug || '';
                if (plPublic) plPublic.checked = !!o.isPublic;
                if (plActiveChk) plActiveChk.checked = !!o.isActive;
                if (plDefault) plDefault.checked = !!o.isDefault;
                if (plEmailVisible) plEmailVisible.checked = !!o.emailVisible;
                if (plPreview) plPreview.href = "<%= frontendUrl %>" + o.url;
                if (plViews) plViews.textContent = String(o.views||0);
                if (plMeta) plMeta.textContent = o.slug ? `/${id}/${o.slug}` : `/${id}`;
                // Mettre à jour les liens "Voir le profil" et "Copier le lien"
                if (um.view) um.view.href = "<%= frontendUrl %>" + o.url;
                um.copy?.setAttribute('data-url', "<%= frontendUrl %>" + o.url);
            }
            if (plSelect){ plSelect.value = '0'; applyPl(0); plSelect.onchange = ()=> applyPl(Number(plSelect.value||0)); }

            // Appliquer les restrictions de rôle selon mon rôle
            // Appliquer restrictions même avec rôles dynamiques: on garde un mapping par défaut et on étend dynamiquement
            const baseRanks = { USER:0, MODERATOR:1, DEVELOPER:2, ADMIN:3 };
            const ranks = { ...baseRanks };
            // Donner un rang par ordre alphabétique aux rôles inconnus pour éviter blocage, mais garder ADMIN au sommet
            const dyn = (rolesCache.list || []).map(r => r.name).filter(n => !(n in ranks) && n !== 'ADMIN').sort();
            dyn.forEach((name, i) => { ranks[name] = 1 + i; });
            ranks['ADMIN'] = Math.max(...Object.values(ranks)) + 1;
            Array.from(um.role.options).forEach(opt => {
                const target = opt.textContent || opt.value;
                let disabled = false;
                if (myRole === 'ADMIN') disabled = false;
                else if (myRole === 'DEVELOPER') disabled = (target === 'ADMIN');
                else disabled = (ranks[target] ?? 0) >= (ranks[myRole]||0);
                opt.disabled = !!disabled;
            });

            um.root.classList.remove('hidden');
            um.root.classList.add('flex');
            document.body.style.overflow = 'hidden';
            requestAnimationFrame(()=>{
                const overlay = um.root.querySelector('[data-close]');
                const panel = um.root.querySelector('.relative.w-full.max-w-3xl');
                overlay && overlay.classList.add('opacity-100');
                if (panel){ panel.classList.remove('translate-y-2','opacity-0'); panel.classList.add('translate-y-0','opacity-100'); }
            });
        }
        function closeUserModal(){
            const overlay = um.root.querySelector('[data-close]');
            const panel = um.root.querySelector('.relative.w-full.max-w-3xl');
            if (overlay) overlay.classList.remove('opacity-100');
            if (panel){ panel.classList.add('translate-y-2'); panel.classList.remove('opacity-100'); panel.classList.add('opacity-0'); }
            setTimeout(()=>{
                um.root.classList.add('hidden');
                um.root.classList.remove('flex');
                document.body.style.overflow = '';
                currentLI = null;
            }, 180);
        }

        grid.addEventListener('click', (e)=>{
            const btn = e.target.closest('.userManageBtn');
            if (!btn) return;
            const li = btn.closest('li');
            if (!li) return;
            openUserModal(li);
        });
        um.close?.addEventListener('click', closeUserModal);
        um.root?.querySelector('[data-close]')?.addEventListener('click', closeUserModal);
        document.addEventListener('keydown', (e)=>{ if(e.key==='Escape' && !um.root.classList.contains('hidden')) closeUserModal(); });

        // Actions dans la modale
        um.copy?.addEventListener('click', async ()=>{
            if (!currentLI) return;
            // URL déjà calculée selon la page sélectionnée
            const fallback = '/' + currentLI.dataset.id;
            const raw = um.copy.getAttribute('data-url') || fallback;
            const url = (window.location && window.location.origin ? window.location.origin : '') + raw;
            try { await navigator.clipboard?.writeText(url); showToast('Lien copié'); } catch(e){ showToast('Copie échouée'); }
        });

        um.role?.addEventListener('change', async ()=>{
            if (!currentLI) return;
            const id = currentLI.dataset.id;
            const newRole = um.role.value;
            const prev = currentLI.dataset.role;
            try{
                const res = await fetch('/api/users/' + encodeURIComponent(id) + '/role', {
                    method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ role: newRole })
                });
                if (!res.ok) throw new Error('HTTP '+res.status);
                currentLI.dataset.role = newRole;
                const badge = currentLI.querySelector('.roleDisplay');
                if (badge) badge.textContent = newRole;
                applyFilter();
                showToast('Rôle mis à jour');
            } catch(err){
                console.error(err); showToast('Erreur de mise à jour du rôle'); um.role.value = prev;
            }
        });

        

        um.disable2fa?.addEventListener('click', async ()=>{
            if (!currentLI || um.disable2fa.disabled) return; const id = currentLI.dataset.id;
            const ok = window.confirm("Désactiver la 2FA pour @"+id+" ?\nL'utilisateur devra la reconfigurer pour la réactiver.");
            if (!ok) return;
            const btn = um.disable2fa; const spinner = btn.querySelector('.plinkk-spinner'); const label = btn.querySelector('span'); const prevLabel = label ? label.textContent : btn.textContent;
            btn.disabled = true; if (spinner) spinner.classList.remove('hidden'); if (label) label.textContent = 'Désactivation...';
            try{
                const res = await fetch(`/api/users/${encodeURIComponent(id)}/2fa/disable`, { method:'POST' });
                if (!res.ok) throw new Error('HTTP '+res.status);
                currentLI.dataset.twofa = '0';
                if (label) label.textContent = 'A2F désactivée';
                showToast('2FA désactivée');
            }catch(err){ console.error(err); showToast('Erreur: 2FA'); if (label) label.textContent = prevLabel; btn.disabled = false; }
            finally { if (spinner) spinner.classList.add('hidden'); }
        });

        um.del?.addEventListener('click', async ()=>{
            if (!currentLI) return; const id = currentLI.dataset.id; const name = currentLI.querySelector('.font-semibold')?.textContent?.trim() || id;
            const ok = await confirmWithInput(name, id); if (!ok) return;
            const btn = um.del; const spinner = btn.querySelector('.plinkk-spinner'); const label = btn.querySelector('span'); const prev = label ? label.textContent : btn.textContent; btn.disabled = true; if (spinner) spinner.classList.remove('hidden'); if (label) label.textContent = 'Suppression...';
            try{
                const res = await fetch(`/api/users/${encodeURIComponent(id)}`, { method:'DELETE' });
                if (!res.ok) throw new Error('HTTP '+res.status);
                currentLI.remove(); paginator.setFiltered(paginator.getAll()); if (totalCount) totalCount.textContent = String(paginator.getAll().length);
                closeUserModal(); showToast('Utilisateur supprimé');
            }catch(err){ console.error(err); showToast('Suppression impossible'); if (label) label.textContent = prev; btn.disabled = false; }
            finally { if (spinner) spinner.classList.add('hidden'); }
        });

        // === Gestion Plinkk (sauvegarder / supprimer) ===
        (function(){
                const plSelect = document.getElementById('umPlSelect');
                const plSlug = document.getElementById('umPlSlug');
                const plPublic = document.getElementById('umPlPublic');
                const plActiveChk = document.getElementById('umPlActive');
                const plDefault = document.getElementById('umPlDefault');
                const plEmailVisible = document.getElementById('umPlEmailVisible');
            const plSave = document.getElementById('umPlSave');
            const plDelete = document.getElementById('umPlDelete');
            const plMeta = document.getElementById('umPlMeta');

            function getSelectedPlinkkId(userId){
                const idx = Number(plSelect && plSelect.value || 0);
                const p = Array.isArray(currentPlinkks) ? currentPlinkks[idx|0] : null;
                return p ? p.id : null;
            }

                                        plSave?.addEventListener('click', async ()=>{
                if (!currentLI) return; const userId = currentLI.dataset.id;
                const pId = await getSelectedPlinkkId(userId);
                if (!pId) { showToast('Impossible de trouver la page'); return; }
                                            const payload = { };
                                            const newSlug = plSlug && plSlug.value ? plSlug.value.trim() : '';
                if (newSlug !== '') payload.slug = newSlug;
                                            payload.isPublic = !!(plPublic && plPublic.checked);
                                            if (plDefault && plDefault.checked) payload.isDefault = true;
                                            const saveBtn = document.getElementById('umPlSave'); const s1 = saveBtn?.querySelector('.plinkk-spinner'); const l1 = saveBtn?.querySelector('span'); const prev = l1 ? l1.textContent : '';
                                            if (saveBtn) saveBtn.disabled = true; if (s1) s1.classList.remove('hidden'); if (l1) l1.textContent = 'Enregistrement...';
                try{
                    const res = await fetch('/api/admin/plinkks/' + encodeURIComponent(pId), { method:'PATCH', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload) });
                    if (!res.ok) throw new Error('HTTP '+res.status);
                    // Active toggle is a separate call if changed
                    const active = !!(plActiveChk && plActiveChk.checked);
                    await fetch('/api/admin/plinkks/' + encodeURIComponent(pId) + '/active', { method:'PATCH', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ isActive: active }) });
                    // Email visibilité (affichageEmail)
                    if (plEmailVisible){
                        const checked = !!plEmailVisible.checked;
                        const uEmail = currentUserDetails?.publicEmail || currentUserDetails?.email || '';
                        await fetch('/api/admin/plinkks/' + encodeURIComponent(pId) + '/config', { method:'PUT', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ affichageEmail: checked ? uEmail : null }) });
                    }
                    showToast('Plinkk mis à jour');
                                            }catch(err){ console.error(err); showToast('Erreur: mise à jour Plinkk'); }
                                            finally{ if (saveBtn) saveBtn.disabled = false; if (s1) s1.classList.add('hidden'); if (l1) l1.textContent = prev || 'Enregistrer'; }
            });

            plDelete?.addEventListener('click', async ()=>{
                if (!currentLI) return; const userId = currentLI.dataset.id;
                const pId = await getSelectedPlinkkId(userId);
                if (!pId) { showToast('Impossible de trouver la page'); return; }
                const ok = await confirmSimple('Supprimer cette page Plinkk ? Cette action est irréversible.', { confirmText: 'Supprimer', cancelText: 'Annuler' });
                if (!ok) return;
                const delBtn = document.getElementById('umPlDelete'); const s2 = delBtn?.querySelector('.plinkk-spinner'); const l2 = delBtn?.querySelector('span'); const prev2 = l2 ? l2.textContent : '';
                if (delBtn) delBtn.disabled = true; if (s2) s2.classList.remove('hidden'); if (l2) l2.textContent = 'Suppression...';
                try{
                    const res = await fetch('/api/admin/plinkks/' + encodeURIComponent(pId), { method:'DELETE' });
                    if (!res.ok) throw new Error('HTTP '+res.status);
                    showToast('Plinkk supprimé');
                }catch(err){ console.error(err); showToast('Suppression impossible'); }
                finally { if (delBtn) delBtn.disabled = false; if (s2) s2.classList.add('hidden'); if (l2) l2.textContent = prev2 || 'Supprimer'; }
            });
        })();

        // Forcer le reset du mot de passe
        const umForcePwd = document.getElementById('umForcePwd');
        const umForcePwdSpin = document.getElementById('umForcePwdSpin');
        umForcePwd?.addEventListener('change', async ()=>{
            if (!currentLI) return;
            const id = currentLI.dataset.id;
            const next = umForcePwd.checked;
            const prev = currentLI.dataset.mustChange === '1';
            umForcePwd.disabled = true; umForcePwdSpin?.classList.remove('hidden');
            try{
                const res = await fetch('/api/users/' + encodeURIComponent(id) + '/force-password-reset', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ mustChange: next }) });
                if (!res.ok) throw new Error('HTTP '+res.status);
                currentLI.dataset.mustChange = next ? '1' : '0';
                showToast(next ? 'Reset MDP forcé activé' : 'Reset MDP forcé désactivé');
            }catch(err){
                console.error(err);
                showToast('Erreur: reset MDP');
                umForcePwd.checked = !!prev;
            } finally { umForcePwd.disabled = false; umForcePwdSpin?.classList.add('hidden'); }
        });

        // Ban email (modération)
        (function(){
            const banState = document.getElementById('umBanState');
            const banForm = document.getElementById('umBanForm');
            const banReason = document.getElementById('umBanReason');
            const banMinutes = document.getElementById('umBanMinutes');
            const banDelete = document.getElementById('umBanDeletePlinkk');
            const banApply = document.getElementById('umBanApply');
            const banRevoke = document.getElementById('umBanRevoke');

            async function loadBanState(userId){
                try{
                    const res = await fetch('/api/users/' + encodeURIComponent(userId) + '/ban-email');
                    if (!res.ok) throw new Error('HTTP '+res.status);
                    const json = await res.json();
                    const active = !!json.active;
                    if (active){
                        banState.classList.remove('hidden');
                        banForm.classList.add('hidden');
                        banRevoke.classList.remove('hidden');
                        banState.innerHTML = `Email banni: <strong>${json?.ban?.email||''}</strong> — Raison: ${json?.ban?.reason||''}${json?.until?` — Jusqu’au ${new Date(json.until).toLocaleString()}`:''}`;
                    } else {
                        banState.classList.add('hidden');
                        banForm.classList.remove('hidden');
                        banRevoke.classList.add('hidden');
                    }
                } catch (e){
                    banState.classList.add('hidden');
                    banForm.classList.remove('hidden');
                    banRevoke.classList.add('hidden');
                }
            }

            // Charger état ban à chaque ouverture de modale
            const observer = new MutationObserver(()=>{
                if (!currentLI) return;
                const id = currentLI.dataset.id; loadBanState(id);
            });
            observer.observe(document.body, { attributes:true, subtree:false, attributeFilter:['style'] });

            banApply?.addEventListener('click', async ()=>{
                if (!currentLI) return; const id = currentLI.dataset.id;
                const btn = banApply; const s = btn.querySelector('.plinkk-spinner'); const l = btn.querySelector('span'); const prev = l?l.textContent:'';
                btn.disabled=true; s?.classList.remove('hidden'); if(l) l.textContent='Application...';
                try{
                    const payload = { reason: (banReason.value||'').trim(), time: Number(banMinutes.value||'-1'), deletePlinkk: !!banDelete.checked };
                    const res = await fetch('/api/users/' + encodeURIComponent(id) + '/ban-email', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload) });
                    if (!res.ok) {
                        let msg = 'Erreur: ban';
                        try {
                            const e = await res.json();
                            const code = e?.error || '';
                            const map = {
                              cannot_self_ban: "Vous ne pouvez pas vous bannir vous‑même.",
                              cannot_ban_admin: "Vous ne pouvez pas bannir un administrateur.",
                              forbidden_role: "Vous ne pouvez pas bannir un utilisateur d’un rôle égal ou supérieur au vôtre.",
                              already_banned: "Cet email est déjà banni.",
                              invalid_email: "Email invalide.",
                              unauthorized: "Non autorisé.",
                              forbidden: "Accès interdit."
                            };
                            msg = map[code] || msg;
                        } catch {}
                        showToast(msg);
                        return;
                    }
                    showToast('Ban appliqué');
                    await loadBanState(id);
                } catch(e){ console.error(e); showToast('Erreur: ban'); }
                finally{ btn.disabled=false; s?.classList.add('hidden'); if(l) l.textContent = prev || 'Bannir'; }
            });
            banRevoke?.addEventListener('click', async ()=>{
                if (!currentLI) return; const id = currentLI.dataset.id;
                if (!confirm('Révoquer le ban de cet email ?')) return;
                const btn = banRevoke; const s = btn.querySelector('.plinkk-spinner'); const l = btn.querySelector('span'); const prev = l?l.textContent:'';
                btn.disabled=true; s?.classList.remove('hidden'); if(l) l.textContent='Révocation...';
                try{
                    const res = await fetch('/api/users/' + encodeURIComponent(id) + '/ban-email', { method:'DELETE' });
                    if (!res.ok) {
                        let msg = 'Erreur: révocation';
                        try{ const e = await res.json(); const code = e?.error || ''; const map = { no_active_ban: 'Aucun ban actif pour cet email.' }; msg = map[code] || msg; }catch{}
                        showToast(msg);
                        return;
                    }
                    showToast('Ban révoqué');
                    await loadBanState(id);
                } catch(e){ console.error(e); showToast('Erreur: révocation'); }
                finally{ btn.disabled=false; s?.classList.add('hidden'); if(l) l.textContent = prev || 'Révoquer le ban'; }
            });
        })();
    })();
</script>

</html>