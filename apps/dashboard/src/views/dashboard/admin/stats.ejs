<%- include('../../partials/head.ejs', { title: 'Admin - Statistiques', description: 'Statistiques des utilisateurs', robots: 'noindex,nofollow' }) %>
<%- include('../../partials/header-dash.ejs', { user: user }) %>
<%- include('../../partials/admin-nav.ejs', { user: user }) %>

<main class="max-w-7xl mx-auto p-4 space-y-5">
  <div>
    <h1 class="text-2xl font-bold tracking-tight">Statistiques — Utilisateurs</h1>
    <p class="text-xs text-slate-400">Filtre par dates, rôle et visibilité. Graphique des inscriptions/jour.</p>
  </div>

  <!-- Filtres -->
  <section class="rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 gap-3">
      <label class="text-sm">Du
        <input type="date" id="from" class="mt-1 w-full px-3 py-2 rounded bg-slate-900/60 border border-slate-700" />
      </label>
      <label class="text-sm">Au
        <input type="date" id="to" class="mt-1 w-full px-3 py-2 rounded bg-slate-900/60 border border-slate-700" />
      </label>
    </div>
    <div class="mt-3 flex flex-wrap items-center gap-2">
      <div class="flex items-center gap-2 text-sm">
        <label for="customDays" class="text-slate-300">Durée</label>
        <input id="customDays" type="number" min="1" value="15" class="w-20 px-2 py-1 rounded bg-slate-900/60 border border-slate-700" />
        <span class="text-slate-400">jours</span>
      </div>
      <button id="last24h" class="px-3 py-2 rounded bg-slate-800 border border-slate-700 text-slate-200 text-sm">24 h</button>
      <button id="last7" class="px-3 py-2 rounded bg-slate-800 border border-slate-700 text-slate-200 text-sm">7 jours</button>
      <button id="last30" class="px-3 py-2 rounded bg-slate-800 border border-slate-700 text-slate-200 text-sm">30 jours</button>
      <button id="last90" class="px-3 py-2 rounded bg-slate-800 border border-slate-700 text-slate-200 text-sm">90 jours</button>
    </div>
  </section>


  <!-- Graphique -->
  <section class="rounded-lg border border-slate-800/70 bg-slate-900/60 p-4">
    <div class="flex items-center justify-between mb-2">
      <h2 class="font-medium">Inscriptions par jour</h2>
      <div class="text-xs text-slate-400" id="rangeLabel"></div>
    </div>
    <div class="grid grid-cols-1 lg:grid-cols-5 gap-4 items-stretch">
      <div class="lg:col-span-4">
        <canvas id="chart" class="w-full block" style="width:100%" height="260"></canvas>
      </div>
      <aside class="lg:col-span-1">
        <div class="p-3">
          <div class="text-xs text-slate-400 mb-2">Résumé</div>
          <div class="bg-slate-900/50 border border-slate-800 rounded overflow-hidden">
            <div class="flex items-center justify-between px-3 py-2 border-b border-slate-800 bg-gradient-to-r from-indigo-600/6 to-transparent">
              <div class="text-sm text-slate-300">Total</div>
              <div id="statTotal" class="text-lg font-bold text-white">–</div>
            </div>
            <div class="flex items-center justify-between px-3 py-2 border-b border-slate-800">
              <div class="text-sm text-slate-400">Publics</div>
              <div id="statPub" class="text-sm font-semibold text-slate-100">–</div>
            </div>
            <div class="flex items-center justify-between px-3 py-2 border-b border-slate-800">
              <div class="text-sm text-slate-400">Privés</div>
              <div id="statPriv" class="text-sm font-semibold text-slate-100">–</div>
            </div>
            <div class="flex items-center justify-between px-3 py-2">
              <div class="text-sm text-slate-400">Staff</div>
              <div id="statStaff" class="text-sm font-semibold text-slate-100">–</div>
            </div>
          </div>
        </div>
      </aside>
    </div>
  </section>
</main>

<script>
(function(){
  const $ = (s,r=document)=>r.querySelector(s);
  function fmtDate(d){ const y=d.getUTCFullYear(); const m=String(d.getUTCMonth()+1).padStart(2,'0'); const dd=String(d.getUTCDate()).padStart(2,'0'); return `${y}-${m}-${dd}`; }
  function setRange(days){ const to=new Date(); const from=new Date(to.getTime()- (days-1)*86400000); $('#from').value=fmtDate(from); $('#to').value=fmtDate(to); }
  // init défaut: 30 jours
  if(!$('#from').value || !$('#to').value) setRange(30);

  const ctx = $('#chart').getContext('2d');
  let lastSeries = [];
  function renderChart(series){
    lastSeries = series || [];
    const labels = lastSeries.map(p=>p.date);
    const data = lastSeries.map(p=>p.count);

    // Gestion HiDPI et largeur 100%
    const dpr = window.devicePixelRatio || 1;
    const cssW = ctx.canvas.clientWidth;
    // IMPORTANT: utiliser la hauteur CSS pour éviter l'agrandissement cumulatif
    const cssH = 260;
    ctx.canvas.width = Math.max(1, Math.floor(cssW * dpr));
    ctx.canvas.height = Math.floor(cssH * dpr);
    const w = ctx.canvas.width;
    const h = ctx.canvas.height;
    ctx.setTransform(dpr, 0, 0, dpr, 0, 0); // coord en CSS px
    ctx.clearRect(0,0,cssW,cssH);

    const padL = 40; // padding gauche pour labels Y
    const padB = 28; // padding bas pour labels X
    const padT = 10; const padR = 10;
    const innerW = cssW - padL - padR;
    const innerH = cssH - padT - padB;

    const maxVal = Math.max(1, ...data);
    const yTicks = 5;
    const stepY = Math.max(1, Math.ceil(maxVal / yTicks));
    const maxRounded = Math.max(stepY, stepY * yTicks);
    const stepX = data.length > 1 ? (innerW / (data.length - 1)) : 0;
    const scaleY = innerH / maxRounded;

    // axes
    ctx.strokeStyle = 'rgba(148,163,184,0.35)';
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.moveTo(padL, padT);
    ctx.lineTo(padL, padT + innerH);
    ctx.lineTo(padL + innerW, padT + innerH);
    ctx.stroke();

    // grille et ticks Y
    ctx.fillStyle = 'rgba(148,163,184,0.7)';
    ctx.font = '11px system-ui, -apple-system, Segoe UI, Roboto, sans-serif';
    ctx.textAlign = 'right';
    ctx.textBaseline = 'middle';
    for(let y=0; y<=maxRounded; y+=stepY){
      const py = padT + innerH - y*scaleY;
      ctx.strokeStyle = 'rgba(148,163,184,0.15)';
      ctx.beginPath(); ctx.moveTo(padL, py); ctx.lineTo(padL + innerW, py); ctx.stroke();
      ctx.fillStyle = 'rgba(148,163,184,0.7)';
      ctx.fillText(String(y), padL - 6, py);
    }

    // ticks X (dates espacées)
    ctx.textAlign = 'center';
    ctx.textBaseline = 'top';
    const xLabelEvery = Math.max(1, Math.ceil(labels.length / 6));
    labels.forEach((lab, i)=>{
      if(i % xLabelEvery !== 0 && i !== labels.length - 1) return;
      const x = padL + i*stepX;
      ctx.strokeStyle = 'rgba(148,163,184,0.15)';
      ctx.beginPath(); ctx.moveTo(x, padT + innerH); ctx.lineTo(x, padT + innerH + 4); ctx.stroke();
      const shortLab = lab?.slice(5) || '';// MM-DD si YYYY-MM-DD
      ctx.fillStyle = 'rgba(148,163,184,0.7)';
      ctx.fillText(shortLab, x, padT + innerH + 6);
    });

    // polyline
    ctx.strokeStyle = '#6366f1';
    ctx.lineWidth = 2;
    ctx.beginPath();
    data.forEach((v,i)=>{
      const x = padL + i*stepX;
      const y = padT + innerH - v*scaleY;
      if(i===0) ctx.moveTo(x,y); else ctx.lineTo(x,y);
    });
    ctx.stroke();

    // points
    ctx.fillStyle = '#818cf8';
    data.forEach((v,i)=>{
      const x = padL + i*stepX;
      const y = padT + innerH - v*scaleY;
      ctx.beginPath(); ctx.arc(x,y,2.5,0,Math.PI*2); ctx.fill();
    });

    // titres axes
    ctx.fillStyle = 'rgba(148,163,184,0.9)';
    ctx.font = '12px system-ui, -apple-system, Segoe UI, Roboto, sans-serif';
    // X
    ctx.textAlign = 'right'; ctx.textBaseline = 'alphabetic';
    ctx.fillText('Date', padL + innerW, padT + innerH + 24);
    // Y
    ctx.save();
    ctx.translate(12, padT + innerH/2);
    ctx.rotate(-Math.PI/2);
    ctx.textAlign = 'center'; ctx.textBaseline = 'top';
    ctx.fillText('Utilisateurs', 0, 0);
    ctx.restore();
  }

  async function fetchSeries(){
    const q = new URLSearchParams({
      from: $('#from').value,
      to: $('#to').value,
    });
    const res = await fetch(`/admin/stats/users/series?${q.toString()}`);
    if(!res.ok) throw new Error('HTTP '+res.status);
    return res.json();
  }
  async function fetchSummary(){
    const q = new URLSearchParams({
      from: $('#from').value,
      to: $('#to').value,
    });
    const res = await fetch(`/admin/stats/users/summary?${q.toString()}`);
    if(!res.ok) throw new Error('HTTP '+res.status);
    return res.json();
  }

  async function apply(){
    try{
      const [seriesPayload, summary] = await Promise.all([fetchSeries(), fetchSummary()]);
      $('#rangeLabel').textContent = `${seriesPayload.from} → ${seriesPayload.to}`;
      renderChart(seriesPayload.series || []);
      // résumé
      $('#statTotal').textContent = (summary.total ?? 0);
      $('#statPub').textContent = (summary.publics ?? 0);
      $('#statPriv').textContent = (summary.privates ?? 0);
      const staff = (summary.byRole?.ADMIN||0) + (summary.byRole?.DEVELOPER||0) + (summary.byRole?.MODERATOR||0);
      $('#statStaff').textContent = staff;
    } catch(e) {
      console.error(e);
    }
  }

  // setup preset buttons and custom-days input safely
  const presetIds = ['last24h','last7','last30','last90'];
  const presetButtons = presetIds.map(id=>document.getElementById(id));
  function setActive(btn){
    presetButtons.forEach(b=>{
      if(!b) return;
      b.classList.remove('bg-indigo-600','text-white','border-indigo-500');
      b.classList.add('bg-slate-800','text-slate-200','border-slate-700');
    });
    if(btn){
      btn.classList.remove('bg-slate-800','text-slate-200','border-slate-700');
      btn.classList.add('bg-indigo-600','text-white','border-indigo-500');
    }
  }

  presetIds.forEach(id=>{
    const el = document.getElementById(id);
    if(!el) return;
    el.addEventListener('click', (e)=>{
      const val = id==='last24h'?1:(id==='last7'?7:(id==='last30'?30:90));
      setRange(val);
      setActive(e.currentTarget);
      apply();
    });
  });

  const customEl = document.getElementById('customDays');
  if(customEl){
    customEl.addEventListener('input', ()=>{
      const n = Math.max(1, parseInt(customEl.value, 10) || 1);
      setRange(n);
      setActive(null);
      apply();
    });
    customEl.addEventListener('keydown', (ev) => {
      if (ev.key === 'Enter') {
        ev.preventDefault();
        const n = Math.max(1, parseInt(customEl.value, 10) || 1);
        setRange(n);
        setActive(null);
        apply();
      }
    });
  }

  // auto-apply when date inputs change (like presets/customDays)
  const fromEl = document.getElementById('from');
  const toEl = document.getElementById('to');
  if(fromEl){
    fromEl.addEventListener('change', ()=>{ setActive(null); apply(); });
  }
  if(toEl){
    toEl.addEventListener('change', ()=>{ setActive(null); apply(); });
  }

  // auto-appliquer au chargement
  apply();

  // Re-rendu sur resize pour garder la largeur à 100%
  window.addEventListener('resize', ()=>{
    if(lastSeries && lastSeries.length){
      renderChart(lastSeries);
    }
  });
})();
</script>
</body>
</html>