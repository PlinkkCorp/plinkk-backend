// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Rôles de compte (prépare avantages partenaires/admin/développeur...)
enum Role {
  USER
  PARTNER
  ADMIN
  DEVELOPER
  MODERATOR
}

// Statut de publication d'un thème utilisateur
enum ThemeStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

model User {
  id                               String  @id @unique // username slug (sans espace)
  userName                         String
  password                         String
  email                            String  @unique
  publicEmail                      String? 
  // 2FA (TOTP) optionnelle
  twoFactorEnabled                 Boolean @default(false)
  twoFactorSecret                  String?
  profileLink                      String? @default("https://github.com")
  profileImage                     String? @default("https://avatars.githubusercontent.com/u/9919?s=200&v=4")
  profileIcon                      String? @default("https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png")
  profileSiteText                  String? @default("Github")
  iconUrl                          String? @default("https://avatars.githubusercontent.com/u/9919?s=200&v=4")
  description                      String? @default("Mollit laboris cupidatat do enim nulla ex laborum. Nulla labore reprehenderit nisi non anim aute.")
  profileHoverColor                String? @default("#7289DA")
  degBackgroundColor               Int?    @default(45)
  neonEnable                       Int     @default(1)
  buttonThemeEnable                Int     @default(1)
  EnableAnimationArticle           Int     @default(1)
  EnableAnimationButton            Int     @default(1)
  EnableAnimationBackground        Int     @default(1)
  backgroundSize                   Int?    @default(50)
  selectedThemeIndex               Int?    @default(13)
  selectedAnimationIndex           Int?    @default(0)
  selectedAnimationButtonIndex     Int?    @default(10)
  selectedAnimationBackgroundIndex Int?    @default(10)
  animationDurationBackground      Int?    @default(30)
  delayAnimationButton             Float?  @default(0.1)
  canvaEnable                      Int     @default(1)
  selectedCanvasIndex              Int?    @default(16)

  // Relations
  links         Link[]
  labels        Label[]
  socialIcons   SocialIcon[]
  background    BackgroundColor[]
  neonColors    NeonColor[]
  statusbar     Statusbar?
  name          String
  emailVerified Boolean           @default(false)
  image         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now()) @updatedAt

  // Découverte et référencement
  role            Role      @default(USER)
  rankScore       Int       @default(0) // score pour classement/trending
  bumpedAt        DateTime?         // dernier bump gratuit
  bumpExpiresAt   DateTime?         // fin d’effet du bump gratuit
  bumpPaidUntil   DateTime?         // bump payant actif jusqu’à

  // Cosmétiques et avantages visuels
  cosmetics       Cosmetic?             // { flair, bannerUrl, frame, theme, ... }

  // Visibilité répertoire public Plinkk
  isPublic        Boolean   @default(true)
  views           Int       @default(0)

  // Thèmes créés par l'utilisateur
  themes          Theme[]
}

model Cosmetic {
  id            String  @id @default(nanoid(16))
  flair         String? @default("OG")
  frame         String? @default("none")
  theme         String? @default("system")
  bannerUrl     String? @default("")
  banner        String? @default("")

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Link {
  id                     String   @id @default(nanoid(16))
  icon                   String?  @default("https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png")
  url                    String   @default("https://github.com/link")
  text                   String?  @default("Link")
  name                   String?  @default("Github")
  description            String?  @default("Ma description")
  showDescriptionOnHover Boolean? @default(true)
  showDescription        Boolean? @default(true)
  clicks                 Int      @default(0)

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Label {
  id        String @id @default(nanoid(16))
  data      String @default("Developer")
  color     String @default("#FF6384")
  fontColor String @default("#FFFFFF")

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model SocialIcon {
  id   String @id @default(nanoid(16))
  url  String @default("https://github.com")
  icon String @default("Github")

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model BackgroundColor {
  id    String @id @default(nanoid(16))
  color String @default("#FF5733")

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model NeonColor {
  id    String @id @default(nanoid(16))
  color String @default("#7289DA")

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Statusbar {
  id            String  @id @default(nanoid(16))
  text          String? @default("Hello World!")
  colorBg       String? @default("#222222")
  colorText     String? @default("#cccccc")
  fontTextColor Int?    @default(1)
  statusText    String? @default("busy") // offline / online / busy / away

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

// Thème personnalisable soumis par un utilisateur, validé par un admin
model Theme {
  id        String      @id @default(nanoid(16))
  name      String
  description String?
  data      Json        // structure compatible avec src/public/config/themeConfig.js
  status    ThemeStatus @default(DRAFT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt

  // Auteur
  authorId String
  author   User        @relation(fields: [authorId], references: [id])
}

/// Table analytique gérée en dehors de Prisma (créée dynamiquement) — ne pas migrer
model UserViewDaily {
  userId String
  date   String
  count  Int

  @@id([userId, date])
  @@map("UserViewDaily")
}

/// Table analytique gérée en dehors de Prisma (créée dynamiquement) — ne pas migrer
model LinkClickDaily {
  linkId String
  date   String
  count  Int

  @@id([linkId, date])
  @@map("LinkClickDaily")
}
