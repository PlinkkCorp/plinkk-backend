<%- include('partials/head', { title: 'Utilisateurs', description: 'Tous les profils hÃ©bergÃ©s sur Plinkk.' }) %>
<%- include('partials/header') %>

  <main class="max-w-7xl mx-auto p-4 space-y-5">
    <div class="flex flex-col md:flex-row md:items-end md:justify-between gap-3 animate-slide-up">
      <div class="space-y-1">
        <h1 class="text-2xl font-bold tracking-tight">Tous les profils hÃ©bergÃ©s</h1>
        <p class="text-xs text-slate-400">DÃ©couvrez les comptes publics Plinkk.</p>
      </div>

      <% if (plinkks.length > 0) { %>
      <div class="w-full md:w-auto flex flex-col sm:flex-row gap-2">
        <label class="relative block flex-1">
          <input id="searchInput" type="text" placeholder="Rechercher (nom, @id, email)" class="w-full rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 pr-10 text-sm outline-none focus:ring-2 focus:ring-indigo-600 placeholder:text-slate-500" />
          <span class="absolute right-2 top-1/2 -translate-y-1/2 text-slate-500 text-xs">âŒ˜K</span>
        </label>
        <div class="flex gap-2">
          <select id="sortSelect" class="rounded-md bg-slate-900/60 border border-slate-700 px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-indigo-600">
            <option value="name-asc">Nom (Aâ†’Z)</option>
            <option value="name-desc">Nom (Zâ†’A)</option>
            <option value="id-asc">@Id (Aâ†’Z)</option>
            <option value="id-desc">@Id (Zâ†’A)</option>
          </select>
          <button id="resetBtn" class="rounded-md bg-slate-800/60 border border-slate-700 px-3 py-2 text-sm hover:bg-slate-800">RÃ©initialiser</button>
        </div>
      </div>
      <% } %>
    </div>

    <div class="flex items-center justify-between animate-slide-up">
      <p class="text-xs text-slate-400">Total: <span id="totalCount"><%= plinkks.length %></span></p>
      <p class="text-xs text-slate-400 hidden sm:block"><span id="visibleCount"><%= plinkks.length %></span> affichÃ©(s)</p>
    </div>

    <!-- Liste plate des Plinkks (un Ã©lÃ©ment par plinkk) -->
    <section class="mt-4 animate-slide-up">
      <h2 class="text-lg font-medium mb-2">Plinkks publics</h2>
    <% // Construire une liste plate de plinkks avec owner object
      const plinks = [];
      users.forEach(u => { if (Array.isArray(u.plinkks)) u.plinkks.forEach(p => plinks.push({ owner: u, name: p.name, slug: p.slug, isDefault: !!p.isDefault })); });
         // trier par owner (owner.id) puis par name
         plinks.sort((a,b) => { const ao = (a.owner && a.owner.id) ? String(a.owner.id) : ''; const bo = (b.owner && b.owner.id) ? String(b.owner.id) : ''; if (ao === bo) return ((a.name||a.slug||'').toString().localeCompare((b.name||b.slug||''))); return ao.localeCompare(bo); });
         let _prevOwner = null;
      %>

      <% if (users.length === 0) { %>
      <div class="rounded-lg border border-dashed border-slate-700 bg-slate-900/50 p-10 text-center space-y-2 animate-slide-up">
        <div class="text-2xl">ðŸ«¥</div>
        <p class="text-sm text-slate-300 font-medium">Aucun Plinkks pour le moment</p>
        <p class="text-xs text-slate-500">Les Plinkks publics sâ€™afficheront ici.</p>
      </div>
    <% } else { %>
      <ul id="usersGrid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        <% // Render one tile per plinkk while keeping base card styling
        let _prevOwnerTile = null;
        plinks.forEach(p => {
          const owner = p.owner || {};
          const ownerId = owner.id ? String(owner.id) : '';
          const initials = (owner.userName || owner.id || '?').trim().charAt(0).toUpperCase();
          const ownerIsPublicEmail = Boolean(owner.publicEmail);
          const ownerEmail = owner.publicEmail || owner.email || '';
          const role = owner.role || 'USER';
          const cosmetics = (owner.cosmetics || {});
          const selected = (cosmetics.selected || {});
          const bannerUrl = selected.bannerUrl ? String(selected.bannerUrl) : '';
          const showOwnerLabel = (_prevOwnerTile !== ownerId);
     %>
          <li class="group rounded-xl border border-slate-800/80 bg-slate-900/70 hover:bg-slate-900 transition-colors shadow-sm hover:shadow-md animate-slide-up overflow-hidden"
          data-name="<%- ((p.name||p.slug)||'').toLowerCase() %>"
          data-id="<%- (ownerId||'').toLowerCase() %>"
          data-search="<%- (((p.name||p.slug)||'') + ' ' + ownerId).toLowerCase() %>">
            <% if (bannerUrl) { %>
              <div class="h-12 w-full border-b border-slate-800" style="background: center/cover no-repeat url('<%= bannerUrl %>')"></div>
            <% } %>
            <div class="p-4 flex items-start gap-3">
                <div class="relative ">
                <div class="relative shrink-0 h-11 w-11 rounded-full border border-indigo-600/50 overflow-hidden grid place-items-center bg-indigo-700/70 text-sm font-semibold text-white">
                  <%- include('partials/avatar.ejs', { user: owner }) %>
                </div>
              </div>
              <div class="min-w-0 flex-1">
                <div class="flex items-center gap-2 min-w-0">
                  <div class="font-semibold truncate"><%= p.name || p.slug %></div>
                  <span class="text-[11px] px-2 py-0.5 rounded-full bg-slate-800/80 border border-slate-700 text-slate-300 max-w-[7.5rem] truncate inline-block">@<%= ownerId %></span>
                  <% if (role && role !== 'USER') { %>
                    <span class="text-[10px] px-2 py-0.5 rounded-full border truncate <%= role === 'ADMIN' ? 'bg-red-600/20 border-red-500/40 text-red-300' : role === 'PARTNER' ? 'bg-indigo-600/20 border-indigo-500/40 text-indigo-300' : role === 'DEVELOPER' ? 'bg-emerald-600/20 border-emerald-500/40 text-emerald-300' : 'bg-slate-700/30 border-slate-600/50 text-slate-300' %>"><%= role %></span>
                  <% } %>
                </div>
                  <div class="text-xs text-slate-400 truncate">/<%= p.isDefault ? ownerId : (p.slug || (ownerId + '/' + p.slug)) %></div>
                <% if (showOwnerLabel) { %>
                  <div class="mt-2 text-xs text-slate-400">@<%= ownerId %></div>
                <% } %>
                <div class="mt-3 flex flex-wrap items-center gap-2">
                  <a class="px-3 py-1.5 text-xs rounded-md bg-emerald-700/80 hover:bg-emerald-600 border border-emerald-500/40 text-white shadow transition-colors plinkk-link" href="/<%= p.isDefault ? owner.id : (p.slug || owner.id) %>">Voir</a>
                  <button type="button" class="px-3 py-1.5 text-xs rounded-md bg-slate-800/80 hover:bg-slate-800 border border-slate-700 text-slate-200 transition-colors copyBtn" data-id="<%= p.isDefault ? ownerId : (p.slug || ownerId) %>">Copier le lien</button>
                </div>
              </div>
            </div>
        </li>
     <% _prevOwnerTile = ownerId; }); %>
      </ul>
    <% } %>
  </main>

  <script src="/public/js/pagination.js"></script>
  <!-- Modal pour preview Plinkk -->
  <div id="plinkkPreviewModal" class="fixed inset-0 hidden z-50 items-center justify-center">
    <div class="absolute inset-0 bg-black/60" data-close></div>
    <div class="relative w-full max-w-4xl h-[80vh] bg-slate-900 border border-slate-700 rounded-lg overflow-hidden">
      <div class="flex items-center justify-between p-2 border-b border-slate-800 bg-slate-900/95">
        <div id="plinkkPreviewTitle" class="text-sm text-white font-semibold">PrÃ©visualisation</div>
        <button id="closePlinkkPreview" class="px-3 py-1 rounded bg-slate-800 text-xs">Fermer</button>
      </div>
      <iframe id="plinkkPreviewFrame" src="about:blank" class="w-full h-full bg-white"></iframe>
    </div>
  </div>
  <script>
    (function(){
      const modal = document.getElementById('plinkkPreviewModal');
      const frame = document.getElementById('plinkkPreviewFrame');
      const title = document.getElementById('plinkkPreviewTitle');
      const closeBtn = document.getElementById('closePlinkkPreview');
      function openModal(url, label) {
        try {
          const sep = url.includes('?') ? '&' : '?';
          frame.src = url + sep + 'preview=1';
          title.textContent = label || 'PrÃ©visualisation';
          modal.classList.remove('hidden'); modal.classList.add('flex'); document.body.style.overflow='hidden';
        } catch(e){}
      }
      function closeModal(){ frame.src='about:blank'; modal.classList.add('hidden'); modal.classList.remove('flex'); document.body.style.overflow=''; }
      closeBtn?.addEventListener('click', closeModal);
      modal?.querySelector('[data-close]')?.addEventListener('click', closeModal);
      document.addEventListener('keydown', (e)=>{ if (e.key==='Escape' && !modal.classList.contains('hidden')) closeModal(); });
      document.addEventListener('click', (ev)=>{
        const a = ev.target.closest && ev.target.closest('a.plinkk-link');
        if (!a) return;
        ev.preventDefault();
        const href = a.getAttribute('href') || '';
        const label = a.textContent && a.textContent.trim() ? a.textContent.trim() : href;
        openModal(href, label);
      });
    })();
  
    (function(){
      const $ = (s, r=document) => r.querySelector(s);
      const $$ = (s, r=document) => Array.from(r.querySelectorAll(s));
      const search = $('#searchInput');
      const sort = $('#sortSelect');
      const grid = $('#usersGrid');
      const totalCount = $('#totalCount');
      const visibleCount = $('#visibleCount');
      const resetBtn = $('#resetBtn');

      if (!grid || !window.__PlinkkPaginator) return;

      const paginator = window.__PlinkkPaginator.createPaginator(grid, { pageSize: 21, selectors: { items: 'li' }, onRender: (pageItems, meta) => {
        // mettre Ã  jour visibleCount (nombre total match)
        if (visibleCount) visibleCount.textContent = String(meta.totalItems);
      }});

      // initial total count
      if (totalCount) totalCount.textContent = String(paginator.getAll().length);

      function applyFilter(){
        const q = (search?.value || '').trim().toLowerCase();
        const all = paginator.getAll();
        const filtered = all.filter(li => {
          const hay = li.dataset.search || '';
          return !q || hay.includes(q);
        });
        paginator.setFiltered(filtered);
      }

      function applySort(){
        const val = sort?.value;
        const collator = new Intl.Collator('fr', { sensitivity: 'base' });
        const getKey = (li, key) => (li.dataset[key] || '').toString();
        paginator.sort((a,b) => {
          switch(val){
            case 'name-asc': return collator.compare(getKey(a,'name'), getKey(b,'name'));
            case 'name-desc': return collator.compare(getKey(b,'name'), getKey(a,'name'));
            case 'id-asc': return collator.compare(getKey(a,'id'), getKey(b,'id'));
            case 'id-desc': return collator.compare(getKey(b,'id'), getKey(a,'id'));
            default: return 0;
          }
        });
      }

      search?.addEventListener('input', () => applyFilter());
      sort?.addEventListener('change', () => applySort());
      resetBtn?.addEventListener('click', () => {
        if (search) search.value = '';
        if (sort) sort.value = 'name-asc';
        applySort();
        applyFilter();
      });

      // Copier le lien
      grid.addEventListener('click', (e) => {
        const btn = e.target.closest('.copyBtn');
        if (btn) {
          const url = (window.location && window.location.origin ? window.location.origin : '') + '/' + btn.dataset.id;
          navigator.clipboard?.writeText(url).catch(()=>{});
        }
      });

      // Animation des boutons copier
      const style = document.createElement('style');
      style.textContent = `
        .copy-anim { position: relative; }
        .copy-anim::after {
          content: 'CopiÃ© !';
          position: absolute; left: 50%; top: -10px; transform: translate(-50%, -100%);
          background: rgba(16,185,129,.95); color: #fff; font-size: 10px; border-radius: 6px; padding: 4px 6px;
          opacity: 0; pointer-events: none; transition: opacity .25s ease, transform .25s ease;
          box-shadow: 0 8px 24px rgba(16,185,129,.35);
        }
        .copy-anim.copied::after { opacity: 1; transform: translate(-50%, -120%); }
        .copy-anim.copied { box-shadow: 0 0 0 1px rgba(16,185,129,.35) inset; }
      `;
      document.head.appendChild(style);

      grid.addEventListener('click', (e) => {
        const btn = e.target.closest('.copyBtn');
        if (btn) {
          btn.classList.add('copy-anim');
          setTimeout(()=>btn.classList.add('copied'), 10);
          setTimeout(()=>btn.classList.remove('copied'), 1000);
        }
      });

      // Init
      applySort();
      applyFilter();

      // shortcut
      document.addEventListener('keydown', (ev) => {
        const isMac = /Mac|iPod|iPhone|iPad/.test(navigator.platform);
        const meta = isMac ? ev.metaKey : ev.ctrlKey;
        if (meta && ev.key.toLowerCase() === 'k') { ev.preventDefault(); search?.focus(); }
      });
    })();
  </script>
  </body>
  </html>
