generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  PARTNER
  ADMIN
  DEVELOPER
  MODERATOR
}

enum ThemeStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  ARCHIVED
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum PlinkkEventType {
  CREATED
  DELETED
}

model User {
  id                               String  @id @unique
  userName                         String
  password                         String
  email                            String  @unique
  publicEmail                      String?
  twoFactorEnabled                 Boolean @default(false)
  twoFactorSecret                  String?

  name          String
  emailVerified Boolean           @default(false)
  image         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now()) @updatedAt

  role            Role      @default(USER)
  rankScore       Int       @default(0)
  bumpedAt        DateTime?
  bumpExpiresAt   DateTime?
  bumpPaidUntil   DateTime?

  cosmetics       Cosmetic?
  isPublic        Boolean   @default(true)
  views           Int       @default(0)

  themes          Theme[]
  announcement    AnnouncementTarget[]

  host            Host?

  // Thème personnalisé sélectionné pour usage privé
  selectedCustomThemeId String?

  plinkks        Plinkk[]
  // Relations vers d'autres modèles
  links          Link[]
  labels         Label[]
  socialIcons    SocialIcon[]
  backgroundColors BackgroundColor[]
  neonColors     NeonColor[]
  statusbar      Statusbar?

  slags          Json     @default("[]")
}

model Cosmetic {
  id            String  @id @default(nanoid(16))
  flair         String? @default("OG")
  frame         String? @default("none")
  theme         String? @default("system")
  bannerUrl     String? @default("")
  banner        String? @default("")

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Link {
  id                     String   @id @default(nanoid(16))
  icon                   String?  @default("https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png")
  url                    String   @default("https://github.com/link")
  text                   String?  @default("Link")
  name                   String?  @default("Github")
  description            String?  @default("Ma description")
  showDescriptionOnHover Boolean? @default(true)
  showDescription        Boolean? @default(true)
  clicks                 Int      @default(0)

  userId    String
  user      User    @relation(fields: [userId], references: [id])
  plinkkId  String?
  plinkk    Plinkk? @relation(fields: [plinkkId], references: [id])
}

model Host {
  id                     String   @id
  verified               Boolean  @default(false)
  verifyToken            String   @unique

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Label {
  id        String @id @default(nanoid(16))
  data      String @default("Developer")
  color     String @default("#FF6384")
  fontColor String @default("#FFFFFF")

  userId   String
  user     User    @relation(fields: [userId], references: [id])
  plinkkId String?
  plinkk   Plinkk? @relation(fields: [plinkkId], references: [id])
}

model SocialIcon {
  id   String @id @default(nanoid(16))
  url  String @default("https://github.com")
  icon String @default("Github")

  userId   String
  user     User    @relation(fields: [userId], references: [id])
  plinkkId String?
  plinkk   Plinkk? @relation(fields: [plinkkId], references: [id])
}

model BackgroundColor {
  id    String @id @default(nanoid(16))
  color String @default("#FF5733")

  userId   String
  user     User    @relation(fields: [userId], references: [id])
  plinkkId String?
  plinkk   Plinkk? @relation(fields: [plinkkId], references: [id])
}

model NeonColor {
  id    String @id @default(nanoid(16))
  color String @default("#7289DA")

  userId   String
  user     User    @relation(fields: [userId], references: [id])
  plinkkId String?
  plinkk   Plinkk? @relation(fields: [plinkkId], references: [id])
}

model Statusbar {
  id            String  @id @default(nanoid(16))
  text          String? @default("Hello World!")
  colorBg       String? @default("#222222")
  colorText     String? @default("#cccccc")
  fontTextColor Int?    @default(1)
  statusText    String? @default("busy")

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model PlinkkStatusbar {
  id            String  @id @default(nanoid(16))
  text          String? @default("Hello World!")
  colorBg       String? @default("#222222")
  colorText     String? @default("#cccccc")
  fontTextColor Int?    @default(1)
  statusText    String? @default("busy")

  plinkkId String @unique
  plinkk   Plinkk @relation(fields: [plinkkId], references: [id], onDelete: Cascade)
}

model Announcement {
  id          String   @id @default(nanoid(16))
  level       String   @default("info")
  text        String
  dismissible Boolean  @default(true)
  startAt     DateTime?
  endAt       DateTime?
  createdAt   DateTime @default(now())
  global      Boolean  @default(false)

  targets AnnouncementTarget[]
  roleTargets AnnouncementRoleTarget[]
}

model AnnouncementTarget {
  announcementId String
  userId         String

  announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([announcementId, userId])
}

model AnnouncementRoleTarget {
  announcementId String
  role           Role

  announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@id([announcementId, role])
}

model Theme {
  id        String      @id @default(nanoid(16))
  name      String
  description String?
  data      Json
  status    ThemeStatus @default(DRAFT)
  isPrivate Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt

  pendingUpdate        Json?
  pendingUpdateAt      DateTime?
  pendingUpdateMessage String?

  authorId String
  author   User        @relation(fields: [authorId], references: [id])
}

model Plinkk {
  id        String   @id @default(nanoid(16))
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String
  slug      String
  index     Int      @default(0)
  isDefault Boolean  @default(false)
  isPublic  Boolean  @default(true)
  visibility Visibility @default(PUBLIC)
  isActive  Boolean  @default(true)
  views     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  links         Link[]
  labels        Label[]
  socialIcons   SocialIcon[]
  background    BackgroundColor[]
  neonColors    NeonColor[]
  statusbar     PlinkkStatusbar?
  settings      PlinkkSettings?
  pageStats     PageStat[] @relation("PageStats")

  @@unique([userId, slug])
  @@unique([userId, index])
}

model PlinkkSettings {
  id                               String  @id @default(nanoid(16))
  plinkkId                         String  @unique
  plinkk                           Plinkk  @relation(fields: [plinkkId], references: [id], onDelete: Cascade)

  profileLink                      String?
  profileImage                     String?
  profileIcon                      String?
  profileSiteText                  String?
  userName                         String?
  iconUrl                          String?
  description                      String?
  profileHoverColor                String?
  // affichageEmail spécifique à cette Plinkk (email affiché publiquement pour cette page)
  affichageEmail                   String?
  degBackgroundColor               Int?
  neonEnable                       Int?
  buttonThemeEnable                Int?
  EnableAnimationArticle           Int?
  EnableAnimationButton            Int?
  EnableAnimationBackground        Int?
  backgroundSize                   Int?
  selectedThemeIndex               Int?
  selectedAnimationIndex           Int?
  selectedAnimationButtonIndex     Int?
  selectedAnimationBackgroundIndex Int?
  animationDurationBackground      Int?
  delayAnimationButton             Float?
  canvaEnable                      Int?
  selectedCanvasIndex              Int?
}

model PlinkkEvent {
  id        String          @id @default(nanoid(16))
  type      PlinkkEventType
  userId    String
  plinkkId  String
  createdAt DateTime        @default(now())
}

model UserViewDaily {
  userId String
  date   String
  count  Int
  @@id([userId, date])
  @@map("UserViewDaily")
}

model LinkClickDaily {
  linkId String
  date   String
  count  Int
  @@id([linkId, date])
  @@map("LinkClickDaily")
}

model PlinkkViewDaily {
  plinkkId String
  date     String
  count    Int
  @@id([plinkkId, date])
  @@map("PlinkkViewDaily")
}

model PageStat {
  id           String   @id @default(nanoid(16))
  plinkkId     String
  plinkk       Plinkk   @relation("PageStats", fields: [plinkkId], references: [id], onDelete: Cascade)
  eventType    String
  meta         Json?
  ip           String?
  createdAt    DateTime @default(now())
  @@index([plinkkId, eventType, createdAt])
}
